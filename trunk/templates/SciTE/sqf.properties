file.patterns.sqf=*.sqf;*.ext;*.sqm;*.sqs
filter.sqf=SQF|$(file.patterns.sqf)

lexer.$(file.patterns.sqf)=cpp
keywords.$(file.patterns.sqf)=# <<< KEYWORDS INSERT HERE >>>

# keywords2 is for highlighting user defined keywords or function calls or similar
keywords2.$(file.patterns.sqf)=# <<< COMMANDS INSERT HERE >>>

word.chars.sqf=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.sqf)=$(word.chars.sqf)

# Подсказка по синтаксису
calltip.cpp.word.characters=$(chars.alpha)$(chars.numeric)
calltip.cpp.ignorecase=1
# Символы, после ввода которых возникает подсказка
calltip.cpp.parameters.start= ([
# Символы - разделители параметров
calltip.cpp.parameters.separators=,

comment.block.sqf=//
#comment.block.at.line.start.sqf=1
comment.stream.start.sqf=/*
comment.stream.end.sqf=*/
comment.box.start.sqf=/*
comment.box.middle.sqf= *
comment.box.end.sqf= */
#fold.at.else=1

#indent
statement.indent.$(file.patterns.sqf)=4 case default do else for if while
statement.indent.$(file.patterns.sqf)=4 case default do else for if private protected public while
statement.end.$(file.patterns.sqf)=10 ;
statement.lookback.$(file.patterns.sqf)=40
block.start.$(file.patterns.sqf)=10 {
block.end.$(file.patterns.sqf)=10 }

# Символы, после ввода которых, возникает список автодополнения
autocomplete.cpp.start.characters=$(chars.alpha)$(chars.numeric)$@
#autocomplete.cpp.ignorecase=1
#autocompleteword.cpp.automatic=1

#styling.within.preprocessor=1
preprocessor.symbol.$(file.patterns.sqf)=#
preprocessor.start.$(file.patterns.sqf)=if ifdef ifndef
preprocessor.middle.$(file.patterns.sqf)=else elif
preprocessor.end.$(file.patterns.sqf)=endif

abbreviations.$(file.patterns.sqf)=$(SciteDefaultHome)\abbrev\sqf.abbrev
abbrev.cpp.auto=3
api.$(file.patterns.sqf)=$(SciteDefaultHome)\api\sqf.api

#calltip.cpp.parameters.separators=,

braces.check=1

style.cpp.32=$(font.base)
# White space
style.cpp.0=$(colour.whitespace)
# Comment: /* */.
style.cpp.1=$(colour.code.comment.box),italics
# Line Comment: //.
style.cpp.2=$(colour.code.comment.line),italics
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(colour.code.comment.doc),$(font.code.comment.doc)
# Number
style.cpp.4=$(colour.number)
# Keyword
style.cpp.5=$(colour.keyword)
# Double quoted string
style.cpp.6=$(colour.string)
# Single quoted string
style.cpp.7=$(colour.char)
# UUIDs (only in IDL)
style.cpp.8=$(colour.UUIDs)
# Preprocessor
style.cpp.9=$(colour.preproc)
# Operators
style.cpp.10=$(colour.operator)
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=fore:#000000,back:#E0C0E0,eolfilled
# Verbatim strings for C#
style.cpp.13=fore:#007F00,back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
style.cpp.14=fore:#3F7F3F,back:#E0F0FF,eolfilled
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(colour.code.comment.doc),$(font.code.comment.doc)
# Keywords2
style.cpp.16=$(colour.keyword2)
# Comment keyword
style.cpp.17=fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
style.cpp.18=fore:#804020,$(font.code.comment.doc)
# Braces are only matched in operator style
braces.cpp.style=10
