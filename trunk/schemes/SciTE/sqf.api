abs \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Absolute value of a real number  \nSyntax:  \n Number = abs x \nParameters: \nx: Number \nReturn Value: \n Number
accTime \nGame: Operation Flashpoint (1.00) \nDescription: Returns the current time acceleration factor  \nSyntax:  \n  Number = accTime \nReturn Value: \n Number
acos \nGame: Operation Flashpoint (1.00) \nDescription: ArcCosine of a number, result in Degrees \nSyntax:  \n  Number = acos x \nParameters: \nx: Number \nReturn Value: \n Number
action \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Make a unit to perform an action. Use the List of Actions for reference \n about the available actions and their syntax.  \nSyntax:  \n unitName action action \nParameters: \nunitName: Object \naction: Array \nReturn Value: \n Nothing
actionKeys \nGame: Armed Assault (1.00) \nDescription: Returns a list of dikCodes of buttons assigned to the given user \n action. You can find the action names in config class ControllerSchemes \n or user action names.  \nSyntax:  \n  Array = actionKeys userAction \nParameters: \nuserAction: String \nReturn Value: \n Array
actionKeysImages \nGame: Armed Assault (1.00) \nDescription: Returns a list of button images or names assigned to the given user \n action. A maximum of maxKeys keys is listed. You can find the action \n names in config class ControllerSchemes or user action names.  \nSyntax:  \n  Structured Text = actionKeysImages userAction \nParameters: \nuserAction: String \nReturn Value: \n Structured Text 
actionKeysNames \nGame: Armed Assault (1.00) \nDescription: Returns a list of button names assigned to the given user action \n. A maximum of maxKeys keys is listed. You can find the action names \n in config class ControllerSchemes or user action names.  \nSyntax:  \n String = actionKeysNames userAction \nParameters: \nuserAction: String \nReturn Value: \n String 
actionKeysNamesArray \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns a list of button names assigned to the given user action \n. A maximum of maxKeys keys is listed. You can find the action names \n in config class ControllerSchemes or user action names.  \nSyntax:  \nactionKeysNamesArray userAction \nParameters: \nuserAction: String - name of the action \nReturn Value: \n Array of Strings 
activateAddons \nGame: Armed Assault (1.00) \nDescription: Activates the listed addons. The list of active addons is initialized \n during this function.  \nSyntax:  \n activateAddons [addon1,...] \nParameters: \n[addon1,...]: Array \nReturn Value: \n Nothing
activateKey \nGame: Armed Assault (1.00) \nDescription: Activates the given keyname for the current user profile. The keys \n are used to unlock missions or campaigns. \nSee keys, keysLimit and doneKeys in the description.ext file of the missions \n.  \nSyntax:  \n activateKey keyname \nParameters: \nkeyname: String \nReturn Value: \n Nothing
addAction \nBehavior: local \nGame: Operation Flashpoint (1.1) \nDescription: Add an entry to the action menu of an object. The action is usable \n by anyone, but can only be activated when in proximity to the 'object \n' (eg: building). Adding an action to the player obviously makes \n that action available to the player at all times. \nIn the case of no action list currently set for the object (eg: most \n buildings), adding an entry creates an action list for that object \n. \n \nNote: In ArmA the script file can be sqs or sqf, in OFP it can only \n be an sqs file. \nFilename extension for the script can be anything, but by convention \n, is named.sqs or.sqf \n \nParameters of the called script upon activation: \nAn array of parameters is passed to the called script: [target, caller \n, ID, (arguments)] target: Object - the object which the action is assigned \n to caller: Object - the unit that activated the action ID: Integer \n - ID of the activated action arguments: Anything - arguments given \n to the script if you are using the extended syntax  \nSyntax:  \n Number = unitName addAction [title, filename, (arguments, priority, showWindow, hideOnUse, shortcut, condition, positionInModel, radius, radiusView, showIn3D, available, textDefault, textToolTip)] \n(optional parameters not applicable to OFP, 'condition' parameter only applicable to Arma 2, parameters from 'positionInModel' only for TKOH) \nParameters: \nunitName: Object \n[title, filename, (arguments, priority, showWindow, hideOnUse, shortcut, condition)]: Array \ntitle: String or Structured Text - The action name which is displayed in the action menu. \nfilename: String - Path to the script that is called when the action is activated. Relative to the mission folder. \narguments: Anything - (optional) Arguments to pass to the script (will be (_this select 3) for the script) \npriority: Number - (optional) Priority value of the action. Actions will be arranged descending according to this. Every game action has a preset priority value. Value can be negative or decimal. Actions with same values will be arranged in order which they were made, newest at the bottom. Typical range is 0 (low priority. Eg: 'Get out') to 6 (high priority. Eg: 'Auto-hover on'). \nshowWindow: Boolean - (optional) If set True; players see "Titletext". At mid-lower screen, as they approach the object. False turns it off. \nhideOnUse: Boolean - (optional) If set to true, it will hide the action menu after selecting that action. If set to false, it will leave the action menu open and visible after selecting that action, leaving the same action highlighted, for the purpose of allowing you to reselect that same action quickly, or to select another action. \nshortcut: String - (optional, default:"") One of the key names defined in bin.pbo (e.g. "moveForward") \ncondition: String - (optional, Arma 2 only, default:true) Code that must return true for action to be shown. Special variables "_target" (unit to which action is attached to) and "_this" (caller/executing unit) can be used in the evaluation. \npositionInModel: String - (optional, TKOH only, default: "") Name of the named selection in the model for positioning the action in 3D space; typically a memory point. \nradius: Number - (optional, TKOH only) Distance in meters the unit activating the action must be within to activate it. -1 disables this radius. \nradiusView: Number - (optional, TKOH only) Maximum distance in meters the cursor can be away from the 3D action to activate it. -1 disables this radius. \nshowIn3D: Number - (optional, TKOH only) Condition for showing the action in 3D space (combine by adding up). \n1 - show \n2 - draw if unit is pilot \n4 - draw if unit is inside vehicle \n8 - draw if unit is outside vehicle \n16 - draw if not in external camera \n32 - draw if not in internal camera \n64 - draw if not in gunner camera (turret optics) \navailable: Number - (optional, TKOH only) Condition for being able to activate the action (combine by adding up). \n0 - disabled \n1 - unit is pilot or copilot \n2 - unit is inside target \n4 - unit is not inside target) \ntextDefault: String - (optional, TKOH only) Structured text which is shown as the 3D action (so it can be an icon), or in the center of the screen when the action is highlighted in the action menu for a 2D action. \ntextToolTip: String - (optional, TKOH only) Structured text which is faded in under the textDefault when hovering over the action in 3D space. \nReturn Value: \n Number or Nothing \nThe ID of the action is returned, IDs are incrementing. The first given action to each unit has got the ID 0, the second the ID 1 etc. ID's are also passed to the called script and used to remove an action with removeAction.
addBackpack \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Adds a backpack for a unit. Classname list of available backpacks \n is here  \nSyntax:  \n unit addBackpack packClassName \nParameters: \nunit: Object \npackClassName: String \nReturn Value: \n Nothing
addBackpackCargo \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Add backpack(s) to the cargo space of vehicle. Classname list of available \n backpacks is here  \nSyntax:  \nvehicle addBackpackCargo [packClassName,count] \nParameters: \nvehicle: Object - vehicle to add the backpack to \npackClassName: String - backpack classname \ncount: Number - number of backpacks to add. \nReturn Value: \n Nothing
addBackpackCargoGlobal \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Add backpack(s) to the cargo space of vehicle. MP synchronized. Classname \n list of available backpacks is here  \nSyntax:  \n vehicle addBackpackCargoGlobal  [packClassName, count] \nParameters: \nvehicle: Object to add the Backpack to \npackClassName: String,  See the topic Category:Weapons for reference about possible values. \ncount: Number \nReturn Value: \n Nothing
addCamShake \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Creates the camera shaking effect, like when you are near an explosion \n  \nSyntax:  \n addCamShake [power, duration, frequency] \nParameters: \npower: Number - how strong the camera movement will be \nduration: Number - how long the effect will last \nfrequency: Number - how will be the rhythm \nReturn Value: \n Nothing
addEditorObject \nGame: ARMA 2  (1.00) \nDescription: Add an object to the editor and assign arguments. Create script is,called \n with _new equal to true. Returns the ID of the new EditorObject \n.,Subtype class is optional.   \nSyntax:  \n map addEditorObject [type,[name1,value1,...],subtype class] \nParameters: \nmap: Control - \n[name1,value1,...],subtype class]: Array - \nReturn Value: \n String
addEventHandler \nBehavior: global, local \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Adds an event handler to a given unit. For more information about \n event handlers and their types check the scripting topic Event handlers \n in this reference. You may add as many event handlers of any type \n as you like to every unit, if you add an event handler of type "killed \n" and there already exists one, the old one doesn't get overwritten \n. Use removeEventHandler to delete event handlers.  \nEvery event will create an array named _this, which contains specific \n information about the particular event. (e.g. the "killed" EH will \n return an array with 2 elements: the killed unit, and the killer \n.) \nSyntax:  \n Number = object addEventHandler [type, command] \nParameters: \nobject: Object \n[type, command]: Array \ntype: String - Event Handler type \ncommand: Code or String - code that should be executed once the event occurs \nReturn Value: \n Number -  The index of the currently added event handler is returned. Indices start at 0 for each unit and increment with each added event handler. (optional)
addGroupIcon \nGame: ARMA 2  (1.00) \nDescription: Add icon to a group. Returns icon ID  \nSyntax:  \n group addGroupIcon properties \nParameters: \ngroup: Group - \nproperties: Array - \nReturn Value: \n Number
addLiveStats \nGame: ARMA 2  (1.00) \nDescription: Adds score to the Xbox Live Statistics score for the given unit (or the commander \n unit of the given vehicle). (Also available in OFPE &amp; VBS2)  \nSyntax:  \n unit addLiveStats score \nParameters: \nunit Object \nscore Number \nReturn Value: \n Nothing
addMagazine \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Add a magazine to a person. Infantry units can only carry a specific \n number of magazines, once the magazine slots are filled, any further \n addMagazine commands are ignored. \nNote: When you add a new weapon via scripting commands as well as the magazines \n for it, the addMagazine command has to be given before the addWeapon \n command, otherwise the weapon won't be loaded.  \nSyntax:  \n unitName addMagazine magazineName \nParameters: \nunitName: Object - person to add the magazines to \nmagazineName: String - magazine name. See the topic Category:Weapons for reference about possible values. \nReturn Value: \n Nothing
addMagazineCargo \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Add magazines to the cargo space of vehicles, which can be taken \n out by infantry units. Once the magazine cargo space is filled up, any further \n addMagazineCargo commands are ignored.  \nSyntax:  \n vehicleName addMagazineCargo [magazineName, count] \nParameters: \nvehicleName: Object - vehicle to add the magazines to \n[magazineName, count]: Array \nmagazineName: String - magazine name. See the topic Category:Weapons for reference about possible values. \ncount: Number - number of magazines to add \nReturn Value: \n Nothing
addMagazineCargoGlobal \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Add magazines to the cargo space of vehicles, which can be taken \n out by infantry units. \nMP Synchronized  \nSyntax:  \n vehicleName addMagazineCargoGlobal [magazineName, count] \nParameters: \nvehicleName: Object - vehicle to add the magazines to \n[magazineName, count]: Array \nmagazineName: String - magazine name. See the topic Category:Weapons for reference about possible values. \ncount: Number - number of magazines to add \nReturn Value: \n Nothing
addMagazinePool \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Add magazines to the magazine pool, of which the player may choose \n in the following mission. Available in campaigns only.  \nSyntax:  \n addMagazinePool [magazineName, count] \nParameters: \n[magazineName, count]: Array \nmagazineName: String - magazine name. See the topic Category:Weapons for reference about possible values. \ncount: Number - number of magazines to add \nReturn Value: \n Nothing
addMagazineTurret \nBehavior: local \nGame: ArmA 2: Operation Arrowhead (1.52) \nDescription: Adds a magazine to the turret. Use turret path [-1] for driver's turret \n. \nNote: you may create invalid combinations by using this function \n, for example by adding 20 grenades. When doing so, application behaviour \n is undefined.  \nSyntax:  \n vehicle addMagazineTurret [magazineName, turretPath] \nParameters: \nvehicle: Object \n[weaponName, turretPath]: Array \nmagazineName: String \nturretPath: Array \nReturn Value: \n Nothing
addMenu \nGame: ARMA 2  (1.00) \nDescription: Adds a new menu button. Priority is optional.   \nSyntax:  \n map addMenu [text,priority] \nParameters: \nmap: Control - \n[text,priority]: Array - \nReturn Value: \n Number
addMenuItem \nGame: ARMA 2  (1.00) \nDescription: Creates a new menu item. Menu can be "file" or "view",index is index \n,as returned from addMenu command. priority is optional and determines \n,where in the menu the item will reside (higher priority items first \n).   \nSyntax:  \n map addMenuItem [menu or index,text,command,priority] \nParameters: \nmap: Control - \n[menu or index,text,command,priority]: Array - \nReturn Value: \n Number
addMPEventHandler \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: The format of handler is [type,command]. Check scripting topic Event \n handlers for more information. The index of the current handler \n is returned.  \nSyntax:  \n unitName addMPEventHandler ["event", {action}]; \nParameters: \nunitName: Object \nevent: String \naction: Code \nReturn Value: \n Number or Nothing
addPublicVariableEventHandler \nBehavior: global \nGame: Armed Assault (1.09) \nDescription: If the EH detects a change via publicVariable on the given variable \n, code will be executed. \nThe following arguments are transferred to the code:  \n_this select 0: variable name \n_this select 1: new variable value \nSyntax:  \n varName addPublicVariableEventHandler code \nParameters: \nvarName: String \ncode: Code \nReturn Value: \n Nothing
addRating \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Add a number to the rating of a unit. Negative values can be used \n to reduce the rating. This command is usually used to reward for completed \n mission objectives. The rating is given at the end of the mission \n and is automatically adjusted when killing enemies or friendlies \n.  \nWhen the rating gets below -2000, the unit's side switches to "ENEMY \n" and the unit is attacked by everyone. \nSyntax:  \n unitName addRating rating \nParameters: \nunitName: Object \nrating: Number \nReturn Value: \n Nothing
addResources \nGame: ARMA 2  (1.00) \nDescription: Adds resources to a team member.  \nSyntax:  \n teamMember addResources [resource1, resource2,... \nParameters: \nmember: Team Member - \nresource1: dataType \nresource2: dataType \nReturn Value: \n returnValue
addScore \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Add a number to the score of a unit. This score is shown in multiplayer \n in the "I" screen. Negative values will remove from the score.  \nSyntax:  \n unitName addScore score \nParameters: \nunitName: Object \nscore: Number \nReturn Value: \n Nothing
addSwitchableUnit \nGame: Armed Assault (1.00) \nDescription: Add a unit into the list of units available for Team Switch.  \nSyntax:  \n addSwitchableUnit unitName \nParameters: \nunitName: Object \nReturn Value: \n Nothing
addTeamMember \nGame: ARMA 2  (1.00) \nDescription: Add given member to given team.  \nSyntax:  \n team addTeamMember member \nParameters: \nteam: Team \nmember: Team Member \nReturn Value: \n Nothing
addVehicle \nBehavior: local \nGame: Armed Assault (1.05) \nDescription: Adds a specified vehicle for use by a specified AI led group. The vehicle \n will be considered as an available vehicle for use by his group \n.  \nSyntax:  \n groupName addVehicle vehicleName \nParameters: \ngroupName: Group \nvehicleName: Object \nReturn Value: \n Nothing
addWaypoint \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Adds (or inserts when index is given) a new waypoint to a group. \nThe waypoint is placed randomly within a circle with the given center \n and radius. \nThe function returns a waypoint with format [group, index].    \nSyntax:  \n Array = groupName addWaypoint [center, radius] or [center, radius, index] \nParameters: \ngroupName: Group \n[center, radius]: Array \ncenter: Position or Object \nindex: Number \nReturn Value: \n Array - format Waypoint
addWeapon \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Add a weapon to a unit. Infantry units can only carry a specific \n number of weapons, once the weapon slots are filled, any further \n addWeapon commands are ignored.  \nSyntax:  \n unitName addWeapon weaponName \nParameters: \nunitName: Object - unit to add the weapon to \nweaponName: String - weapon name. See the topic Category:Weapons for reference about possible values. \nReturn Value: \n Nothing
addWeaponCargo \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Add weapons to the cargo space of vehicles, which can be taken out by infantry \n units. Once the weapon cargo space is filled up, any further addWeaponCargo \n commands are ignored.  \nSyntax:  \n vehicleName addWeaponCargo [weaponName, count] \nParameters: \nvehicleName: Object - vehicle to add the weapons to \n[weaponName, count]: Array \nweaponName: String - weapon name. See the topic Category:Weapons for reference about possible values. \ncount: Number - number of weapons to add. \nReturn Value: \n Nothing
addWeaponCargoGlobal \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Add weapons to the cargo space of vehicles, which can be taken out by infantry \n units.  \nMP Synchronized \nSyntax:  \n vehicleName addWeaponCargoGlobal [weaponName, count] \nParameters: \nvehicleName: Object - vehicle to add the weapons to \n[weaponName, count]: Array \nweaponName: String - weapon name. See the topic Category:Weapons for reference about possible values. \ncount: Number - number of weapons to add. \nReturn Value: \n Nothing
addWeaponPool \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Add weapons to the weapon pool, of which the player may choose in the following \n mission. Available in campaigns only.  \nSyntax:  \n addWeaponPool [weaponName, count] \nParameters: \n[weaponName, count]: Array \nweaponName: String - weapon name. See the topic Category:Weapons for reference about possible values. \ncount: Number - number of weapons to add \nReturn Value: \n Nothing
agent \nGame: ARMA 2  (1.00) \nDescription: Return a person for a given agent.  \nSyntax:  \n agent teamMember \nParameters: \nteamMember: Team Member \nReturn Value: \n Object
agents \nGame: ARMA 2  (1.00) \nDescription: Return a list of agents in the current mission.  \nSyntax:  \n agents \nReturn Value: \n Array
aimedAtTarget \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns how good the weapon of the vehicle is aimed at the target \n.  \nSyntax:  \n vehicle aimedAtTarget [target, weapon] \nParameters: \nvehicle: Object \n[target, weapon]: Array \ntarget: Object \nweapon: String - (optional) \nReturn Value: \n Number
aimPos \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns the object's (main turret) aiming position.  \nSyntax:  \n aimPos object \nParameters: \nobject: Object \nReturn Value: \n Array - format PositionASL
airportSide \nGame: Armed Assault (1.08) \nDescription: Checks a side of the airport. ID is the number to identify which \n airport on the island you want to check.  \nPossible values for sara are: 0 - Paraiso 1 - Rahmadi 2 - Pita 3 - Antigua \n  \nSyntax:  \n airportSide id \nParameters: \nid: Number \nReturn Value: \n Side
AISFinishHeal \nGame: ARMA 2  (1.00) \nDescription: AIS end state.  \nSyntax:  \n AISFinishHeal [unit,unit,bool] \nParameters: \n[unit,unit,bool]: Array - \nReturn Value: \n Nothing
alive \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Check if given vehicle/person/building is alive (i.e. not dead or destroyed \n).  \nSyntax:  \n alive object \nParameters: \nobject: Object to test \nReturn Value: \n Boolean: true when alive, false when dead
allDead \nGame: ArmA 2: Operation Arrowhead (1.57) \nDescription: Return a list of all dead units. Dead units may be in vehicles.  \nSyntax:  \n allDead \nReturn Value: \n Array
allGroups \nGame: ARMA 2  (1.00) \nDescription: Return a list of all groups.  \nSyntax:  \n allGroups \nReturn Value: \n Array
allMissionObjects \nGame: ArmA 2: Operation Arrowhead (1.57) \nDescription: Returns all mission objects with given type (or its subtype).  \nSyntax:  \n allMissionObjects type \nParameters: \ntype: String \nReturn Value: \n Array of Objects
allow3DMode \nGame: ARMA 2  (1.00) \nDescription: Allow/dissallow 3D mode.,   \nSyntax:  \n map allow3DMode bool \nParameters: \nmap: Control - \nbool: Boolean - \nReturn Value: \n Nothing
allowCrewInImmobile \nGame: ArmA 2: Operation Arrowhead (1.60) \nDescription: If true, units can be in a vehicle with broken tracks/wheels.  \nSyntax:  \n vehicle allowCrewInImmobile bool \nParameters: \nvehicle: Object \nbool: Boolean \nReturn Value: \n Nothing
allowDamage \nBehavior: global \nGame: ARMA 2  (1.00) \nDescription: Allow or prevent an object being damaged (or injured, or killed).  \nSyntax:  \n object allowDamage allow \nParameters: \nobject: Object - \nallow: Boolean - \nReturn Value: \n Nothing
allowDammage \nGame: Operation Flashpoint (1.00) \nDescription: This is an obsolete command in OFP and does nothing.  However, working \n versions are available for both VBS2 (see allowDammage for VBS2 \n) and ArmA2 (see allowDamage). \n \n \nSyntax: 
allowFileOperations \nGame: ARMA 2  (1.00) \nDescription: Allow/dissallow file ops (load/save etc).  \nSyntax:  \n map allowFileOperations bool \nParameters: \nmap: Control - \nbool: Boolean - \nReturn Value: \n Nothing
allowFleeing \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Sets the cowardice level (the lack of courage or bravery) of a group \n or unit. \nThe more cowardice a Group or Object has, the sooner it will start \n fleeing. \n0 means maximum courage, while 1 means always fleeing.  \nSyntax:  \n name allowFleeing cowardice \nParameters: \nname: Object or Group \ncowardice: Number \nReturn Value: \n Nothing
allowGetIn \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Set if the units given in the list are allowed to enter vehicles \n.  \nSyntax:  \n unitArray allowGetIn allow \nParameters: \nunitArray: Array of units \nallow: Boolean - true allows the units to enter, false denies them \nReturn Value: \n Nothing
allUnits \nGame: ARMA 2  (1.00) \nDescription: Return a list of all units (all persons except agents). Dead units \n and units waiting to respawn are excluded.  \nSyntax:  \n allUnits \nReturn Value: \n Array
ammo \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Check how many rounds are left in the currently loaded magazine of the given \n weapon.  \nSyntax:  \n  Number = unitName ammo weaponName \nParameters: \nunitName: Object \nweaponName: String - weapon name. See the topic Category:Weapons for reference about possible values. \nReturn Value: \n Number
and \nGame: Operation Flashpoint (1.00) \nDescription: Returns true only if both conditions are true. In case of the alternative \n syntax, lazy evaluation is used (if left operand is false, evaluation \n of the right side is skipped completely).  \nSyntax:  \n Boolean = a and b \nParameters: \na: Boolean - Test condition or variable that returns Boolean. \nb: Boolean - Test condition or variable that returns Boolean. \nReturn Value: \n Boolean 
animate \nBehavior: global \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Process a linear animation on an object. Such animations are only \n used in user-made addons, they can be defined in the addon's config \n.cpp.  \nSyntax:  \n objectName animate [animationName, phase] \nParameters: \nobjectName: Object \n[animationName, phase]: Array \nanimationName: String - name of the animation. This is the class-name of the animation defined in the addon's config.cpp. \nphase: Number - range 0 (start point of the animation) to 1 (end point of the animation). The speed, in which the animation is processed, is defined in the addon's config.cpp and cannot be changed during running missions. \nReturn Value: \n Nothing
animationPhase \nBehavior: global \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Return the phase of the given animation on the given object, which \n is set by the animate command.  \nSyntax:  \n Number = object animationPhase animationName \nParameters: \nobject: Object - building eg \nanimationName: String - name of the animation. This is the class-name of the animation defined in the addon's config.cpp. \nReturn Value: \n Number -  Integer of range 0 (start point of the animation) to 1 (end point of the animation).
animationState \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Return the name of a unit's current primary animation.  \nSyntax:  \n String = animationState unitName \nParameters: \nunitName: Object \nReturn Value: \n String
armoryPoints \nGame: ARMA 2  (1.00) \nDescription: Return the stored value of armory points.  \nSyntax:  \n armoryPoints \nReturn Value: \n Number
asin \nGame: Operation Flashpoint (1.00) \nDescription: Arcsine of a number, result in Degrees.  \nSyntax:  \n Number = asin x \nParameters: \nx: Number \nReturn Value: \n Number
ASLToATL \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Converts a position from PositionASL to PositionATL  \nSyntax:  \n ASLtoATL PositionASL \nReturn Value: \n PositionATL
assert \nGame: Armed Assault (1.00) \nDescription: Tests a condition and if the condition is false, exits the handle \n. \nDoes not work properly in ArmA2(OA) 1.08(1.54)&#160;: If condition \n is false, it only returns an empty Error Message without closing \n the Script.  \nSyntax:  \n assert condition \nParameters: \ncondition: Boolean \nReturn Value: \n Boolean
assignAsCargo \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Assign a unit as cargo of a vehicle. Used together with orderGetIn \n to order a unit to get in as cargo into a specific vehicle. Before \n usage of this command a subordinate unit hasn't got the option to get into \n the cargo space of the vehicle.  \nSyntax:  \n unitName assignAsCargo vehicleName \nParameters: \nunitName: Object \nvehicleName: Object \nReturn Value: \n Nothing
assignAsCommander \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Assign a unit as commander of a vehicle. Used together with orderGetIn \n to order subordinate units to get in as commander of a specific \n vehicle. Before usage of this command a subordinate unit hasn't got the option \n to get into the commander place of the vehicle.  \nSyntax:  \n unitName assignAsCommander vehicleName \nParameters: \nunitName: Object \nvehicleName: Object \nReturn Value: \n Nothing
assignAsDriver \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Assign a unit as driver of a vehicle. Used together with orderGetIn \n to order subordinate units to get in as driver of a specific vehicle \n. Before usage of this command a subordinate unit hasn't got the option \n to get into the driver place of the vehicle.  \nSyntax:  \n unitName assignAsDriver vehicleName \nParameters: \nunitName: Object \nvehicleName: Object \nReturn Value: \n Nothing
assignAsGunner \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Assign a unit as gunner of a vehicle. Used together with orderGetIn \n to order subordinate units to get in as gunner of a specific vehicle \n. Before usage of this command a subordinate unit hasn't got the option \n to get into the gunner place of the vehicle.  \nSyntax:  \n unitName assignAsGunner vehicleName \nParameters: \nunitName: Object \nvehicleName: Object \nReturn Value: \n Nothing
assignedCargo \nGame: ARMA 2  (1.00) \nDescription: Returns the list of soldiers assigned to the given vehicle as a cargo \n.  \nSyntax:  \n assignedCargo vehicle \nParameters: \nvehicle: Object - \nReturn Value: \n Array
assignedCommander \nGame: ARMA 2  (1.00) \nDescription: Returns the soldier assigned to the given vehicle as a commander \n.  \nSyntax:  \n assignedCommander vehicle \nParameters: \nvehicle: Object - \nReturn Value: \n Object
assignedDriver \nGame: ARMA 2  (1.00) \nDescription: Returns the soldier assigned to the given vehicle as a driver.  \nSyntax:  \n assignedDriver vehicle \nParameters: \nvehicle: Object - \nReturn Value: \n Object
assignedGunner \nGame: ARMA 2  (1.00) \nDescription: Returns the soldier assigned to the given vehicle as a gunner.  \nSyntax:  \n assignedGunner vehicle \nParameters: \nvehicle: Object - \nReturn Value: \n Object
assignedTarget \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Return the target assigned to the vehicle. \nSyntax:  \n Object = assignedTarget vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n Object
assignedTeam \nGame: ArmA 2: Operation Arrowhead (1.60) \nDescription: Returns the team the unit belongs to. Possible values: MAIN (default \n and white) RED GREEN BLUE YELLOW  \nSyntax:  \n assignedTeam unitName \nParameters: \nunitName: Object \nReturn Value: \n String: "BLUE"
assignedVehicle \nBehavior: local \nGame: Armed Assault (1.05) \nDescription: Return the vehicle a unit is assigned to. \nIf no vehicle is assigned objNull is returned.  \nSyntax:  \n Object = assignedVehicle unitName \nParameters: \nunitName: Object \nReturn Value: \n Object
assignedVehicleRole \nBehavior: local \nGame: Armed Assault (1.05) \nDescription: Return the role a unit is assigned to within its assigned vehicle \n. \nThe array which is returned contains: [] - Not assigned to any vehicle \n ["Driver"] - Assigned as driver ["Cargo"] - Assigned as cargo ["Turret \n", [turret path]] - Assigned to a turret \nIf no vehicle role is assigned, an empty array is returned. \n \n \nSyntax:  \n Array = assignedVehicleRole unitName \nParameters: \nunitName: Object \nReturn Value: \n Array
assignTeam \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Assigns the unit (in case of a vehicle, its commander) to the given \n team. \nThe possible team values are: "MAIN", "RED", "GREEN", "BLUE" and "YELLOW \n".  \nSyntax:  \n  vehicleName assignTeam team \nParameters: \nvehicleName: Object \nteam: String \nReturn Value: \n Nothing
assignToAirport \nGame: Armed Assault (1.08) \nDescription: Not correctly implemented yet, currently it does the same as landAt \n. As the implementation may get fixed sometime, please do not use this \n command until then.  \nSyntax:  \n assignToAirport \nReturn Value: \n
atan \nGame: Operation Flashpoint (1.00) \nDescription: ArcTangent of a number, result in Degrees.  \nSyntax:  \n Number = atan x \nParameters: \nx: Number \nReturn Value: \n Number
atan2 \nGame: Operation Flashpoint (1.00) \nDescription: ArcTangent of x/y. Used to determine the angle of a vector [x,y]. Result \n in Degrees.  \nSyntax:  \n Number = x atan2 y \nParameters: \nx: Number \ny: Number \nReturn Value: \n Number
atg \nGame: Operation Flashpoint (1.00) \nDescription: Equivalent to atan \nSyntax: 
ATLToASL \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Converts a position from PositionATL to PositionASL  \nSyntax:  \n ATLtoASL PositionATL \nReturn Value: \n PositionASL
attachedObject \nGame: Armed Assault (1.08) \nDescription: Returns the object a location is attached to. If the location is unattached \n, then objNull is returned.  \nSyntax:  \n attachedObject location \nParameters: \nlocation: Location \nReturn Value: \n Object
attachObject \nGame: Armed Assault (1.08) \nDescription: Attaches a location to the specified object. To detach a location \n, attach it to objNull. \nSyntax:  \n location attachObject object \nParameters: \nlocation: Location \nobject: Object \nReturn Value: \n Nothing
attachTo \nGame: ARMA 2  (1.00) \nDescription: Attaches an object to another object. The offset is applied to the object \n center unless a memory point is provided.  \nSyntax:  \nObject attachTo [TObject, Offset, MemPoint] \nParameters: \nObject: Object or player \nTObject: Object or player \nOffset: Array - format Position - (optional) \nMemPoint: String - (optional), see ArmA: Selection Translations for czech selections names \nReturn Value: \nNothing
attackEnabled \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Return whether a group's leader can issue attack commands to soldiers \n under his command.  \nSyntax:  \n Boolean = attackEnabled name \nParameters: \nname: Object or Group \nReturn Value: \n Boolean
backpackSpaceFor \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns how much space is in backpack for given weapon or magazine \n  \nSyntax:  \n result = backpack backpackSpaceFor weaponName \nParameters: \nbackpack: Object \nweaponName: String \nReturn Value: \n Array
behaviour \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Return the behaviour of a unit.  \nSyntax:  \n String = behaviour unitName \nParameters: \nunitName: Object \nReturn Value: \n String -  One of "CARELESS", "SAFE", "AWARE", "COMBAT" and "STEALTH".
benchmark \nGame: Operation Flashpoint (1.00) \nDescription: Returns the value of "3D Performance" in OFP Preferences (flashpoint \n.cfg). This can be used to estimate the computer performance to adapt \n CPU and GPU demanding settings like view distance dynamically in missions \n.  \nSyntax:  \n Number = benchmark \nReturn Value: \n Number
boundingBox \nGame: Armed Assault (1.00) \nDescription: Returns a bounding box of given object in model coordinate space \n.   \nSyntax:  \n Array = boundingBox model \nParameters: \nmodel&#160;: Object \nReturn Value: \n Array - An array with the extreme points of the model. Format: [[minX, minY, minZ], [maxX, maxY, maxZ]] \n
boundingCenter \nGame: ARMA 2  (1.00) \nDescription: Returns the position of original (loaded) center of object in model \n coordinates. The result is in format [x,z,y]  \nSyntax:  \n boundingCenter object \nParameters: \nobject: Object - \nReturn Value: \n Array
breakOut \nGame: Armed Assault (1.00) \nDescription: Breaks block out of scope named name. Nil is returned. \nScope name can be assigned using scopeName command.  \nSyntax:  \n breakOut name \nParameters: \nname: String \nReturn Value: \n Nothing
breakTo \nGame: Armed Assault (1.00) \nDescription: Breaks block to scope named name. Nil is returned. \nScope name can be assigned using scopeName command.  \nSyntax:  \n breakTo name \nParameters: \nname: String \nReturn Value: \n Nothing
buildingExit \nGame: ARMA 2  (1.00) \nDescription: Returns the given indexed exit in a building. The returned value \n is in format Position.  \nSyntax:  \n building buildingExit index \nParameters: \nbuilding: Object \nindex: Number \nReturn Value: \n Array - format Position
buildingPos \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the given indexed position in a building \nThe index is 0-based (i.e. the first possible position would be 0. So if a building \n has 5 positions listed in the editor, 4 would be the highest position \n index usable with this command). \nSyntax:  \n building buildingPos index \nParameters: \nbuilding: Object \nindex: Number \nReturn Value: \n Array
buttonAction \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Return the action assigned to a control of the currently active user \n dialog. Can be used for buttons and active texts. Read Dialog Control \n for more information about user dialogs and controls.  \nSyntax:  \n buttonAction idc \nParameters: \nidc: Number. index of button \nReturn Value: \n String 
buttonSetAction \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Set the action of a control of the currently active user dialog. Can be used \n for buttons and active texts. See Dialog Control for more information \n about user dialogs.  \nSyntax:  \n buttonSetAction [idc, action] \nParameters: \n[idc, action]: Array \nidc: Number - control ID \naction: String - code body that should be executed when the button/active text is clicked \nReturn Value: \n Nothing 
cadetMode \nGame: Operation Flashpoint (1.00) \nDescription: Returns if the player is currently playing in cadet or veteran mode \n.  \nSyntax:  \n Boolean = cadetMode \nReturn Value: \n Boolean -  true when playing in cadet mode, false when playing in veteran mode
call \nBehavior: local \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Executes the function string. \nThe argument(s) (if any) are passed as _this. (argument(s) are passed \n in an array). \nTo execute a sleep function in the called code, execute it with spawn \n instead.  \nSyntax:  \n argument(s) call body \nParameters: \nargument(s): Any Value - Optional. Argument that is passed to the function in the "_this" variable. \nbody: Code - A function body provided directly 'inline' orthe String returned from the commands loadFile or preprocessFile. \nReturn Value: \n Anything -  The last value given in the function is returned. See the topic Function for more information.
callExtension \nGame: ArmA 2: Operation Arrowhead (1.60) \nDescription: Execute an extension function.  \nSyntax:  \n extension callExtension functionWithArguments \nParameters: \nextension: String \nfunctionWithArguments: String \nReturn Value: \n String
camCommand \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Executes a command on the given camera / actor object. \nThe "manual on" and "manual off" commands are recognized for all types \n. \nFor the "camera" type, the following commands can be used: "inertia \n on" and "inertia off". \nFor the "seagull" type it's one of: "landed" and "airborne" these \n control if they land or fly. \nWhen you execute camCommand "landed" on a flying seagull, it will \n land and sit on the floor until you call camCommand "airborne". \nThe camCommand changes are conducted immediately, the command doesn \n't wait for camCommit.  \nSyntax:  \n camera camCommand command \nParameters: \ncamera: Object - object of type "camera" or "seagull" \ncommand: String - one of "manual on", "manual off", "inertia on", "inertia off", "landed" and "airborne" corresponding to the description above. \nReturn Value: \n Nothing
camCommit \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Smoothly conduct the changes that were assigned to a camera within \n the given time. If the time is set to zero, the changes are done \n immediately.  \nSyntax:  \n camera camCommit time \nParameters: \ncamera: Object - object of type "camera" \ntime: Number - time in seconds during which the changes shall be done \nReturn Value: \n Nothing
camCommitPrepared \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Smoothly conduct the changes that were assigned to a camera within \n the given time. If the time is set to zero, the changes are done \n immediately.  \nSyntax:  \n camera camCommitPrepared time \nParameters: \ncamera: Object - object of type "camera" \ntime: Number - time in seconds during which the changes shall be done \nReturn Value: \n Nothing
camCommitted \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Checks if the conduction of the last camCommit call already finished \n.  \nSyntax:  \n Boolean = camCommitted camera \nParameters: \ncamera: Object - object of type "camera" \nReturn Value: \n Boolean -  true if the last camCommit already finished, false if not
camConstuctionSetParams \nGame: ARMA 2  (1.00) \nDescription: Sets construction camera parameters.  \nSyntax:  \n camera camConstuctionSetParams [[x,y,z], radius, max above land] \nParameters: \ncamera: Object \n[[x,y,z], radius, max above land]: Array \n[x,y,z]: Position \nradius: Number \nmax above land: Number \nReturn Value: \n Nothing
camCreate \nGame: Operation Flashpoint (1.00) \nDescription: Create a camera or a seagull object on the given position. Also other \n objects can be created this way, but vehicles created with camCreate \n cannot be entered. Any units created with camCreate will remain \n static. With difference to createVehicle, objects are created without \n consideration of the collision detection with surrounding objects \n, thus the objects are spawned exactly at the given position.camCreate \n is conducted immediately, the command doesn't wait for camCommit \n.  \nSyntax:  \n Object = type camCreate position \nParameters: \ntype: String - either "camera", "seagull" or any other class name of OFP vehicles. \nposition: Array - format Position - position to create the object at \nReturn Value: \n Object -  The newly created object is returned.
camDestroy \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Destroy an object created with camCreate.camDestroy is conducted \n immediately, the command doesn't wait for camCommit.  \nSyntax:  \n camDestroy object \nParameters: \nobject: Object \nReturn Value: \n Nothing
cameraEffect \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Switch to the given camera or object with the given effect. If you want \n to switch the screen directly to the first-person, aiming, third \n-person or group view of an object, use switchCamera instead.The effect \n type "Terminate" is used to exit the current camera view and switch \n back to the player's view.Needs the call of camCommit to be conducted \n.  \nSyntax:  \n camera cameraEffect [name, position] \nParameters: \ncamera: Object - object of type "camera" \n[name, position]: Array \nname: String - the effect type. One of "Internal", "External", "Fixed", "FixedWithZoom" and "Terminate" \nposition: String - position of the effect. One of "TOP", "LEFT", "RIGHT", "FRONT" and "BACK" ("BACK" is normally used) \nReturn Value: \n Nothing
cameraEffectEnableHUD \nGame: ARMA 2  (1.00) \nDescription: Enable / disable showing of in-game UI during currently active camera \n effect.  \nSyntax:  \n cameraEffectEnableHUD enable \nParameters: \nenable: Boolean - \nReturn Value: \n Nothing
cameraInterest \nGame: Armed Assault (1.00) \nDescription: Return camera interest for given entity, as set by setCameraInterest \n, or as autodetected. \nSyntax:  \n Number = cameraInterest entity \nParameters: \nentity: Object \nReturn Value: \n Number
cameraOn \nGame: Armed Assault (1.00) \nDescription: Returns the vehicle to which the camera is attached.  \nSyntax:  \n Object = cameraOn \nReturn Value: \n Object
cameraView \nGame: ARMA 2  (1.00) \nDescription: Returns mode of active camera view. Mode is one of:  "INTERNAL" (1st person \n) "EXTERNAL" (3rd person) "GUNNER" (optics / sights) "GROUP" (commander \n view)  \nSyntax:  \n cameraView \nReturn Value: \n String
campaignConfigFile \nGame: Armed Assault (1.00) \nDescription: Return root of campaign description.ext entries hierarchy.  \nSyntax:  \n Config = campaignConfigFile \nReturn Value: \n Config
camPreload \nGame: Armed Assault (1.00) \nDescription: Preload the scene for the prepared camera. Time gives timeout, zero \n means no (infinite) timeout.  \nSyntax:  \n camera camPreload time \nParameters: \ncamera: Object \ntime: Number \nReturn Value: \n Nothing
camPreloaded \nGame: Armed Assault (1.00) \nDescription: Checks whether the camera has finished preloading.  \nSyntax:  \n Boolean = camPreloaded camera \nParameters: \ncamera: Object \nReturn Value: \n Boolean
camPrepareBank \nGame: Armed Assault (1.00) \nDescription: Prepares the camera bank angle.  \nSyntax:  \n camera camPrepareBank bank \nParameters: \ncamera: Object \nbank: Number \nReturn Value: \n Nothing
camPrepareDir \nGame: Armed Assault (1.00) \nDescription: Prepares the camera heading.  \nSyntax:  \n camera camPrepareDir direction \nParameters: \ncamera: Object \ndirection: Number \nReturn Value: \n Nothing
camPrepareDive \nGame: Armed Assault (1.00) \nDescription: Prepares the camera dive angle.  \nSyntax:  \n camera camPrepareDive dive \nParameters: \ncamera: Object \ndive: Number \nReturn Value: \n Nothing
camPrepareFocus \nGame: Armed Assault (1.00) \nDescription: focusRange is in format [distance,blur]. Prepares the camera focus \n blur. \n[-1,1] will reset default values (auto focusing), [-1,-1] will disable \n postprocessing (all is focused).  \nSyntax:  \n camera camPrepareFocus focusRange \nParameters: \ncamera: Object \nfocusRange: Array \nReturn Value: \n Nothing
camPrepareFov \nGame: Armed Assault (1.00) \nDescription: Prepares the camera field of view (zoom). The default zoom level \n is 0.7, 0.01 is the nearest and 2 the furthest zoom value. The angle \n of the field of view is atan(FOV)*2 radians when in 4:3 aspect ratio \n. Needs the call of camCommitPrepared to be conducted.  \nSyntax:  \n camera camPrepareFov fieldOfView \nParameters: \ncamera: Object \nfieldOfView: Number \nReturn Value: \n Nothing
camPrepareFovRange \nGame: Armed Assault (1.00) \nDescription: Prepares the camera field of view range for auto zooming.  \nSyntax:  \n camera camPrepareFovRange fovRange \nParameters: \ncamera: Object \nfovRange: Array \nReturn Value: \n Nothing
camPreparePos \nGame: Armed Assault (1.00) \nDescription: Prepares the camera position (format Position).  \nSyntax:  \n camera camPreparePos position \nParameters: \ncamera: Object \nposition: Array - format Position \nReturn Value: \n Nothing
camPrepareRelPos \nGame: Armed Assault (1.00) \nDescription: Prepares the camera position relative to the current position of the currect \n target (see camPrepareTarget).  \nSyntax:  \n camera camPrepareRelPos position \nParameters: \ncamera: Object \nposition: Array - format (Position) \nReturn Value: \n Nothing
camPrepareTarget \nGame: Armed Assault (1.00) \nDescription: Prepares the camera target to a position or to a target.  \nSyntax:  \n camera camPrepareTarget position \nParameters: \ncamera: Object - object of type "camera" \nposition: Array - format Position,  target location \nReturn Value: \n Nothing 
camSetBank \nGame: Operation Flashpoint (1.00) \nDescription: Set camera bank angle. \nDoes not commit changes.  \nSyntax:  \n camera camSetBank bank \nParameters: \ncamera: Object \nbank: Number \nReturn Value: \n Nothing
camSetDir \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Set the direction of the given camera.Needs the call of camCommit \n to be conducted.  \nSyntax:  \n camera camSetDir direction \nParameters: \ncamera: Object - object of type "camera" \ndirection: Number - direction in degrees, range 0 to 360 \nReturn Value: \n Nothing
camSetDive \nGame: Operation Flashpoint (1.00) \nDescription: Set camera dive angle. \nDoes not commit changes.  \nSyntax:  \n camera camSetDive dive \nParameters: \ncamera: Object \ndive: Number \nReturn Value: \n Nothing
camSetFocus \nGame: Armed Assault (1.00) \nDescription: focusRange is in format [distance,blur]. Sets the camera focus blur \n. It does not automatically commit changes.  \nSyntax:  \n camera camSetFocus focusRange \nParameters: \ncamera: Object \nfocusRange: Array \nReturn Value: \n Nothing
camSetFov \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Set the zoom level (field of view) of the given camera. The default \n zoom level is 0.7, 0.01 is the nearest and 2 the furthest zoom value \n. The angle of the field of view is atan(FOV)*2 radians when in 4:3 aspect \n ratio. Needs the call of camCommit to be conducted.  \nSyntax:  \n camera camSetFov level \nParameters: \ncamera: Object - object of type "camera" \nlevel: Number - zoom level, range 0.01 to 2 (see description above) \nReturn Value: \n Nothing
camSetFovRange \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Set the zoom level (field of view) start and end values for automatical \n zooming. The default zoom level is 0.7, 0 is the nearest and 1 the most \n far zoom value.Needs the call of camCommit to be conducted.  \nSyntax:  \n camera camSetFovRange fovRange \nParameters: \ncamera: Object - object of type "camera" \nfovRange: Array - zoom level, range 0 to 1 (see description above) \nReturn Value: \n Nothing
camSetPos \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Set the position of the given camera or seagull.Needs the call of camCommit \n to be conducted.  \nSyntax:  \n camera camSetPos position \nParameters: \ncamera: Object - object of type "camera" or "seagull" \nposition: Array - Position to set the object to \nReturn Value: \n Nothing
camSetRelPos \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Set the position of the given camera relative to its target set with \n camSetTarget.Needs the call of camCommit to be conducted.  \nSyntax:  \n camera camSetRelPos position \nParameters: \ncamera: Object - object of type "camera" \nposition: Array - relative Position \nReturn Value: \n Nothing
camSetTarget \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Set the target object or position where the given camera should point \n at. Needs the call of camCommit to be conducted.  \nSyntax:  \n camera camSetTarget target \nParameters: \ncamera: Object - object of type "camera" \ntarget: Object - target location \nReturn Value: \n Nothing 
camTarget \nGame: ARMA 2  (1.00) \nDescription: Returns camera's target.  \nSyntax:  \n camTarget camera \nParameters: \ncamera: Object - \nReturn Value: \n Object
camUseNVG \nGame: Armed Assault (1.00) \nDescription: Set / clear using of night vision during cutscenes.  \nSyntax:  \n camUseNVG set \nParameters: \nset: Boolean \nReturn Value: \n Nothing
canFire \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns if the given vehicle is still able to fire. This command \n checks only the damage value, not the ammo!  \nSyntax:  \n Boolean = canFire unitName \nParameters: \nunitName: Object \nReturn Value: \n Boolean -  true if it's still able to fire, false if not
canMove \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns if the given vehicle is still able to move. This command \n checks only the damage value, not the amount of fuel!  \nSyntax:  \n Boolean = canMove unitName \nParameters: \nunitName: Object \nReturn Value: \n Boolean -  true if the vehicle is still able to move, false if not
canStand \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns if the given soldier is able to stand up.  \nSyntax:  \n Boolean = canStand unitName \nParameters: \nunitName: Object \nReturn Value: \n Boolean -  true if he's still able to stand up, false if not. Automatically return false if unit is vehicle.
canUnloadInCombat \nGame: ARMA 2  (1.00) \nDescription: Check if cargo of this vehicle want to get out when in combat.  \nSyntax:  \n canUnloadInCombat vehicle \nParameters: \nvehicle: Object - \nReturn Value: \n Boolean
captive \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns if the given unit is captive. "captive" means that enemies \n will not shoot at the unit.  \nSyntax:  \n Boolean = captive object \nParameters: \nobject: Object \nReturn Value: \n Boolean -  true if the unit is captive, false if not
captiveNum \nBehavior: global \nGame: ARMA 2  (1.00) \nDescription: Checks whether the unit is a captive. If the unit is a vehicle, its commander \n is checked instead. \nIf a unit's captivity level was set as a Boolean, then the returned \n number is either 0 (for false) or 1 (for true). \nSyntax:  \n captiveNum unit \nParameters: \nunit: Object \nReturn Value: \n Number
case \nGame: Armed Assault (1.00) \nDescription: See switch do  \nSyntax:  \n case b \nParameters: \nb: Anything \nReturn Value: \n Switch Type
catch \nGame: Armed Assault (1.00) \nDescription: Processes code when an exception is thrown in a try block. The exception \n caught can be found in the _exception variable.  \nSyntax:  \n try-block catch code \nParameters: \ntry-Block Exception Type \ncode Code \nReturn Value: \n Anything
 \nGame:  () \nDescription:  \nSyntax: 
ceil \nGame: Armed Assault (1.00) \nDescription: The ceil value of x.  \nSyntax:  \n Number = ceil x \nParameters: \nx: Number \nReturn Value: \n Number
cheatsEnabled \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Checks whether cheats are enabled (whether the designers' version \n is running).  \nSyntax:  \n Boolean = cheatsEnabled \nReturn Value: \n Boolean
checkAIFeature \nGame: ARMA 2  (1.05) \nDescription: Check if given AI feature is currently enabled. Feature may be one of: \n"AwareFormationSoft", "CombatFormationSoft".  \nSyntax:  \n checkAIFeature feature \nParameters: \nfeature: String \nReturn Value: \n Boolean
civilian \nGame: Operation Flashpoint (1.00) \nDescription: Pre-defined variable for the civilian side. \nWhen used in a format statement (hint format["%1",civilian]), the string \n returned is "CIV".  \nSyntax:  \n Side = civilian \nReturn Value: \n Side
clearBackpackCargoGlobal \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Removes all backpacks from the vehicle cargo space. MP synchronized \n.  \nSyntax:  \n clearBackpackCargoGlobal unit \nParameters: \nunit: Object \nReturn Value: \n Nothing
clearGroupIcons \nGame: ARMA 2  (1.00) \nDescription: Removes all icon from group.  \nSyntax:  \n clearGroupIcons group \nParameters: \ngroup: Group - \nReturn Value: \n Nothing
clearMagazineCargo \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Remove all magazines from the given vehicle's magazine cargo space \n.  \nSyntax:  \n clearMagazineCargo vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n Nothing
clearMagazineCargoGlobal \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Removes all magazines from the vehicle cargo space. MP synchronized \n.  \nSyntax:  \n clearMagazineCargoGlobal unit \nParameters: \nunit: Object \nReturn Value: \n Nothing
clearMagazinePool \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Remove all magazines from the magazine pool, of which the player \n may choose in the following missions. Available in campaigns only \n.  \nSyntax:  \n clearMagazinePool \nReturn Value: \n Nothing
clearOverlay \nGame: ARMA 2  (1.00) \nDescription: Clear the current overlay.  \nSyntax:  \n clearOverlay map \nParameters: \nmap: Control - \nReturn Value: \n Nothing
clearRadio \nGame: Armed Assault (1.00) \nDescription: Clean up the content of radio protocol history.  \nSyntax:  \n clearRadio \nReturn Value: \n Nothing
clearVehicleInit \nGame: Armed Assault (1.08) \nDescription: Clear the object's init.  For security reasons, the command was disabled \n in Arma 3. \nSyntax:  \n clearVehicleInit objectName \nParameters: \nobjectName: Object \nReturn Value: \n Nothing
clearWeaponCargo \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Remove all weapons from the given vehicle's weapon cargo space.  \nSyntax:  \n clearWeaponCargo vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n Nothing
clearWeaponCargoGlobal \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Removes all weapons from the vehicle cargo space. MP synchronized \n.  \nSyntax:  \n clearWeaponCargoGlobal unit \nParameters: \nunit: Object \nReturn Value: \n Nothing
clearWeaponPool \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Remove all weapons from the weapon pool, of which the player may choose \n in the following missions. Available in campaigns only.  \nSyntax:  \n clearWeaponPool \nReturn Value: \n Nothing
closeDialog \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Close the currently active user dialog.  \nSyntax:  \n closeDialog idc \nParameters: \nidc&#160;: Number \nReturn Value: \n Nothing
closeDisplay \nGame: Armed Assault (1.00) \nDescription: Close given display.  \nSyntax:  \n display closeDisplay exitcode \nParameters: \ndisplay: Display \nexitcode: Number \nReturn Value: \n Nothing
closeOverlay \nGame: ARMA 2  (1.00) \nDescription: Closes the current overlay without committing.  \nSyntax:  \n closeOverlay map \nParameters: \nmap: Control - \nReturn Value: \n Nothing
collapseObjectTree \nGame: ARMA 2  (1.00) \nDescription: Collapse the object tree.  \nSyntax:  \n collapseObjectTree map \nParameters: \nmap: Control - \nReturn Value: \n Nothing
combatMode \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the combat mode of the given unit. See setCombatMode for more \n information about combat modes.  \nSyntax:  \n String = combatMode grp \nParameters: \ngrp: Object or Group \nReturn Value: \n String -  One of "BLUE", "GREEN", "WHITE, "YELLOW" and "RED"
commandChat \nGame: ARMA 2  (1.00) \nDescription: Types text to the command radio channel.,Note: this function only \n types text to the list,it does not broadcast,the message. If you want \n the message to show on all computers,you have,to execute it on all of them \n.  \nSyntax:  \n unit commandChat chatText \nParameters: \nunit: Object or Array - \nchatText: String - \nReturn Value: \n Nothing
commander \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: In OFP it returns the commander of a vehicle. Since ArmA and VBS2 \n it returns the primary observer. The commander of a vehicle can be found \n with effectiveCommander.  \nSyntax:  \nObject = commander vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n Object -  The unit sitting in the commander place is returned. If vehicle is not a vehicle but a person, the person is returned.
commandFire \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit to fire on the given target (via the radio).If the target \n is objNull, the unit is ordered to fire on its current target (set with \n doTarget or commandTarget).  \nSyntax:  \n unitName commandFire target \nParameters: \nunitName: Object or Array \ntarget: Object \nReturn Value: \n Nothing
commandFollow \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit to follow the given other unit (via the radio \n).  \nSyntax:  \n unitName commandFollow followedunit \nParameters: \nunitName: Object or Array \nfollowedunit: Object \nReturn Value: \n Nothing
commandFSM \nGame: Armed Assault (1.00) \nDescription: Orders a unit to process command defined by FSM file (via the radio \n).  \nSyntax:  \nunitName commandFSM [fsm name, position, target] \nParameters: \nunitName: Object or Array \n[fsm name, position, target]: Array \nReturn Value: \n Nothing
commandGetOut \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Orders the unit to get out from the vehicle (via the radio).  \nSyntax:  \n commandGetOut unitName \nParameters: \nunitName: Object or Array \nReturn Value: \n Nothing
commandingMenu \nGame: ARMA 2  (1.00) \nDescription: Return the name of the player actual topmost commanding menu.  \nSyntax:  \n commandingMenu \nReturn Value: \n String
commandMove \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit(s) to move to the given location (via the radio \n). Exactly the same as doMove, except this command displays a radio \n message.  \nSyntax:  \n unitName commandMove position \nParameters: \nunitName: Object or Array \nposition: (Array) - format Position \nReturn Value: \n Nothing
commandRadio \nGame: ARMA 2  (1.00) \nDescription: Sends the message to the command radio channel. The message is defined \n in the description.ext file or radio protocol.  \nSyntax:  \n unit commandRadio radioName \nParameters: \nunit: Object or Array \nradioName: String \nReturn Value: \n Nothing
commandStop \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit(s) to stop (via the radio). A stop command will \n never finish, the unit will never be ready.  \nSyntax:  \n commandStop unitName \nParameters: \nunitName: Object or Array \nReturn Value: \n Nothing
commandTarget \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit(s) to target the given target (via the radio \n).  \nSyntax:  \n unitName commandTarget target \nParameters: \nunitName: Object \ntarget: Object \nReturn Value: \n Nothing
commandWatch \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Orders the unit(s) to watch the given position or target (via the radio \n). Use objNull as the target to order a unit to stop watching a position \n/target  \nSyntax:  \n unitName(s) commandWatch position \nParameters: \nunitName(s): Object or Array \nposition: Array - format Position \nReturn Value: \n Nothing 
comment \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Define a comment.  \nMainly used in SQF Syntax, as you're able to introduce comment lines \n with semicolons in a SQS script.  \nSyntax:  \n comment comment \nParameters: \ncomment: String - the comment that you'd like to write here \nReturn Value: \n Nothing
commitOverlay \nGame: ARMA 2  (1.00) \nDescription: Commit the current overlay.  \nSyntax:  \n commitOverlay map \nParameters: \nmap: Control - \nReturn Value: \n Nothing
compile \nGame: Armed Assault (1.00) \nDescription: Compile expression.  \nSyntax:  \n Code = compile expression \nParameters: \nexpression: String \nReturn Value: \n Code
completedFSM \nGame: ARMA 2  (1.00) \nDescription: Check whether the given FSM completes. \nThe FSM handle is the number returned by the execFSM command.   \nSyntax:  \n completedFSM fsmHandle \nParameters: \nfsmHandle: Number \nReturn Value: \n Boolean
composeText \nGame: Armed Assault (1.00) \nDescription: Creates a structured text by joining the given structured or plain \n texts.  \nSyntax:  \n Structured Text = composeText [text1, text2,...] \nParameters: \n[text1, text2,...]: Array \nReturn Value: \n Structured Text
configFile \nGame: Armed Assault (1.00) \nDescription: Return root of config entries hierarchy. \nSee AllInOne Config for a full config extract as example.  \nSyntax:  \n Config = configFile \nReturn Value: \n Config
configName \nGame: Armed Assault (1.00) \nDescription: Returns name of config entry.  \nSyntax:  \n String = configName config \nParameters: \nconfig: Config \nReturn Value: \n String
controlNull \nGame: Armed Assault (1.00) \nDescription: A non-existing Control. This value is not equal to anything, including \n itself.  \nSyntax:  \n Control = controlNull \nReturn Value: \n Control
copyFromClipboard \nGame: ARMA 2  (1.00) \nDescription: Return the content of the (text) clipboard.   \nSyntax:  \n copyFromClipboard \nReturn Value: \n String
copyToClipboard \nGame: ARMA 2  (1.00) \nDescription: Copy the text to the clipboard.   \nSyntax:  \n copyToClipboard text \nParameters: \ntext: String \nReturn Value: \n Nothing
copyWaypoints \nGame: ARMA 2  (1.00) \nDescription: Copy the chain of waypoints from source to target group. The target \n group will start to process waypoints from the first one.  \nSyntax:  \n groupTo copyWaypoints groupFrom \nParameters: \ngroupTo: Group \ngroupFrom: Group \nReturn Value: \n Nothing
cos \nGame: Operation Flashpoint (1.00) \nDescription: Cosine of a number, argument in degrees.  \nSyntax:  \n Number = cos x \nParameters: \nx: Number \nReturn Value: \n Number
count \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Returns a count for either the number of elements in array  the number \n of elements in array for which given condition is true the number \n of sub-entries in a config object \nSyntax:  \n condition count array \nParameters: \ncondition: (optional) Code that must return true to be counted. \nThe variable _x will contain the currently tested element. \narray: Array \nReturn Value: \n Number 
countEnemy \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Count how many units in the array are considered enemy to the given \n unit.  \nSyntax:  \n Number = unitName countEnemy arrayName \nParameters: \nunitName: Object \narrayName: Array \nReturn Value: \n Number
countFriendly \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Count how many units in the array are considered friendly to the given \n unit.  \nSyntax:  \n Number = unitName countFriendly arrayName \nParameters: \nunitName: Object \narrayName: Array \nReturn Value: \n Number
countSide \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Count how many units in the array belong to given side.  \nSyntax:  \n Number = side countSide arrayName \nParameters: \nside: Side \narrayName: Array \nReturn Value: \n Number
countType \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Count how many units in the array are of given type. Other than typeOf \n this command also works with parent classes like "Air", "Tank" and "Car". For a full \n class reference see Classes.  \nSyntax:  \n Number = type countType arrayName \nParameters: \ntype: String - class type \narrayName: Array \nReturn Value: \n Number
countUnknown \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Count how many units in the array are unknown to the given unit.  \nSyntax:  \n Number = unitName countUnknown arrayName \nParameters: \nunitName: Object \narrayName: Array \nReturn Value: \n Number
createAgent \nGame: ARMA 2  (1.00) \nDescription: Creates an (independent) agent (person) of the given type (type is a name \n of a subclass of CfgVehicles). If the markers array contains several \n marker names, the position of a random one is used, otherwise, the given \n position is used. The unit is placed inside a circle with this position \n as its center and placement as its radius. \nPlayers assigned to an agent using setPlayable will be able to control \n the agent, operate weapons and other actions, but will not be able \n to access their inventory using the gear screen. \nSpecial properties can be: "NONE" and "FORM".  \nSyntax:  \n Object = createAgent [type, position, markers, placement, special] \nParameters: \n[type, position, markers, placement, special]: Array \ntype: String from CfgVehicles \nposition: Array (Position format) \nmarkers: Array \nplacement: Number radius \nspecial: String "None", or "Form" \nReturn Value: \n Object
createCenter \nGame: Armed Assault (1.00) \nDescription: Creates a new AI HQ for the given side. An 'HQ ' is something each \n side needs to have to be able to communicate. By default, all centers \n for units which are present in the mission are created before the mission \n is started. This command can be used to initialize a side which \n has no units present in the Mission.sqm, so that you can spawn groups \n and units for it. \nFor the available sides see Side.  \nSyntax:  \n Side = createCenter side \nParameters: \nside: Side \nReturn Value: \n Side
createDialog \nGame: Operation Flashpoint (1.5) \nDescription: Create a dialog which is defined either in the mission's description \n.ext, in the campaign's description.ext or in the global resource \n.cpp. The given name has to be the class name used in one of these \n files. If already another dialog is opened, the desired dialog is created \n as child dialog of the already opened one.  \nSyntax:  \n Boolean = createDialog dialogName \nParameters: \ndialogName: String - class name used in the description.ext / resource.cpp \nReturn Value: \n Boolean -  true when the dialog was created successfully
createDiaryLink \nGame: ARMA 2  (1.00) \nDescription: Create a link to the section of diary given by subject. Record is selected \n based on given object (diary record,task or unit).  \nSyntax:  \n createDiaryLink [subject,object,text] \nParameters: \n[subject,object,text]: Array - \nReturn Value: \n String
createDiaryRecord \nGame: ARMA 2  (1.00) \nDescription: creates a diary entry. \nSupported tags and their parameters: &lt;All&gt; image: String - path \n to image. When present, any element with it will be displayed as image \n. width: Number - image width in pixels. height: Number - image height \n in pixels. font color: String - HTML color in format #aarrggbb or #rrggbb \n size: Number - font height in pixels. face: String - font type (class \n from CfgFontFamilies) br marker name: String - marker name execute \n expression: String - executed code executeClose expression: String \n - executed code, diary is closed afterwards log subject: String \n - subject name. record: String - record name (e.g. "Record6" or "Unit1059524 \n") gear unit: Number - unit ID teamSwitch unit: Number - unit ID kick \n id: Number - player ID ban id: Number - player ID mute id: Number \n - player ID currentTask id: Number - task ID \nSyntax:  \n unitName createDiaryRecord parameters \nParameters: \nunitName: Object \nparameters: Array. \ncan be [subject, text(, task(, state))] \nor [subject, [title, text](, task(, state))] \nReturn Value: \n text: String
createDiarySubject \nGame: ARMA 2  (1.00) \nDescription: Create a new subject page in a log.  \nSyntax:  \n person createDiarySubject [subject,display name] or [subject,display name,picture] \nParameters: \nperson: Object - \n[subject,display name,picture]: Array - \nReturn Value: \n Number
createDisplay \nGame: Armed Assault (1.00) \nDescription: Create child display of given display and load from  "resourceName \n".  \nSyntax:  \n parent createDisplay resourceName \nParameters: \nparent: Display \nresourceName: String \nReturn Value: \n Nothing
createGearDialog \nGame: ARMA 2  (1.00) \nDescription: Opens gear dialog for given unit.  \nSyntax:  \n CreateGearDialog [unit,resource] \nParameters: \n[unit,resource]: Array - \nReturn Value: \n Nothing
createGroup \nGame: Armed Assault (1.00) \nDescription: Creates a new AI group for the given Side. An HQ (center) for that \n side must already be in the Mission.sqm or have been initialized \n with createCenter. \nFor the available sides see Side.   \nSyntax:  \n Group = createGroup side \nParameters: \nside: Side \nReturn Value: \n Group
createGuardedPoint \nGame: Armed Assault (1.00) \nDescription: Adds a point guarded by the given side. The actual item or position \n guarded is determined by the following priority.If idStatic is not negative \n, the position of a static object with the given id is guarded. If the given \n vehicle is valid, the starting position of the vehicle is guarded \n.otherwise the given position is guarded.  \nSyntax:  \n createGuardedPoint [side, position, idStatic, vehicle] \nParameters: \n[side, position, idStatic, vehicle]: Array \nside: Side \nposition: Position \nidStatic: Number \nvehicle: Object \nReturn Value: \n Nothing or undocumented
createLocation \nGame: Armed Assault (1.08) \nDescription: Creates a location of the specified class and dimensions at the specified \n position. Classes are defined in CfgLocationTypes.  \nSyntax:  \n Location = createLocation [className, position, sizeX, sizeY] \nParameters: \n[className, position, sizeX, sizeY]: Array \nclassName: String \nposition: Position \nsizeX: Number in meters \nsizeY: Number in meters \nReturn Value: \n Location
createMarker \nGame: Armed Assault (1.00) \nDescription: Creates a new marker at the given position. The marker name has to be unique \n.  \nSyntax:  \n String = createMarker [name, position] \nParameters: \n[name, position]: Array \nname: String \nposition: Array - format Position \nReturn Value: \n String
createMarkerLocal \nGame: Armed Assault (1.04) \nDescription: Creates a new marker at the given position. The marker name has to be unique \n.  \nSyntax:  \n String = createMarkerLocal [name, position] \nParameters: \n[name, position]: Array \nname: String \nposition: Array - format Position \nReturn Value: \n String
createMenu \nGame: ARMA 2  (1.00) \nDescription: Creates a previously added menu.  \nSyntax:  \n map createMenu index \nParameters: \nmap: Control - \nindex: Number - \nReturn Value: \n Nothing
createMine \nGame: Armed Assault (1.00) \nDescription: Creates a mine of the given type (type is the name of the subclass \n of CfgVehicles). If the markers array contains several marker names \n, the position of a random one is used, otherwise, the given position \n is used. The mine is placed inside a circle with this position as its center \n and placement as its radius.  \nSyntax:  \n Object = createMine [type, position, markers, placement] \nParameters: \n[type, position, markers, placement]: Array \ntype: String \nposition: Position \nmarkers: Array \nplacement: Number radius \nReturn Value: \n Object
createMissionDisplay \nGame: Armed Assault (1.08) \nDescription: Create single missions display as a child of given display. The mission \n dialog will be set to the directory given as an argument "root".  \nSyntax:  \n Display = display createMissionDisplay string \nParameters: \ndisplay&#160;: Display \nstring: String \nReturn Value: \n Display
createSimpleTask \nBehavior: global \nGame: ARMA 2  (1.00) \nDescription: Creates a new Task  \nSyntax:  \n Task = Object createSimpleTask Array \nParameters: \nObject: Unit to add this new task \nArray: ["TaskName"] or ["TaskName", taskParent] \nReturn Value: \n Task - the new task
createSoundSource \nGame: Armed Assault (1.00) \nDescription: Creates a sound source of the given type (type is the name of the subclass \n of CfgVehicles). If the markers array contains several marker names \n, the position of a random one is used, otherwise, the given position \n is used. The sound source is placed inside a circle with this position \n as its center and placement as its radius.  \nSyntax:  \n Object = createSoundSource [type, position, markers, placement] \nParameters: \n[type, position, markers, placement]: Array \ntype: String as per CfgVehicles \nposition: Position \nmarkers: Array \nplacement: Number. radius \nReturn Value: \n Object
createTask \nGame: ARMA 2  (1.00) \nDescription: Create a new AI task (subtask of parentTask). Type is name of registered \n task type.  \nSyntax:  \n teamMember createTask  [[type] or [type, parentTask], priority, name1, value1, name2, value2,...] \nReturn Value: \n Task
createTeam \nGame: ARMA 2  (1.00) \nDescription: Create a team and name it.  \nSyntax:  \n createTeam [type, name] \nParameters: \n[type, name]: Array \ntype: String \nname: String \nReturn Value: \n Team Member
createTrigger \nGame: Armed Assault (1.00) \nDescription: Creates a new trigger on the given position.  \nAn object of the given type is created; this type must be a class \n name in CfgNonAIVehicles or CfgVehicles with simulation = detector \n. \nAn array containing all units that have activated the trigger is available \n via list triggerobj. \nCreated triggers can be deleted using deleteVehicle. \nSyntax:  \n Object = createTrigger [type, position] \nParameters: \n[type, position]: Array \ntype: String \nposition: Position \nReturn Value: \n Object
createUnit \nBehavior: global \nGame: Operation Flashpoint (1.34) \nDescription: Create unit of a class that's defined in CfgVehicles. \nThe Group parameter MUST be an existing group or the unit won't be created \n.  \nSyntax:  \n type createUnit [ position, group, init, skill, rank] \nParameters: \ntype: String - Classname of unit to be created as per cfgVehicles \n[ position, group, init, skill, rank]: Array \nposition: Position - Location unit is created at. \ngroup: Group - Existing group new unit will join. \ninit: String - (optional, default "") Command to be executed upon creation of unit. Parameter this is set to the created unit and passed to the code. \nskill: Number - (optional, default 0.5) \nrank: String - (optional, default "PRIVATE") \nReturn Value: \n Nothing
createVehicle \nGame: Operation Flashpoint (1.34) \nDescription: Create an empty object of given type classname at given position \n. \nFor a full class reference see Classes.  \nSyntax:  \n Object = type createVehicle position \nParameters: \ntype: String - vehicle/object className \nposition: Array - format Position to create the vehicle at \nReturn Value: \n Object
createVehicleLocal \nGame: Armed Assault (1.00) \nDescription: Creates an empty vehicle of the given type. See CfgVehicles for possible \n type values. Vehicle is not transferred through network in MP games \n.  \nSyntax:  \n Object = type createVehicleLocal position \nParameters: \ntype: String \nposition: Position \nReturn Value: \n Object
crew \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the crew of the given vehicle.  \nSyntax:  \n Array = crew vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n Array -  An array with all units in the vehicle is returned.
ctrlActivate \nGame: Armed Assault (1.00) \nDescription: Launch actions attached to given (button based) control.  \nSyntax:  \n ctrlActivate controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Nothing
ctrlAddEventHandler \nGame: ARMA 2  (1.00) \nDescription: Add an event handler to the given control. Returns id of the handler \n or -1 when failed.  \nSyntax:  \n control ctrlAddEventHandler [handler name,function] \nParameters: \ncontrol: Control - \n[handler name,function]: Array - \nReturn Value: \n Number
ctrlAutoScrollDelay \nGame: ARMA 2  (1.00) \nDescription: Returns number of seconds until auto-scroll starts. -2 if scrollbar \n not present.  \nSyntax:  \n ctrlAutoScrollDelay control \nParameters: \ncontrol: Control - \nReturn Value: \n Number
ctrlAutoScrollRewind \nGame: ARMA 2  (1.00) \nDescription: True if auto-scroll should move back to start after it reach end.  \nSyntax:  \n ctrlAutoScrollRewind control \nParameters: \ncontrol: Control - \nReturn Value: \n Boolean
ctrlAutoScrollSpeed \nGame: ARMA 2  (1.00) \nDescription: Returns number of seconds to auto-scroll one line. -1 if auto-scroll \n is disabled. -2 if scrollbar not present.  \nSyntax:  \n ctrlAutoScrollSpeed control \nParameters: \ncontrol: Control - \nReturn Value: \n Number
ctrlCommit \nGame: Armed Assault (1.00) \nDescription: Commit control animation.  \nSyntax:  \n controlName ctrlCommit time \nParameters: \ncontrolName: Control \ntime: Number \nReturn Value: \n Nothing
ctrlCommitted \nGame: Armed Assault (1.00) \nDescription: Check if the control animation is finished.  \nSyntax:  \n Boolean = ctrlCommitted controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Boolean
ctrlEnable \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Enable or disable a control of the currently active user dialog. Disabled \n controls cannot be clicked onto. \nRead Dialog Control for more information about user dialogs and controls \n.  \nSyntax:  \n ctrlEnable [idc, enable] \nParameters: \n[idc, enable]: Array \nidc: Number - control ID \nenable: Boolean - true to enable the control, false to disable it \nReturn Value: \n Nothing 
ctrlEnabled \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Returns if a control on the currently active user dialog is enabled \n. Disabled controls cannot be focused. \nRead Dialog Control for more information about user dialogs and controls \n.  \nSyntax:  \n Boolean =  ctrlEnabled idc \nParameters: \nidc: Number - control ID \nReturn Value: \n Boolean -  true if the control is enabled, false if not. 
ctrlFade \nGame: Armed Assault (1.00) \nDescription: Returns the current fade factor of control.  \nSyntax:  \n Number = ctrlFade controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Number
ctrlMapAnimAdd \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Adds the next frame to the map animation. The format of frame is [time \n, zoom, position], the format of position is Position2D.  \nSyntax:  \n map ctrlMapAnimAdd frame \nParameters: \nmap: Control \nframe: Array \nReturn Value: \n Nothing
ctrlMapAnimClear \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Clears the map animation.  \nSyntax:  \n ctrlMapAnimClear controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Nothing
ctrlMapAnimCommit \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Plays the map animation.  \nSyntax:  \n ctrlMapAnimCommit controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Nothing
ctrlMapAnimDone \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Checks whether the map animation has finished.  \nSyntax:  \n Boolean = ctrlMapAnimDone controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Boolean
ctrlMapCursor \nGame: ARMA 2  (1.00) \nDescription: Changes the default the cursor that appears when interacting with \n a map control to a custom one. \nUse an empty string to restore the default cursor.If the specified \n cursor does not exist, the default is used and no error is produced \n. \nThe cursor texture is one of the following and is case sensitive \n: Track Move Array Scroll \nCustom cursor is the name of a config entry from CfgWrapperUI / Cursors \n.  \nSyntax:  \n control ctrlMapCursor [cursorTexture, customCursor] \nParameters: \ncontrol: Control - Map control \ncursorTexture: String - Cursor texture name \ncustomCursor: String - Cursor class name \nReturn Value: \n Nothing
ctrlMapMouseOver \nGame: ARMA 2  (1.00) \nDescription: Returns description of map sign mouse cursor is over.  \nSyntax:  \n ctrlMapMouseOver control \nParameters: \ncontrol: Control - \nReturn Value: \n Array
ctrlMapScale \nGame: Armed Assault (1.00) \nDescription: Return the current scale of the map control.   \nSyntax:  \n Number =  ctrlMapScale controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Number
ctrlMapScreenToWorld \nGame: Armed Assault (1.05) \nDescription: Convert screen coordinates in map to world coordinates.  \nSyntax:  \n map ctrlMapScreenToWorld [x, y] \nParameters: \nmap: Control \n[x, y]: Array \nReturn Value: \n Array (Position2D Format)
ctrlMapWorldToScreen \nGame: Armed Assault (1.05) \nDescription: Transfers a map control world position to screen coordinates.  \nSyntax:  \n ctrlMapWorldToScreen controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Array (Position2D Format)
ctrlParent \nGame: Armed Assault (1.00) \nDescription: Returns container of the given control.  \nSyntax:  \n Display = ctrlParent controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Display
ctrlPosition \nGame: Armed Assault (1.00) \nDescription: Returns the current position of control as [x, y, w, h] array.  \nSyntax:  \n Array = ctrlPosition controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Array
ctrlRemoveAllEventHandlers \nGame: ARMA 2  (1.00) \nDescription: Remove all even handlers from the given control.  \nSyntax:  \n control ctrlRemoveAllEventHandlers handler name \nParameters: \ncontrol: Control - \nhandler name: String - \nReturn Value: \n Nothing
ctrlRemoveEventHandler \nGame: ARMA 2  (1.00) \nDescription: Remove a given event handler from the given control.  \nSyntax:  \n control ctrlRemoveEventHandler [handler name,id] \nParameters: \ncontrol: Control - \n[handler name,id]: Array - \nReturn Value: \n Nothing
ctrlScale \nGame: Armed Assault (1.00) \nDescription: Returns the current scale of the control.  \nSyntax:  \n Number = ctrlScale controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Number
ctrlSetActiveColor \nGame: Armed Assault (1.00) \nDescription: Sets text color of given control when control is selected.  \nSyntax:  \n display ctrlSetActiveColor color \nParameters: \ndisplay: Control \ncolor: Array (format Color) \nReturn Value: \n Nothing
ctrlSetAutoScrollDelay \nGame: ARMA 2  (1.00) \nDescription: Sets number of second before auto-scroll starts.  \nSyntax:  \n control ctrlSetAutoScrollDelay delay \nParameters: \ncontrol: Control - \ndelay: Number - \nReturn Value: \n Nothing
ctrlSetAutoScrollRewind \nGame: ARMA 2  (1.00) \nDescription: Defines if scroll should rewind when auto-scroll reach end.  \nSyntax:  \n control ctrlSetAutoScrollRewind delay \nParameters: \ncontrol: Control - \ndelay: Boolean - \nReturn Value: \n Nothing
ctrlSetAutoScrollSpeed \nGame: ARMA 2  (1.00) \nDescription: Sets number of second required to scroll to next line. If speed smaller \n than 0,auto-scroll is disabled.  \nSyntax:  \n control ctrlSetAutoScrollSpeed speed \nParameters: \ncontrol: Control - \nspeed: Number - \nReturn Value: \n Nothing
ctrlSetBackgroundColor \nGame: Armed Assault (1.00) \nDescription: Sets background color of given control.  \nSyntax:  \n display ctrlSetBackgroundColor color \nParameters: \ndisplay: Control \ncolor: Array (format Color) \nReturn Value: \n Nothing
ctrlSetEventHandler \nGame: Armed Assault (1.00) \nDescription: Sets given event handler of given control. \nThe provided function should return true/false indicating that the event \n has handled this event fully or not and whether the engine should \n execute it's default code or not afterwards.  \nSee User Interface Event Handlers for the full list of handler names \n. \nIf applicable, see DIK_KeyCodes for a list of key code constants \n, which are relevant to key related user interface events like: KeyDown \n &amp; KeyUp.  \nSyntax:  \n controlName ctrlSetEventHandler [handlerName, function] \nParameters: \ncontrolName: Control \n[handlerName, function]: Array \nhandlerName: String \nfunction: String \nReturn Value: \n Nothing
ctrlSetFade \nGame: Armed Assault (1.00) \nDescription: Sets wanted transparency for control animation.  \nSyntax:  \n controlName ctrlSetFade fade \nParameters: \ncontrolName: Control \nfade: Number \nReturn Value: \n Nothing
ctrlSetFocus \nGame: Armed Assault (1.00) \nDescription: Set the input focus on given control.  \nSyntax:  \n ctrlSetFocus controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Nothing
ctrlSetFont \nGame: Armed Assault (1.00) \nDescription: Sets the font of given control.  \n \n \nSyntax:  \n controlName ctrlSetFont fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH1 \nGame: Armed Assault (1.00) \nDescription: Sets H1 font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH1 fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH1B \nGame: Armed Assault (1.00) \nDescription: Sets H1 bold font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH1B fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH2 \nGame: Armed Assault (1.00) \nDescription: Sets H2 font of given HTML control  \nSyntax:  \n controlName ctrlSetFontH2 fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH2B \nGame: Armed Assault (1.00) \nDescription: Sets H2 bold font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH2B fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH3 \nGame: Armed Assault (1.00) \nDescription: Sets H3 font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH3 fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH3B \nGame: Armed Assault (1.00) \nDescription: Sets H3 bold font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH3B fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH4 \nGame: Armed Assault (1.00) \nDescription: Sets H4 font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH4 fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH4B \nGame: Armed Assault (1.00) \nDescription: Sets H4 bold font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH4B fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH5 \nGame: Armed Assault (1.00) \nDescription: Sets H5 font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH5 fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH5B \nGame: Armed Assault (1.00) \nDescription: Sets H5 bold font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH5B fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH6 \nGame: Armed Assault (1.00) \nDescription: Sets H6 font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH6 fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontH6B \nGame: Armed Assault (1.00) \nDescription: Sets H6 bold font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontH6B fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetFontHeight \nGame: Armed Assault (1.00) \nDescription: Sets the font size of given control.  \nSyntax:  \n controlName ctrlSetFontHeight height \nParameters: \ncontrolName: Control \nheight: Number \nReturn Value: \n Nothing
ctrlSetFontHeightH1 \nGame: Armed Assault (1.00) \nDescription: Sets H1 font size of given HTML control.  \nSyntax:  \n controlName ctrlSetFontHeightH1 height \nParameters: \ncontrolName: Control \nheight: Number \nReturn Value: \n Nothing
ctrlSetFontHeightH2 \nGame: Armed Assault (1.00) \nDescription: Sets H2 font size of given HTML control.  \nSyntax:  \n controlName ctrlSetFontHeightH2 height \nParameters: \ncontrolName: Control \nheight: Number \nReturn Value: \n Nothing
ctrlSetFontHeightH3 \nGame: Armed Assault (1.00) \nDescription: Sets H3 font size of given HTML control.  \nSyntax:  \n controlName ctrlSetFontHeightH3 height \nParameters: \ncontrolName: Control \nheight: Number \nReturn Value: \n Nothing
ctrlSetFontHeightH4 \nGame: Armed Assault (1.00) \nDescription: Sets H3 font size of given HTML control.  \nSyntax:  \n controlName ctrlSetFontHeightH4 height \nParameters: \ncontrolName: Control \nheight: Number \nReturn Value: \n Nothing
ctrlSetFontHeightH5 \nGame: Armed Assault (1.00) \nDescription: Sets H5 font size of given HTML control.  \nSyntax:  \n controlName ctrlSetFontHeightH5 height \nParameters: \ncontrolName: Control \nheight: Number \nReturn Value: \n Nothing
ctrlSetFontHeightH6 \nGame: Armed Assault (1.00) \nDescription: Sets H6 font size of given HTML control.  \nSyntax:  \n controlName ctrlSetFontHeightH6 height \nParameters: \ncontrolName: Control \nheight: Number \nReturn Value: \n Nothing
ctrlSetFontPB \nGame: Armed Assault (1.00) \nDescription: Sets P bold font of given HTML control.  \nSyntax:  \n controlName ctrlSetFontPB fontName \nParameters: \ncontrolName: Control \nfontName: String \nReturn Value: \n Nothing
ctrlSetForegroundColor \nGame: Armed Assault (1.00) \nDescription: Sets foreground color of given control. Color is in format Color \n.  \nSyntax:  \n display ctrlSetForegroundColor color \nParameters: \ndisplay: Control \ncolor: Array \nReturn Value: \n Nothing
ctrlSetPosition \nGame: Armed Assault (1.00) \nDescription: Sets wanted position and size for control animation. \nWidth and height are optional.   \nSyntax:  \n controlName ctrlSetPosition [x, y, w, h] \nParameters: \ncontrolName: Control \n[x, y, w, h]: Array \nReturn Value: \n Nothing
ctrlSetScale \nGame: Armed Assault (1.00) \nDescription: Sets wanted scale for control animation.  \nSyntax:  \n controlName ctrlSetScale scale \nParameters: \ncontrolName: Control \nscale: Number \nReturn Value: \n Nothing
ctrlSetStructuredText \nGame: Armed Assault (1.00) \nDescription: Set the structured text which will be displayed in structured text \n control.  \nSyntax:  \n controlName ctrlSetStructuredText structuredText \nParameters: \ncontrolName: Control \nstructuredText: Structured Text \nReturn Value: \n Nothing
ctrlSetText \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Set the text of a control of the currently active user dialog or display \n. This command can be used for: static texts, buttons, edit lines \n and active texts as well as for images, where you can use it to set the image \n path. \nRead Dialog Control for more information about user dialogs and controls \n.  \nSyntax:  \n ctrlSetText [idc, text] \nParameters: \n[idc, text]: Array \nidc: Integer - control ID \ntext: String - text or image path, depending on the control type \nReturn Value: \n Nothing 
ctrlSetTextColor \nGame: Armed Assault (1.00) \nDescription: Sets text color of given control. Color is in format Color.  \nSyntax:  \n display ctrlSetTextColor color \nParameters: \ndisplay: Control \ncolor: Array \nReturn Value: \n Nothing
ctrlSetTooltip \nGame: Armed Assault (1.00) \nDescription: Sets tooltip text of given control.  \nSyntax:  \n control ctrlSetTooltip text \nParameters: \ncontrol: Control - Any control type, except for CT_STATIC &amp; CT_STRUCTURED_TEXT \ntext: String \nReturn Value: \n Nothing
ctrlSetTooltipColorBox \nGame: Armed Assault (1.00) \nDescription: Sets tooltip border color of given control. Color is in format Color \n.  \nSyntax:  \n display ctrlSetTooltipColorBox color \nParameters: \ndisplay: Control \ncolor: Array \nReturn Value: \n Nothing
ctrlSetTooltipColorShade \nGame: Armed Assault (1.00) \nDescription: Sets tooltip background color of given control. Color is in format \n Color.  \nSyntax:  \n display ctrlSetTooltipColorShade color \nParameters: \ndisplay: Control \ncolor: Array \nReturn Value: \n Nothing
ctrlSetTooltipColorText \nGame: Armed Assault (1.00) \nDescription: Sets tooltip text color of given control. Color is in format Color \n.  \nSyntax:  \n display ctrlSetTooltipColorText color \nParameters: \ndisplay: Control \ncolor: Array \nReturn Value: \n Nothing
ctrlShow \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Set if a control of the currently active user dialog is shown or not. \nRead Dialog Control for more information about user dialogs and controls \n.  \nSyntax:  \n ctrlShow [idc, show] \nParameters: \n[idc, show]: Array \nidc: Integer - control ID \nshow: Boolean - true if the control should be shown, false if not \nReturn Value: \n Nothing 
ctrlShown \nGame: Armed Assault (1.00) \nDescription: Returns whether given control is shown.  \nSyntax:  \n Boolean = ctrlShown controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Boolean
ctrlText \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Returns the text of a control of the currently active user dialog \n. This command can be used on static texts, buttons, edit lines and active \n texts as well as for images, where it returns the image path. \nRead Dialog Control for more information about user dialogs and controls \n.  \nSyntax:  \n String =  ctrlText idc \nParameters: \nidc: Number - control ID \nReturn Value: \n String - The text or image path is returned, dependent on the control type. 
ctrlType \nGame: Armed Assault (1.00) \nDescription: Returns value representing type of control.  \nSyntax:  \n Number = ctrlType controlName \nParameters: \ncontrolName: Control \nReturn Value: \n Number
ctrlVisible \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Returns if a control of the currently active user dialog is shown \n or not. Read Dialog Control for more information about user dialogs \n and controls.  \nSyntax:  \n Boolean = ctrlVisible idc \nParameters: \nidc: Number - control ID \nReturn Value: \n Boolean - true if the control is shown, false if not
currentCommand \nGame: Armed Assault (1.00) \nDescription: Return the current command type (empty string when no command) for the commander \n of given vehicle (or for a given soldier). Value returned can be one of: \n"WAIT","ATTACK","HIDE","MOVE","HEAL","REPAIR","REFUEL","REARM","SUPPORT \n","JOIN","GET IN","FIRE","GET OUT","STOP","EXPECT","ACTION","ATTACKFIRE \n", \nSyntax:  \n String = currentCommand vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n String
currentMagazine \nGame: ARMA 2  (1.00) \nDescription: Return the name of the type of the currently using magazine (on the primary \n turret for vehicles).   \nSyntax:  \n currentMagazine vehicle \nParameters: \nvehicle:  - \nReturn Value: \n String
currentMuzzle \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns current muzzle of unit's weapon.  \nSyntax:  \n muzzle = currentMuzzle gunner \nParameters: \ngunner: Object \nReturn Value: \n String
currentTask \nGame: ARMA 2  (1.00) \nDescription: Return current task of given person.  \nSyntax:  \n currentTask person \nParameters: \nperson: Object - \nReturn Value: \n Task
currentTasks \nGame: ARMA 2  (1.00) \nDescription: List all uncompleted tasks.  \nSyntax:  \n currentTasks member \nParameters: \nmember: Team Member \nReturn Value: \n Array
currentVisionMode \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns current vision mode of unit's weapon. 0 - daytime 1 - night \n vision 2 - FLIR  \nSyntax:  \n currentVisionMode unit \nParameters: \nunit: Object \nReturn Value: \n Number
currentWaypoint \nGame: ARMA 2  (1.00) \nDescription: Return the index of the current waypoint. \nTo determine the validity of the index, compare it to the waypoints \n count. \nIf all waypoints are 'completed', then the index is 1 greater than \n the last valid index. \nIf there are no waypoints, then the index is 0. \nBy default, a group has 1 waypoint at their starting position, which \n is considered completed and so the currentWaypoint is 1. \nSyntax:  \n currentWaypoint groupName \nParameters: \ngroupName: Group \nReturn Value: \n Number
currentWeapon \nGame: ARMA 2  (1.00) \nDescription: Return the name of the currently selected weapon (on the primary \n turret for vehicles).   \nSyntax:  \n currentWeapon vehicle \nParameters: \nvehicle: Object \nReturn Value: \n String
currentWeaponMode \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns current weapon mode of unit's weapon. Result can be: "Single \n", "Burst" or "manual"  \nSyntax:  \n currentWeaponMode gunner \nParameters: \ngunner: Object \nReturn Value: \n String
currentZeroing \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns zeroing of unit's weapon.  \nSyntax:  \n currentZeroing gunner \nParameters: \ngunner: Object \nReturn Value: \n Number
cursorTarget \nGame: ARMA 2  (1.00) \nDescription: This is the entity pointed to by a players cursor.  \nSyntax:  \n cursorTarget \nReturn Value: \n Object
cutFadeOut \nGame: Armed Assault (1.05) \nDescription: Terminate the effect in the given layer and set duration of the fade \n out phase to the given time.  \nSyntax:  \n layer cutFadeOut delay \nParameters: \nlayer: Number \ndelay: Number \nReturn Value: \n Nothing
cutObj \nGame: Operation Flashpoint (1.00) \nDescription: Display an object defined in the mission's description.ext, the campaign \n's description.ext or the global resource.cpp.  \nSyntax:  \n (layer) cutObj [name, type, (speed)] \nParameters: \nlayer: Number - This parameter is optional and only available in Arma 2. Omit it for earlier versions. It defines the layer in which the effect is shown, where 0 is the back most. \n[name, type, speed]: Array \nname: String - the className of the object \ntype: String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Types for more information about these values. \nspeed: Number - This value is optional, time is seconds, in which the object will be faded in. If no speed is given, 1 is assumed. \nReturn Value: \n Nothing
cutRsc \nGame: Operation Flashpoint (1.00) \nDescription: Display a resource defined in the mission's description.ext, the campaign \n's description.ext or the global resource.cpp.  \nSyntax:  \n cutRsc [name, type, speed] \nParameters: \nname: String - the class name of the resource. ("Default" will remove the current resource.) \ntype: String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Types for more information about these values. \nspeed: Number - Time in seconds to fade in resource (optional, default: 1). \nReturn Value: \n Nothing 
cutText \nGame: Operation Flashpoint (1.00) \nDescription: Displays a text message in the center of the screen. \nSyntax:  \n cutText [text,type,speed] \nParameters: \ntext: String - text to be displayed \ntype: String one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Types for more information about these values. \nspeed: Number - Time in seconds to fade in resource (optional, default: 1) \nReturn Value: \n Nothing 
damage \nBehavior: global \nGame: Operation Flashpoint (1.5) \nDescription: Return the damage value of an object.  \nSyntax:  \n Number = damage object \nParameters: \nobject: Object \nReturn Value: \n Number -  The returned number is in range 0 (healthy) to 1 (dead).
date \nGame: Armed Assault (1.00) \nDescription: Return the actual mission date and time as an array [year, month \n, day, hour, minute]. Month is a full number between 1 and 12, day is between \n 1 and 31, hour is between 0 and 23 and minute is between 0 and 59.  \nSyntax:  \n Array = date \nReturn Value: \n Array
dateToNumber \nGame: ARMA 2  (1.00) \nDescription: Convert a date to a float number, based on Jan 1st 00:00:00 = 0 and Dec 31th \n  23:59:59 = 1  \nSyntax:  \n DateToNumber date \nParameters: \ndate: Array - \nReturn Value: \n Number
daytime \nGame: Operation Flashpoint (1.00) \nDescription: Returns the current ingame time in hours.  \nSyntax:  \n Number = daytime \nReturn Value: \n Number -  Time using a 24 hour clock.
deActivateKey \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Deactivates the given keyname for the current user profile. The keys \n are used to unlock missions or campaigns. \nSee keys, keysLimit and doneKeys in the description.ext file of the missions \n.  \nSyntax:  \n deActivateKey keyname \nParameters: \nkeyname: String \nReturn Value: \n Nothing
debugFSM \nGame: ARMA 2  ( 1.05) \nDescription: Dump (something about FSM) to debugging output. This command is (assumed \n to be) non-functional in the retail version.  \nSyntax:  \n FSMhandle debugFSM true \nParameters: \nFSMhandle: Number \ntrue: Boolean \nReturn Value: \n Nothing
debugLog \nGame: Operation Flashpoint ( 1.00) \nDescription: Dump argument type and value to debugging output.  \nNote: This command is non-functional in the retail version. \nSyntax:  \n debugLog anything \nParameters: \nanything: Any Value \nReturn Value: \n Nothing
default \nGame: Armed Assault (1.00) \nDescription: see switch.  \nSyntax:  \n default a \nParameters: \na: Code \nReturn Value: \n Nothing
deg \nGame: Operation Flashpoint (1.00) \nDescription: Convert a number from Radians to Degrees.  \nSyntax:  \n Number = deg x \nParameters: \nx: Number \nReturn Value: \n Number
deleteCenter \nGame: Armed Assault (1.00) \nDescription: Destroys the AI center of the given side.  \nSyntax:  \n deleteCenter side \nParameters: \nside: Side \nReturn Value: \n Nothing
deleteCollection \nGame: Armed Assault (1.00) \nDescription: Delete a collection. As example, used with a soldier, it'll hide \n the ingame model. \nWhen targetting ArmA 2 1.06 or newer, use hideObject instead. This \n function is a relic from dynamic building destruction development \n. It is left only for compatibility with scripts created before ArmA \n 2 1.06, and its functionality may be changed or removed in the future \n. \nSyntax:  \n deleteCollection object \nParameters: \nobject: Object \nReturn Value: \n Nothing
deleteEditorObject \nGame: ARMA 2  (1.00) \nDescription: Delete the editor object. Requires all editor object links to be removed \n prior.  \nSyntax:  \n map deleteEditorObject object \nParameters: \nmap: Control - \nobject: String - \nReturn Value: \n Any
deleteGroup \nGame: Armed Assault (1.00) \nDescription: Destroys the given group.  \nSyntax:  \n deleteGroup group \nParameters: \ngroup: Group \nReturn Value: \n Nothing
deleteIdentity \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Delete an identity (created with saveIdentity) from the campaign \n's progress file.  \nSyntax:  \n Boolean = deleteIdentity identityName \nParameters: \nidentityName: String - name of the saved identity \nReturn Value: \n Boolean -  true if the identy was deleted successfully, false if not
deleteLocation \nGame: Armed Assault (1.08) \nDescription: Delete a location.  \nSyntax:  \n deleteLocation location \nParameters: \nlocation: Location \nReturn Value: \n Nothing
deleteMarker \nGame: Armed Assault (1.00) \nDescription: Destroys the given marker.  \nSyntax:  \n deleteMarker name \nParameters: \nname: String \nReturn Value: \n Nothing
deleteMarkerLocal \nGame: Armed Assault (1.04) \nDescription: Destroys the given marker.  \nSyntax:  \n deleteMarkerLocal markerName \nParameters: \nmarkerName: String \nReturn Value: \n Nothing
deleteResources \nGame: ARMA 2  (1.00) \nDescription: (description)  \nSyntax:  \n (command) \nReturn Value: \n
deleteStatus \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Delete a status (created with saveStatus) from the campaign's progress \n file.  \nSyntax:  \n Boolean = deleteStatus statusName \nParameters: \nstatusName: String - name of the saved status \nReturn Value: \n Boolean -  true if the status was deleted successfully, false if not
deleteTeam \nGame: ARMA 2  (1.00) \nDescription: Destroy given team.  \nSyntax:  \ndeleteTeam team \nParameters: \nteam: Team Member \nReturn Value: \n Nothing
deleteVehicle \nBehavior: global \nGame: Operation Flashpoint (1.34) \nDescription: Deletes an object. \nOnly units inserted in the mission editor and units created during \n the game's progress can be deleted by this command. Island objects \n and player units cannot be removed.  \nDeleting a vehicle, which is still being accessed by a running script \n, can result in a CTD. \nSyntax:  \n deleteVehicle object \nParameters: \nobject: Object \nReturn Value: \n Nothing
deleteWaypoint \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Removes the specified waypoint.  \nSyntax:  \n deleteWaypoint [group, index] \nParameters: \n[group, index]: Array \ngroup: Group \nindex: Number \nReturn Value: \n Nothing
detach \nGame: ARMA 2  (1.00) \nDescription: Detaches an object.  \nSyntax:  \n detach object \nParameters: \nobject: Object - \nReturn Value: \n
diag_captureFrame \nGame: ArmA 2: Operation Arrowhead (1.63) \nDescription: Capture the single frame, following after the number of frames given \n as parameter.  \nNote: Only available in specific builds. See Performance Profiling \n for details.  \nSyntax:  \n diag_captureFrame frame \nParameters: \nframe: Number - next n-th frame to be captured \nReturn Value: \n Nothing
diag_captureSlowFrame \nGame: ArmA 2: Operation Arrowhead (1.63) \nDescription: Capture the first frame, where section takes longer than the threshold \n (in seconds).  \nNote: Only available in specific builds. See Performance Profiling \n for details.  \nSyntax:  \n diag_captureSlowFrame [section, threshold] \nParameters: \nsection: String - Valid: total,&#160;??? \nthreshold: Number - Duration of the section in seconds \nReturn Value: \n Nothing
diag_fps \nGame: ARMA 2  (1.00) \nDescription: Returns average framerate calculated over last 16 frames.   \nSyntax:  \n diag_fps \nReturn Value: \n Number
diag_fpsmin \nGame: ARMA 2  (1.00) \nDescription: Returns minimal framerate. Calculated from the longest frame over \n last 16 frames.   \nSyntax:  \n diag_fpsmin \nReturn Value: \n Number
diag_frameno \nGame: ARMA 2  (1.00) \nDescription: Returns number of frame currently displayed.   \nSyntax:  \n diag_frameno \nReturn Value: \n Number
diag_log \nGame: ARMA 2  (1.00) \nDescription: Dumps the argument's type and value to the report file.  \nSyntax:  \n diag_log anything \nParameters: \nanything: Anything - \nReturn Value: \n Nothing
diag_logSlowFrame \nGame: ArmA 2: Operation Arrowhead (1.63) \nDescription: Log all frames, where section takes longer than the threshold (in seconds \n).  \nNote: Only available in specific builds. See Performance Profiling \n for details.  \nSyntax:  \n diag_logSlowFrame [section, threshold] \nParameters: \nsection: String - Valid:&#160;??? \nthreshold: Number - Duration of frame in seconds \nReturn Value: \n Nothing
diag_tickTime \nGame: ARMA 2  (1.00) \nDescription: Real time spent from the start of the game. Expressed in fractions \n of second. Resolution of 1 tick is 1 ms.  \nSyntax:  \n diag_tickTime \nReturn Value: \n Number
dialog \nGame: Operation Flashpoint: Resistance (1.78) \nDescription: Tests whether any user dialog is open. \nSyntax:  \n Boolean = dialog \nReturn Value: \n Boolean -  true if a dialog is open, false if not
diarySubjectExists \nGame: ARMA 2  (1.00) \nDescription: Checks whether given subject is present in the diary of given person \n.  \nSyntax:  \n person diarySubjectExists name \nParameters: \nperson: Object - \nname: String - \nReturn Value: \n Boolean
difficultyEnabled \nGame: Armed Assault (1.05) \nDescription: Checks specific difficulty settings of the current user. Difficulty \n flag names can be found in the ArmA profile file under class Difficulties \n/xxx/Flags (xxx being regular or veteran).  \nSyntax:  \n Boolean = difficultyEnabled flagName \nParameters: \nflagName: String - difficulty flag name \nReturn Value: \n Boolean
direction \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the direction an object or a location is facing (differs \n from getDir in that this also works with locations).  \nSyntax:  \n Number = direction object \nParameters: \nobject: Object or Location \nReturn Value: \n Number -  Direction in degrees, range 0 to 360
directSay \nGame: ARMA 2  (1.00) \nDescription: Sends the message to the direct channel. The message is defined in the description \n.ext file, radio protocol, or a kbAddTopic.  \nSyntax:  \n unit directSay radioName \nParameters: \nunit: Object - \nradioName: String - \nReturn Value: \n Nothing
disableAI \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Disable parts of the AI behaviour to get a better control over the actions \n of a unit. \nPossible values are:"TARGET" - stop the unit to watch the assigned \n target"AUTOTARGET" - prevent the unit from assigning a target independently \n and watching unknown objects"MOVE" - disable the AI's movement"ANIM \n" - disable ability of AI to change animation. Available only since \n Armed Assault."FSM" - disable the execution of AI behavior scripts \n. Available only since Operation Arrowhead v1.60. \nNote: All effects of disableAI command are cancelled after mission \n save or load. \nNote: In OFP is no way to undo this command.  \nSyntax:  \n unitName disableAI section \nParameters: \nunitName: Object - AI unit \nsection: String \nReturn Value: \n Nothing
disableConversation \nGame: ARMA 2  (1.00) \nDescription: Disable the ability to talk to other people.  \nSyntax:  \n unitName disableConversation disable \nParameters: \nunitName: Object \ndisable: Boolean \nReturn Value: \nNothing
disableSerialization \nGame: ARMA 2  (1.00) \nDescription: Disable saving of script containing this command. After this script \n can work with the data types which do not support serialization \n (UI types).   \nSyntax:  \n disableSerialization \nReturn Value: \n Nothing
disableTIEquipment \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.52.72031) \nDescription: Disables TI equipment for given vehicle.  \nSyntax:  \n vehicle disableTIEquipment state \nParameters: \nvehicle: Object \nstate: Boolean - true to turn TI off, false to turn TI on \nReturn Value: \n Nothing
disableUserInput \nGame: Operation Flashpoint (1.00) \nDescription: Disable and enable the keyboard and mouse input, usually used during \n cutscenes. \nBe careful with the usage of this command, always remember to enable \n the user input again, as once the user input is disabled, you can only \n shut down OFP but not exit the mission with escape.  \nSyntax:  \n disableUserInput state \nParameters: \nstate: Boolean \nReturn Value: \n Nothing
displayAddEventHandler \nGame: ARMA 2  (1.00) \nDescription: Add an event handler to the given display. Returns id of the handler \n or -1 when failed. \nThe provided function should return true/false indicating that the event \n has handled this event fully or not and whether the engine should \n execute it's default code or not afterwards.  \nSee User Interface Event Handlers for the full list of handler names \n. \nIf applicable, see DIK_KeyCodes for a list of key code constants \n, which are relevant to key related user interface events like: KeyDown \n &amp; KeyUp.  \nSyntax:  \n display displayAddEventHandler [handlerName, function] \nParameters: \ndisplay: Display \n[handlerName, function]: Array \nhandlerName: String \nfunction: String \nReturn Value: \n Number
displayCtrl \nGame: Armed Assault (1.00) \nDescription: Return child control with specified idc.  \nSyntax:  \n Control = display displayCtrl idc \nParameters: \ndisplay: Display \nidc: Number \nReturn Value: \n Control
displayNull \nGame: Armed Assault (1.00) \nDescription: A non-existing Display. This value is not equal to anything, including \n itself.  \nSyntax:  \n Display = displayNull \nReturn Value: \n Display
displayRemoveAllEventHandlers \nGame: ARMA 2  (1.00) \nDescription: Remove all even handlers from the given display.  \nSyntax:  \n display displayRemoveAllEventHandlers handler name \nParameters: \ndisplay: Display - \nhandler name: String - \nReturn Value: \n Nothing
displayRemoveEventHandler \nGame: ARMA 2  (1.00) \nDescription: Remove a given event handler from the given display.  \nSyntax:  \n display displayRemoveEventHandler [handler name,id] \nParameters: \ndisplay: Display - \n[handler name,id]: Array - \nReturn Value: \n Nothing
displaySetEventHandler \nGame: Armed Assault (1.00) \nDescription: Sets given event handler of given display. \nThe return code of the provided function should indicate whether \n this event was handled correctly. This implies telling the engine \n whether it's default code should be executed.  \nSee User Interface Event Handlers for the full list of handler names \n. \nIf applicable, see DIK_KeyCodes for a list of key code constants \n, which are relevant to key related user interface events like: KeyDown \n &amp; KeyUp.  \nSyntax:  \n display displaySetEventHandler [handlerName, function] \nParameters: \ndisplay: Display \n[handlerName, function]: Array \nhandlerName: String \nfunction: String. {Code} \nReturn Value: \n Nothing
dissolveTeam \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Dissolves the given team. All members become members of the main \n team. Possible team values are: "RED", "GREEN", "BLUE" or "YELLOW \n".  \nSyntax:  \n dissolveTeam teamColor \nParameters: \nteamColor: String \nReturn Value: \n Nothing
distance \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the distance in meters between two Objects, Positions or (since \n VBS2 1.24) Locations.  \nSyntax:  \n var1 distance var2 \nParameters: \nvar1: Object, Location (since VBS2 1.24) or Array-format Position \nvar2 or pos2: Object, Location (since VBS2 1.24) or Array-format Position \nReturn Value: \n Number -  Distance in meters.
distributionRegion \nGame: Armed Assault (1.05) \nDescription: Returns the numerical index for the distribution region of this copy \n of ArmA.  \n1 - US \n2 - Rest of the world  \nSyntax:  \n Number = distributionRegion \nReturn Value: \n Number
doFire \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit(s) to fire on the given target (without radio \n messages). \nThe target is set with doTarget or commandTarget. \nThe target can be a unit or a vehicle, but not an object. \nSyntax:  \n unitName doFire target \nParameters: \nunitName: Object or Array \ntarget: Object \nReturn Value: \n Nothing
doFollow \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit(s) to follow the given other unit or vehicle \n eg (without radio messages).  \nSyntax:  \n unitName doFollow unitName2 \nParameters: \nunitName: Object or Array \nunitName2: Object \nReturn Value: \n Nothing
doFSM \nGame: Armed Assault (1.00) \nDescription: Orders a unit to process command defined by FSM file (silently).  \nUnlike with execFSM where _this is passed to the FSM, the following \n parameters are passed when using doFSM/commandFSM: \n \n _leader \n leader of subgroup with this command  \n _destination \n command destination/position \n _target \n command target  \n _units \n list of all persons in subgroup  \nSyntax:  \n unit(s) doFSM [fsmName, position, target] \nParameters: \nunit(s): Object or Array \n[fsmName, position, target]: Array \nfsmName: String \nposition: (Array) \ntarget: Object \nReturn Value: \n Nothing
doGetOut \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Orders a unit or units to get out from the vehicle (silently).  \nSyntax:  \n doGetOut unit(s) \nParameters: \nunit(s): Object or Array \nReturn Value: \n Nothing
doMove \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit(s) to move to the given position (without radio \n messages). After reaching his destination, the unit will immediately \n return to formation (if in a group); or order his group to form \n around his new position (if a group leader).  \nSyntax:  \n unit(s) doMove position \nParameters: \nunit(s): Object or Array \nposition: Array - format Position \nReturn Value: \n Nothing
doStop \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit(s) to stop (without radio messages). \nDoStop'ed units leave the groups formation. It will prevent the unit \n from moving around with their group (or formation leader), while \n still beeing able to turn around and even move to a new position \n if they see fit. They will still respond to orders from their group \n leader (like engage, rearm, board a vehicle), but all of their actions \n will be seperate from the group formation (unless ordered to return \n, which AI leaders don't do unless a script tells them to).  \nSyntax:  \n doStop unit(s) \nParameters: \nunit(s): Object or Array \nReturn Value: \n Nothing
doTarget \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit(s) to target the given target (without radio \n messages).  \nSyntax:  \n unit(s) doTarget target \nParameters: \nunit(s): Object or Array \ntarget: Object \nReturn Value: \n Nothing
doWatch \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Order the given unit(s) to watch the given position or target (without \n radio messages). Use objNull as the target to order a unit to stop \n watching a position/target.   \nSyntax:  \n unit(s) doWatch position \nParameters: \nunit(s): Object or Array \nposition: Array - format Position \nReturn Value: \n Nothing 
drawArrow \nGame: Armed Assault (1.00) \nDescription: Draw an arrow on the map.  \nSyntax:  \n map drawArrow [position1, position2, color] \nParameters: \nmap: Control \n[position1, position2, Color]: Array \nReturn Value: \n Nothing
drawEllipse \nGame: Armed Assault (1.00) \nDescription: Draw an ellipse on the map.  \nSyntax:  \n map drawEllipse [center, a, b, angle, color, fill] \nParameters: \nmap: Control \n[center, a, b, angle, color, fill]: Array \nReturn Value: \n Nothing
drawIcon \nGame: Armed Assault (1.00) \nDescription: Draw an Icon on the map.  \nSyntax:  \n map drawIcon [texture, color, position, width, height, angle, text, shadow] \nParameters: \nmap: Control \n[texture, color, position, width, height, angle, text, shadow]: Array \nReturn Value: \n Nothing
drawLine \nGame: Armed Assault (1.00) \nDescription: Draw a line on the map.  \nSyntax:  \n map drawLine [position1, position2, color] \nParameters: \nmap: Control \n[position1, position2, color]: Array \nposition1: Position3D \nposition2: Position3D \ncolor: Color \nReturn Value: \n Nothing
drawLink \nGame: ARMA 2  (1.00) \nDescription: The editor will draw a line between the two specified editor objects \n. Line type can be LINE or ARROW.  \nSyntax:  \n map drawLink [from,to,param type,line type,color] \nParameters: \nmap: Control - \n[from,to,param type,line type,color]: Array - \nReturn Value: \n Nothing
drawLocation \nGame: Armed Assault (1.08) \nDescription: Unknown effect. \nSyntax:  \n control drawLocation location \nParameters: \ncontrol: Control \nlocation: Location \nReturn Value: \n Unknown
drawRectangle \nGame: Armed Assault (1.00) \nDescription: Draw a Rectangle on the map.  \nSyntax:  \n map drawRectangle [center, a, b, angle, color, fill] \nParameters: \nmap: Control \n[center, a, b, angle, color, fill]: Array \nReturn Value: \n Nothing
driver \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the driver of a vehicle.  \nSyntax:  \n Object = driver vehicle \nParameters: \nvehicle: Object \nReturn Value: \n Object -  The unit sitting in the driver place is returned. If vehicle is not a vehicle but a person, the person is returned.
drop \nGame: Operation Flashpoint (1.5) \nDescription: Creates a particle effect. \nThis command is used to create smoke, fire and similar effects. \nThe particles are single polygons with single textures that always \n face the player. \nThey can be set to dynamically change their position, size, direction \n, can be set to different weights and more or less dependant on the wind \n.  \nSyntax:  \n drop array \nParameters: \narray: Array - format ParticleArray. \nReturn Value: \n Nothing
east \nGame: Operation Flashpoint (1.00) \nDescription: Pre-defined variable for the eastern side  \nSyntax:  \n Side = east \nReturn Value: \n Side
echo \nGame: Armed Assault (1.00) \nDescription: Sends any text into the debugger console or the logfile. Present \n in internal version only, not working in the retail version.  \nSyntax:  \n echo text \nParameters: \ntext: String \nReturn Value: \n Nothing
editObject \nGame: ARMA 2  (1.00) \nDescription: Show the edit object dialog for the given object.  \nSyntax:  \n map editObject object \nParameters: \nmap: Control - \nobject: String - \nReturn Value: \n Any
editorSetEventHandler \nGame: ARMA 2  (1.00) \nDescription: Sets given event handler of given editor.  \nSyntax:  \n map editorSetEventHandler [handler name,function] \nParameters: \nmap: Control - \n[handler name,function]: Array - \nReturn Value: \n Nothing
effectiveCommander \nGame: Armed Assault (1.00) \nDescription: Returns the effective commander (who really commands) of the vehicle \n.  \nSyntax:  \n Object = effectiveCommander vehicle \nParameters: \nvehicle: Object \nReturn Value: \n Object
else \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Construct an array that can be processed by then.  \nSyntax:  \n ifCode else elseCode \nParameters: \nifCode: Code \nelseCode: Code \nReturn Value: \n Array
emptyPositions \nGame: Armed Assault (1.00) \nDescription: Returns the number of given positions in the vehicle. \nPositions can be "Commander", "Driver", "Gunner" or "Cargo"  \nSyntax:  \n Number = vehicle emptyPositions  position \nParameters: \nvehicle: Object \nposition: String \nReturn Value: \n Number
enableAI \nGame: Armed Assault (1.00) \nDescription: Enables parts of the AI behavior that was disabled by disableAI.   \nSyntax:  \n unit enableAI skilltype \nParameters: \nunit: Object \nskilltype: String - See disableAI for possible values. \nReturn Value: \n Nothing
enableAIFeature \nGame: ARMA 2  (1.05) \nDescription: Enable/disable given AI feature. Feature may be one of: \n"AwareFormationSoft", "CombatFormationSoft".  \nSyntax:  \n feature enableAIFeature enabled \nParameters: \nfeature: String \nenabled: Boolean \nReturn Value: \n Nothing
enableAttack \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Set if leader can issue attack commands to the soldiers in his group \n.  \nSyntax:  \n group enableAttack enable \nParameters: \ngroup: Object or Group \nenable: Boolean \nReturn Value: \n Nothing
enableCamShake \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Allows camera shaking  \nSyntax:  \n enableCamShake value \nParameters: \nvalue: Boolean - setting on or off \nReturn Value: \n Nothing
enableEndDialog \nGame: Operation Flashpoint (1.00) \nDescription: Enables the execution of a custom camera sequence after the players \n death, coded in the script onPlayerKilled.sqs.  \nSyntax:  \n enableEndDialog \nReturn Value: \n Nothing
enableEngineArtillery \nGame: ArmA 2: Operation Arrowhead (1.54) \nDescription: Enable/disable the artillery engine. \nSyntax:  \nenableEngineArtillery enabled \nParameters: \nenabled: Boolean \nReturn Value: \n Nothing
enableEnvironment \nGame: Armed Assault (1.00) \nDescription: Enable/disable environmental effects (ambient life + sound).  \nSyntax:  \n enableEnvironment enabled \nParameters: \nenabled: Boolean \nReturn Value: \n Nothing
enableGunLights \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Force the AI to use gun lights  \nSyntax:  \n thing enableGunLights value \nParameters: \nthing: Object or Group - the unit or the group forced to use gun lights \nvalue: Boolean - true/false \nReturn Value: \n Nothing
enableIRLasers \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Allows the AI to use IR lasers  \nSyntax:  \n thing enableIRLasers value \nParameters: \nthing: Object or Group - the unit or the group allowed to use IR lasers \nvalue: Boolean - true/false \nReturn Value: \n Nothing
enableRadio \nGame: Operation Flashpoint (1.00) \nDescription: Enable and disable radio messages to be heard and shown in the left \n lower corner of the screen. This command can be helpful during cutscenes \n.  \nSyntax:  \n enableRadio state \nParameters: \nstate: Boolean - true to enable the radio, false to disable it \nReturn Value: \n Nothing
enableReload \nGame: Armed Assault (1.00) \nDescription: Enable / disable reload when magazine is empty.  \nSyntax:  \n object enableReload enable \nParameters: \nobject: Object \nenable: Boolean \nReturn Value: \n Nothing
enableSaving \nGame: ARMA 2  (1.00) \nDescription: Enable / disable saving of the game. \nWhen disabled, the autosave is created (if not forbidden by save \n == false).  \nSyntax:  \n enableSaving enable \nParameters: \nenable: Boolean - \nReturn Value: \n Nothing 
enableSentences \nGame: ARMA 2  (1.00) \nDescription: Enables radio transmissions to be heard and seen on screen. It does \n not affect KBTell conversations.  \nSyntax:  \n enableSentences enable \nParameters: \nenable: Boolean \nReturn Value: \n Nothing
enableSimulation \nBehavior: global \nGame: ARMA 2  (1.00) \nDescription: Enable / disable simulation for given entity.  \nSyntax:  \n object enableSimulation bool \nParameters: \nObject \nBoolean \nReturn Value: \n None
enableTeamSwitch \nGame: Armed Assault (1.00) \nDescription: Enable / disable Team Switch. The default setting is enabled.  \nSyntax:  \n enableTeamSwitch enable \nParameters: \nenable: Boolean \nReturn Value: \n Nothing
endLoadingScreen \nGame: ARMA 2  (1.00) \nDescription: Finish loading screen displaying (started by startLoadingScreen).  \nSyntax:  \n endLoadingScreen \nReturn Value: \n Nothing
endMission \nBehavior: local \nGame: ARMA 2  (1.00) \nDescription: Finish the mission. \nThe end type can be: "CONTINUE" "KILLED" "LOSER" "END1" "END2" "END3 \n" "END4" "END5" "END6" \nMission saves are deleted. Use failMission if they should not.  To maintain \n Arma 3 visual style, it's recommended to use BIS_fnc_endMission \n instead. \nSyntax:  \n endMission end type \nParameters: \nend type: String - \nReturn Value: \n Nothing
engineOn \nGame: Operation Flashpoint: Resistance (1.9) \nDescription: Activates and deactivates the engine of a vehicle.  \nSyntax:  \n vehicle engineOn state \nParameters: \nvehicle: Object \nstate: Boolean - true to turn the engine on, false to turn it off \nReturn Value: \n Nothing
estimatedEndServerTime \nGame: ARMA 2  (1.00) \nDescription: Estimated end of MP game converted to serverTime.  \nSyntax:  \n estimatedEndServerTime \nReturn Value: \n Number
estimatedTimeLeft \nGame: Operation Flashpoint (1.34) \nDescription: Sets the "time left" value that is shown in the "Game in Progress \n" screen during multiplayer sessions. This command works in MP only \n.If you set param1, param2 or following in the mission's description \n.ext, you can use those values instead of time.  \nSyntax:  \n estimatedTimeLeft seconds \nParameters: \nseconds: Number - estimated time in seconds, or one of {param1, param2,...} \nReturn Value: \n Nothing
evalObjectArgument \nGame: ARMA 2  (1.00) \nDescription: Return argument in mission editor of a given object.  \nSyntax:  \n map evalObjectArgument [object, argument] \nParameters: \nmap: Control \n[object, argument]: Array \nReturn Value: \n Any Value
exec \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Execute a script using (the deprecated).sqs syntax. The argument \n is passed to the script in the "_this" variable. \nIt is not recommended to use this command. Instead, the execVM command \n should be used! \nLearn more about scripts under Scripts.  \nSyntax:  \n argument exec script \nParameters: \nargument: Any Value - the argument which should be passed to the script. To pass multiple arguments, use an array. \nscript: String - the name of the script. It should be given relatively to the mission folder, campaign scripts subfolder or global scripts folder and is searched there in the same order.  \nIf you refer to a script packed together with an addon, the path should look like this: "\ADDON_PBO_NAME\script.sqs" where ADDON_PBO_NAME is the name of the addon's *.pbo file without extension. \nReturn Value: \n Nothing
execEditorScript \nGame: ARMA 2  (1.00) \nDescription: Execute an editor script for the specified object.  \nSyntax:  \n map execEditorScript [object,script] \nParameters: \nmap: Control - \n[object,script]: Array - \nReturn Value: \n Any
execFSM \nGame: ARMA 2  (1.00) \nDescription: Execute the scripted FSM. The FSM file is first searched in the mission \n folder, then in the campaign scripts folder and finally in the global \n scripts folder. Returns the FSM handler or 0 when failed.  \nSyntax:  \n Number = argument execFSM filename \nParameters: \nargument: Any Value(s) \nfilename: String \nReturn Value: \n Number
execVM \nGame: Armed Assault (1.00) \nDescription: Compile and execute SQF Script. \nThe optional argument is passed to the script as local variable _this \n. \nScript is compiled every time you use this command. \nThe Script is first searched for in the mission folder, then in the campaign \n scripts folder and finally in the global scripts folder.  \nSyntax:  \n Script = argument execVM filename \nParameters: \nargument: Any Value(s) \nfilename: String \nReturn Value: \n Script - script handle, which can be used to determine (via scriptDone) when the called script has finished.
exit \nGame: Operation Flashpoint (1.00) \nDescription: Stops the execution of a  SQS script. \nIt's ignored in  SQF Scripts. \nSyntax:  \n exit \nReturn Value: \n Nothing
exitWith \nGame: Armed Assault (1.00) \nDescription: If the result of condition is true, code is evaluated, and current \n block with result of code. It only exits the current scope. \nexitWith exits the execution of a loop defined by one of commands \n do, for, count or forEach. When you use exitWith not inside a loops \n, the behaviour is undefined - sometimes it may exit the script, sometimes \n some other scope, but this is not intended and designed behaviour \n of this command, and it is not guaranteed to work reliably. \nIt exits the loop only, not the script.  \nSyntax:  \n if (condition) exitWith {Code} \nParameters: \nIf Type \nCode \nReturn Value: \n Anything
exp \nGame: Operation Flashpoint (1.00) \nDescription: Let x be a number, then exp (x) is equal to e to the power of x (or e^x)  \nSyntax:  \n Number = exp x \nParameters: \nx: Number \nReturn Value: \n Number
expectedDestination \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Return expected destination of unit as an array with format: [ Position \n, planningMode, forceReplan].  \nSyntax:  \n Array = expectedDestination person \nParameters: \nperson: Object \nReturn Value: \n Array
eyePos \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns the object's eyes / main turret position.  \nSyntax:  \n eyePos object \nParameters: \nobject: Object \nReturn Value: \n Array - format PositionASL
faction \nGame: ARMA 2  (1.00) \nDescription: Gets unit faction.  Standard Factions include:  \nArma 2: West: "USMC", "CDF" East: "RU", "INS" Guer: "GUE" Civ: "CIV", "CIV_RU \n" \nArma 2: Operation Arrowhead:  West: "BIS_US", "BIS_CZ", "BIS_GER \n" East: "BIS_TK", "BIS_TK_INS" Guer: "BIS_TK_GUE", "BIS_UN" Civ: "BIS_TK_CIV \n", "BIS_CIV_special" \nDLC Factions \nArma 2: British Armed Forces:  West: "BIS_BAF" \nArma 2: Private Military Company: Guer: "PMC_BAF" \nFactions are defined under cfgFactionClasses. If the given faction \n is not defined, the command returns empty string.  \nSyntax:  \n String = faction unitName \nParameters: \nunitName: Object \nReturn Value: \n String. See above.
fadeMusic \nGame: Operation Flashpoint (1.00) \nDescription: Changes the music volume smoothly within the given time.  \nSyntax:  \n time fadeMusic volume \nParameters: \ntime: Number in seconds \nvolume: Number - music volume range 0 to 1. Maximum volume is 1. Default is 0.5. \nReturn Value: \n Nothing
fadeRadio \nGame: Armed Assault (1.00) \nDescription: Causes a smooth change in the radio volume. The change duration is given \n by time, the target volume by volume. The default radio volume is 1.0.  \nSyntax:  \n time fadeRadio volume \nParameters: \ntime: Number in seconds \nvolume: Number - radio volume range 0 to 1. Maximum volume is 1. Default is 1. \nReturn Value: \n Nothing
fadeSound \nGame: Operation Flashpoint (1.00) \nDescription: Changes the sound volume smoothly within the given time.  \nSyntax:  \n time fadeSound volume \nParameters: \ntime: Number - the time in seconds \nvolume: Number - sound volume range 0 to 1. Maximum volume is 1. Default is 1. \nReturn Value: \n Nothing
fadeSpeech \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Cause a smooth change in the master speech volume. The change duration \n is given by time, the target volume by volume. The default master \n is 1.0.  \nSyntax:  \n time fadeSpeech volume \nParameters: \ntime: Number \nvolume: Number \nReturn Value: \n Nothing
failMission \nGame: ARMA 2  (1.00) \nDescription: Finish the mission. \nThe end type can be: "CONTINUE" "KILLED" "LOSER" "END1" "END2" "END3 \n" "END4" "END5" "END6" \nMission saves won't be deleted.  To maintain Arma 3 visual style \n, it's recommended to use BIS_fnc_endMission instead. \nSyntax:  \n failMission end type \nParameters: \nend type: String - \nReturn Value: \n Nothing
false \nGame: Operation Flashpoint (1.00) \nDescription: Always false.  \nSyntax:  \n false \nReturn Value: \n Boolean
fillWeaponsFromPool \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Adds magazines from the campaign pool to the given unit, depending \n on his weapons.  \nSyntax:  \n fillWeaponsFromPool unitName \nParameters: \nunitName: Object \nReturn Value: \n Nothing
find \nGame: Armed Assault (1.00) \nDescription: Returns the 0 based position of the first array element that matches \n x, returns -1 if not found. \nTest is case-sensitive. \nNote that you can not locate an array within an array using this \n command. \nSyntax:  \n Number = array find x \nParameters: \narray: Array to search in \nx: Any Value except Array to search for in the array \nReturn Value: \n Number 0 based position of the first array element that matches x, -1 if not found
findCover \nGame: Armed Assault (1.00) \nDescription: Returns the object around where the unit finds cover. The minDist \n, visibilityPosition and ignoreObject parameters are optional. Command \n is not functional in ArmA 2.  \nSyntax:  \n Object = object findCover [position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject] \nParameters: \nobject: Object \n[position, hidePosition, maxDist, minDist, visibilityPosition, ignoreObject]: Array \nposition: Array - format Position \nhidePosition: Array - format Position Position of that which the unit should hide from \nmaxDist: Number \nminDist: Number (Optional) \nvisibilityPosition: Array - format Position (Optional) used to select cover that unit can see in that direction from \nignoreObject: Object (Optional) Ignore this object in visibility check \nReturn Value: \n Object
findDisplay \nGame: Armed Assault (1.00) \nDescription: Find display by its IDD (which is defined in the description.ext or config \n). \nIf the specified display can't be found displayNull ("No display \n") is returned, (which can be tested with the isNull command.) \nThe primary display uses IDD 46. (eg: findDisplay 46). This will \n return displayNull on a dedicated server (so be sure to check isDedicated \n if using this in a waitUntil condition).  \nSyntax:  \n Display = findDisplay idd \nParameters: \nidd: Number \nReturn Value: \n Display
findEditorObject \nGame: ARMA 2  (1.00) \nDescription: Return object that matches the provided reference.  \nSyntax:  \n map findEditorObject value \nParameters: \nmap: Control - \nvalue: Any - \nReturn Value: \n String
findEmptyPosition \nGame: ARMA 2  (1.00) \nDescription: Searches for an empty position around a center location. \nThe search starts looking for an empty position at a minimum distance \n of [radius] from the [center] and looks as far away as [maxDistance \n]. \nIf a [vehicleType] parameter is specified, then the search will look \n for empty positions that are big enough to hold that vehicle type \n. \nIf an empty position isn't found, an empty array is returned.   \nSyntax:  \n center findEmptyPosition [radius,maxDistance] or [radius,maxDistance,vehicleType] \nParameters: \ncenter: Array - \n[radius,maxDistance,vehicleType]: Array - \nReturn Value: \n Array
findEmptyPositionReady \nGame: ARMA 2  (1.00) \nDescription: Check if findEmptyPosition can be called without waiting for files \n.  \nSyntax:  \n center findEmptyPositionReady [radius,maxDistance] \nParameters: \ncenter: Array - \n[radius,maxDistance]: Array - \nReturn Value: \n Array
findNearestEnemy \nGame: Armed Assault (1.00) \nDescription: Find the nearest enemy to the specified position. Returns a null \n object if the object's group does not know about any enemies.  \nSyntax:  \n object findNearestEnemy position \nParameters: \nobject: Object \nposition: Object or Array \nReturn Value: \n Object
finishMissionInit \nGame: Armed Assault (1.00) \nDescription: Finish world initialization before mission is launched.  \nSyntax:  \n finishMissionInit \nReturn Value: \n Nothing
finite \nGame: Armed Assault (1.00) \nDescription: True, if number is finite (not infinite and a valid number)  \nSyntax:  \n Boolean = finite x \nParameters: \nx: Number \nReturn Value: \n Boolean
fire \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Forces a unit to fire the given weapon.  \nSyntax:  \n unit fire weaponName \nParameters: \nunit: Object - unit that's supposed to fire \nweaponName: String - name of the weapon to be fired \nReturn Value: \n Nothing 
fireAtTarget \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Remotely forces a unit to fire the given weapon.  \nSyntax:  \n Script = sourceVehicle fireAtTarget [targetVehicle,weaponClassName] \nParameters: \nsourceVehicle: Object - source vehicle to fire from \ntargetVehicle: Object - target vehicle to fire at \nWeaponClassName: String - weapon classname, optional parameter \nReturn Value: \n Script - script handle, which can be used to determine (via scriptDone) when the called script has finished.
flag \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the flag the unit is carrying.  \nSyntax:  \n Object = flag unitName \nParameters: \nunitName: Object \nReturn Value: \n Object -  Returns the flag. If the unit carries no flag, objNull is returned.
flagOwner \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the owner of a flag.  \nSyntax:  \n Object = flagOwner flag \nParameters: \nflag: Object \nReturn Value: \n Object -  The person or vehicle that owns the flag is returned. If used on anything else than a flag, the returned value is objNull.  If the flag is on its pole, the return value is NULL.  If the flagowner is dead, the return value is the name of the soldier model.
fleeing \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Checks if a unit is fleeing.  \nSyntax:  \n Boolean = fleeing unitName \nParameters: \nunitName: Object \nReturn Value: \n Boolean -  Returns true if a unit is fleeing, false if not. Dead or empty units return false.
floor \nGame: Armed Assault (1.00) \nDescription: Returns the next lowest integer in relation to x.  \nSyntax:  \n Number = floor x \nParameters: \nx: Number \nReturn Value: \n Number
flyInHeight \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Sets the flying altitude for aircraft relatively to the ground surface \n. Avoid too low altitudes, as helicopters and planes won't evade \n trees and obstacles on the ground. The default flying altitude is 100 meters \n.  \nSyntax:  \n aircraft flyInHeight altitude \nParameters: \naircraft: Object \naltitude: Number - flying altitude in meters \nReturn Value: \n Nothing
fog \nGame: Armed Assault (1.00) \nDescription: Return the current fog.  \nSyntax:  \n Number = fog \nReturn Value: \n Number
fogForecast \nGame: Armed Assault (1.00) \nDescription: Returns the forecast fog value. A value of 0 means no fog, 1 means \n maximum fog.  \nSyntax:  \n Number = fogForecast \nReturn Value: \n Number
for \nGame:  () \nDescription:  \nSyntax: 
forceEnd \nGame: Operation Flashpoint (1.00) \nDescription: Enforces mission termination. Can be used in an "END" trigger to force \n end conditions in the editor. \nSyntax:  \n forceEnd \nReturn Value: \n Nothing
forceMap \nGame: Operation Flashpoint (1.27) \nDescription: Displays the map on the screen during a mission.  \nSyntax:  \n forceMap show \nParameters: \nshow: Boolean \nReturn Value: \n Nothing
forceSpeed \nGame: Armed Assault (1.00) \nDescription: Force the speed limit on given object (object will never attempt \n to move faster than given by forceSpeed). Use negative value to return \n to default behaviour. Used unit is m/s.  \nSyntax:  \n object forceSpeed speed \nParameters: \nobject: Object \nspeed: Number (in m/s) \nReturn Value: \n Nothing
forceWalk \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Makes the unit walk, without possibility to run. Note, you still \n can sprint  \nSyntax:  \n unit forceWalk value \nParameters: \nunit: Object - the unit forced to walk \nvalue: Boolean - true/false \nReturn Value: \n Nothing
forEach \nGame: Operation Flashpoint (1.00) \nDescription: Executes the given command(s) on every item of an array. \nThe array items are represented by _x. The array indices are represented \n by _forEachIndex. \nIn ArmA2 &amp; VBS2, the variable _x is always local to the forEach \n block so it is safe to nest them. \nSyntax:  \n command forEach array \nParameters: \ncommand: String \narray: Array \nReturn Value: \n Nothing
forEachMember \nGame: ARMA 2  (1.00) \nDescription: Executes the given command for each member of the team (recursively \n).  \nSyntax:  \n command forEachMember team \nParameters: \ncommand: Code \nteam: Team Member \nReturn Value: \n Nothing
forEachMemberAgent \nGame: ARMA 2  (1.00) \nDescription: Executes the given command for each agent member of the team (recursively \n).  \nSyntax:  \n command forEachMemberAgent team \nParameters: \ncommand: Code \nteam: Team Member \nReturn Value: \n Nothing
forEachMemberTeam \nGame: ARMA 2  (1.00) \nDescription: Executes the given command for each team member of the team (recursively \n).  \nSyntax:  \n command forEachMemberTeam team \nParameters: \ncommand: Code \nteam: Team Member \nReturn Value: \n Nothing
format \nGame: Operation Flashpoint (1.00) \nDescription: Composes a string containing other variables or other variable types \n. \nConverts any variable type to a string. \nIf you want to convert a string back to a number, use parseNumber \n. \nSyntax:  \n String = format [formatString, var1, var2...] \nParameters: \n[formatString, var1, var2...]: Array \nformatString: String - a string containing text and/or references to the variables listed below in the array. The references appear in the form of&#160;%1,&#160;%2 etc. \nvar1: Any Value - variable referenced by&#160;%1 \nvar2: Any Value - variable referenced by&#160;%2 \n......And so on. \nReturn Value: \n String -  The full string is returned.
formation \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the current formation of a group.  \nSyntax:  \n String = formation grp \nParameters: \ngrp: Object or Group \nReturn Value: \n String -  returns either "COLUMN", "STAG COLUMN", "WEDGE", "ECH LEFT", "ECH RIGHT", "VEE" or "LINE"
formationDirection \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Return the direction in degrees of the 'unit' watching in formation \n.  \nSyntax:  \n Number = formationDirection unitName \nParameters: \nunitName: Object \nReturn Value: \n Number
formationLeader \nGame: Armed Assault (1.00) \nDescription: Return leader of the formation.  \nSyntax:  \n Object = formationLeader unitName \nParameters: \nunitName: Object \nReturn Value: \n Object
formationMembers \nGame: Armed Assault (1.00) \nDescription: Return list of units (drivers) in the formation.  \nSyntax:  \n Array = formationMembers person \nParameters: \nperson: Object \nReturn Value: \n Array
formationPosition \nGame: Armed Assault (1.00) \nDescription: Return position of unit in the formation  \nSyntax:  \n Array = formationPosition person \nParameters: \nperson: Object \nReturn Value: \n Array - format Position
formationTask \nGame: Armed Assault (1.00) \nDescription: Return the current task of the unit in the formation. \nYou can't use it in ArmA 2, it will always returns "NOTHING" \nSyntax:  \n String = formationTask person \nParameters: \nperson: Object \nReturn Value: \n String: (EXCLUDED, MOVE, COVER, LEADER)
formatText \nGame: Armed Assault (1.00) \nDescription: Creates a structured text by replacing&#160;%1,&#160;%2, etc. in format \n with plain or structured texts given as arguments.  \nSyntax:  \n Structured Text = formatText [format, arg1, arg2,...] \nParameters: \n[format, arg1, arg2,...]: Array \nformat: String \narg1, arg2,...] \nReturn Value: \n Structured Text
formLeader \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the formation leader of a given unit. This is often the same \n as the group leader, but not always, for example in cases when a unit \n is ordered to follow another unit.  \nSyntax:  \n Object = formLeader unitName \nParameters: \nunitName: Object \nReturn Value: \n Object -  the leader of the formation is returned. If used on a dead unit, the returned value is objNull
from \nGame: Armed Assault (1.00) \nDescription: Continue sequence of for var command.  \nSyntax:  \n for "_var" from b \nParameters: \nfor "_var": For Type \nb: Number \nReturn Value: \n For Type
fromEditor \nGame: ARMA 2  (1.00) \nDescription: Return if given team was inserted directly from mission editor.  \nSyntax:  \n fromEditor teamMember \nParameters: \nteamMember: Team Member \nReturn Value: \n Boolean
fuel \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Checks how much fuel is left in the gas tank of a vehicle.  \nSyntax:  \n Number = fuel vehicle \nParameters: \nvehicle: Object \nReturn Value: \n Number -  The returned number is in range 0 (empty tank) to 1 (full tank).
gearSlotData \nGame: ARMA 2  (1.00) \nDescription: Returns gear slot item name.  \nSyntax:  \n gearSlotData control \nParameters: \ncontrol: Control - \nReturn Value: \n String
getArray \nGame: Armed Assault (1.00) \nDescription: Extract array from config entry.  \nSyntax:  \n Array = getArray config \nParameters: \nconfig: Config \nReturn Value: \n Array
getBackpackCargo \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Returns all backpack types and count from the cargo space  \nSyntax:  \n result = getBackpackCargo object \nParameters: \nobject: Object - object to check \nReturn Value: \n Array
getDammage \nGame: Operation Flashpoint (1.00) \nDescription: Returns the object damage in the range from 0 to 1.    \nSyntax:  \n Number = getDammage object \nParameters: \nobject: Object \nReturn Value: \n Number
getDir \nGame: Operation Flashpoint (1.00) \nDescription: Returns the unit heading in the range from 0 to 360.  \nSyntax:  \n Number = getDir object \nParameters: \nobject: Object \nReturn Value: \n Number
getEditorCamera \nGame: ARMA 2  (1.00) \nDescription: Fetches a reference to the mission editor camera.  \nSyntax:  \n getEditorCamera map \nParameters: \nmap: Control - \nReturn Value: \n Object
getEditorMode \nGame: ARMA 2  (1.00) \nDescription: Returns the current mode of the editor.  \nSyntax:  \n getEditorMode map \nParameters: \nmap: Control - \nReturn Value: \n String
getEditorObjectScope \nGame: ARMA 2  (1.00) \nDescription: Returns the editor object scope of the specified editor object.  \nSyntax:  \n map getEditorObjectScope object \nParameters: \nmap: Control - \nobject: String - \nReturn Value: \n String
getElevationOffset \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns the map elevation offset from [map]/config.cpp. \nReturns 0 if there's no elevationOffset defined in the config of the current \n world.  \nSyntax:  \ngetElevationOffset \nReturn Value: \n Number - elevation offset of the map
getFriend \nGame: ARMA 2  (1.00) \nDescription: Returns if sides are friendly or hostile. For a value smaller than \n 0.6 it results in being enemy, otherwise it's friendly.   \nSyntax:  \n side1 getFriend side2 \nParameters: \nside1: Side \nside2: Side \nReturn Value: \n Number: Decimal value between 0.0 to 1.0
getFSMVariable \nGame: ARMA 2  (1.00) \nDescription: Return the value of variable in the variable space of given FSM. The FSM handle \n is the number returned by the execFSM command.  \nSyntax:  \n FSM handle getFSMVariable name \nParameters: \nFSM handle: Number - \nname: String - \nReturn Value: \n Any
getGroupIcon \nGame: ARMA 2  (1.00) \nDescription: Get group icon properties.  \nSyntax:  \n group getGroupIcon ID \nParameters: \ngroup: Group - \nID: Number - \nReturn Value: \n Array
getGroupIconParams \nGame: ARMA 2  (1.00) \nDescription: Returns group icons params. [color,text,scale,visible]  \nSyntax:  \n getGroupIconParams group \nParameters: \ngroup: Group - \nReturn Value: \n Array
getGroupIcons \nGame: ARMA 2  (1.00) \nDescription: Returns all group icons. [id,icon,[offsetx,offsety],[..],..]  \nSyntax:  \n getGroupIcons group \nParameters: \ngroup: Group - \nReturn Value: \n Array
getHideFrom \nGame: Armed Assault (1.00) \nDescription: Returns the Position where object believes the enemy to be, presumably \n by extrapolating the expected postion based on the last known position \n and speed of the enemy. A returned position of [0,0,0] implies that \n object does not knowAbout enemy. \nIf enemy is null it is some position in front of the object or enemy \n position.  \nSyntax:  \n Array = object getHideFrom enemy \nParameters: \nobject: Object \nenemy: Object \nReturn Value: \n Array - format Position
getMagazineCargo \nGame: ArmA 2: Operation Arrowhead (1.54) \nDescription: Returns all magazines types and count from the cargo space  \nSyntax:  \n result = getMagazineCargo object \nParameters: \nobject: Object - object to check \nReturn Value: \n Array
getMarkerColor \nBehavior: local \nGame: Operation Flashpoint (1.21) \nDescription: Returns the color of a given map marker.  \nSyntax:  \n String = getMarkerColor markerName \nParameters: \nmarkerName: String - marker name \nReturn Value: \n String -  The returned color is one of "Default", "ColorBlack", "ColorRed", "ColorRedAlpha", "ColorGreen", "ColorGreenAlpha", "ColorBlue", "ColorYellow" and "ColorWhite"
getMarkerPos \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Returns the position of a given marker. [x,y,z] \nArgument 3 (height above ground) is always zero. \nIf a non-existing marker is referenced the values returned are [0,0,0]. \nSyntax:  \n Array = getMarkerPos markerName \nParameters: \nmarkerName: String \nReturn Value: \n Array - (format Position3D)
getMarkerSize \nBehavior: local \nGame: Operation Flashpoint (1.21) \nDescription: Returns the size of a given marker.  \nSyntax:  \n Array = getMarkerSize markerName \nParameters: \nmarkerName: String \nReturn Value: \n Array -  The returned array contains two values: [a,b] where a is the size in the markers x-axis, b the size in its y-axis (in meters).
getMarkerType \nBehavior: local \nGame: Operation Flashpoint (1.21) \nDescription: Returns the type of a given marker. See cfgMarkers for a list of standard \n markers.  \nSyntax:  \nString =  getMarkerType markerName \nParameters: \nmarkerName: String \nReturn Value: \n String. See cfgMarkers. \nIf the marker does not exist, the returned type is an empty string, ie ""
getNumber \nGame: Armed Assault (1.00) \nDescription: Extract number from config entry.  \nSyntax:  \n Number =getNumber config \nParameters: \nconfig: Config \nReturn Value: \n Number
getObjectArgument \nGame: ARMA 2  (1.00) \nDescription: Return name of object argument in mission editor.  \nSyntax:  \n map getObjectArgument [object, argument] \nParameters: \nmap: Control \nobject: Object \nargument: String \nReturn Value: \n String
getObjectChildren \nGame: ARMA 2  (1.00) \nDescription: Return a list of all the children of the specified object.  \nSyntax:  \n map getObjectChildren object \nParameters: \nmap: Control - \nobject: String - \nReturn Value: \n Array
getObjectProxy \nGame: ARMA 2  (1.00) \nDescription: Return the proxy object associated with the given editor object.  \nSyntax:  \n map getObjectProxy object \nParameters: \nmap: Control - \nobject: String - \nReturn Value: \n Object
getPlayerUID \nGame: ARMA 2  (1.02) \nDescription: Return an uniqueID of the given unit as string if it's player and empty \n value if it's AI. The uniqueID may be up to 100 characters long \n and may contain numbers, uppercase letters and underscores (the value \n can be used to construct a valid variable name by appending to another \n valid variable name). \nNote: while for ArmA 2 or ArmA 2: Operation Arrowhead until version \n 1.60 the result always contains a number, it should be always handled \n as an opaque string. Converting it to a Number can cause precision \n problems, as Number cannot accurately represent integers above 16777216 \n (2^24). Moreover, game versions since ArmA 2: Operation Arrowhead \n 1.61 provide a non-numeric value as a result. \nSyntax:  \n getPlayerUID unit \nParameters: \nunit: Object \nReturn Value: \n String
getPos \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the object position in format Position.   \nSyntax:  \n Array = getPos object \nParameters: \nobject: Object; since VBS2 1.24: Location \nReturn Value: \n Array - format Position
getPosASL \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Returns the object position height above sea level.  \nSyntax:  \n Array = getPosASL object \nParameters: \nobject: Object \nReturn Value: \n Array - format PositionASL
getPosATL \nGame: ARMA 2  (1.03) \nDescription: Returns the position of an object relative to the terrain.  \nSyntax:  \n getPosATL object \nParameters: \nobject: Object \nReturn Value: \n Array - format PositionATL
getResolution \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Returns an array containing all information about resolution. \nThe returned Array is as follow: [width, height, 2D viewport width \n, 2D viewport height, aspect ratio, UI scale] \nNote: aspect ratio and UI scale are returned as coefficients and not 16:9 for example \n. \nSyntax:  \n getResolution \nReturn Value: \n Array
getSpeed \nGame: Armed Assault (1.00) \nDescription: Get the speed for the given speed mode. \nSpeedMode can be:"AUTO""SLOW""NORMAL""FAST"  \nSyntax:  \n Number = object getSpeed speedMode \nParameters: \nobject: Object \nspeedMode: String \nReturn Value: \n Number
getTerrainHeightASL \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Returns the terrain height above the sea for the given position.  \nSyntax:  \n getTerrainHeightASL position \nParameters: \nposition: Position2D \nReturn Value: \n Number
getText \nGame: Armed Assault ( 1.00) \nDescription: Extract text from config entry.   \nSyntax:  \n String = getText config \nParameters: \nconfig: Config \nReturn Value: \n String
getVariable \nGame: Armed Assault (1.00) \nDescription: Return the value of variable in the variable space of given object \n or location.  \nAll available data types combinations: Namespace getVariable String \n Namespace getVariable Array (since 1.60) Control getVariable String \n Object getVariable String Object getVariable Array Group getVariable \n String Group getVariable Array Team_Member getVariable String Team_Member \n getVariable Array Task getVariable String Location getVariable String \n \nSyntax:  \n object getVariable name \nParameters: \nobject: Object or Location \nname: String - Variable name that was defined in setVariable (Case sensitive) \nReturn Value: \n Any Value \n Returns Nothing if the variable doesn't exist. \n Returns Anything if the object is undefined. \n 
getWeaponCargo \nGame: ArmA 2: Operation Arrowhead (1.54) \nDescription: Returns all weapons types and count from the cargo space  \nSyntax:  \n result = getWeaponCargo object \nParameters: \nobject: Object - object to check \nReturn Value: \n Array
getWPPos \nBehavior: global \nGame: Operation Flashpoint (1.21) \nDescription: Returns the position of a selected waypoint of a given group. Waypoints \n include only those which were placed in the mission editor.  \nSyntax:  \n Array = getWPPos [group, index] \nParameters: \n[group, index]: Array \ngroup: Group - the group/unit, of which you want to select a waypoint \nindex: Number - 0 equals the starting position of the group. \nThe number used in this and other waypoint commands is one more than the one displayed in the waypoint window in the editor. (i.e. if the editor labeled a WP "0:MOVE" the you would have to use getWPPos [grp,1] to access this particular WP \nReturn Value: \n Array - format Position3D. The returned position equals [0,0,0], if the selected waypoint doesn't exist.
glanceAt \nGame: Armed Assault (1.00) \nDescription: Control what the unit is glancing at (target or Position). \nHow frequently the unit is glancing there depends on behaviour.  \nSyntax:  \n unit(s) glanceAt position \nParameters: \nunits: Object or Array \nposition: Object or Array \nReturn Value: \n Nothing
globalChat \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Make a unit send a text message over the global radio channel.  \nSyntax:  \n unit globalChat chatText \nParameters: \nunit: Object \nchatText: String - the message that should be sent \nReturn Value: \n Nothing
globalRadio \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Make a unit send a message over the global radio channel. The message \n is defined in the description.ext of the mission and may contain \n text and sound.  \nSyntax:  \n unit globalRadio radioName \nParameters: \nunit: Object \nradioName: String - the name of the message class in the description.ext \nReturn Value: \n Nothing
goto \nGame: Operation Flashpoint (1.00) \nDescription: In SQS scripts only: Go to given label. \nString argument is used here.Be sure to use double quotes around \n label name in goto. Define the label with #. Note that Labels are not case \n sensitive and that labels are searched for from the top of the script \n, so multiple occurrences of a label will only result in the top most \n one ever being found. \nSyntax:  \n goto label \nParameters: \nlabel: String \nReturn Value: \n Nothing
group \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the group a unit is assigned to.  \nSyntax:  \n Group = group object \nParameters: \nobject: Object \nReturn Value: \n Group -  For dead units, the returned group equals grpNull.
groupChat \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Make a unit send a text message over the group radio channel.  \nSyntax:  \n unit groupChat chatText \nParameters: \nunit: Object \nchatText: String - the message that should be sent \nReturn Value: \n Nothing
groupIconSelectable \nGame: ARMA 2  (1.00) \nDescription: Return if groups icon raises onClick and onOver events.  \nSyntax:  \n groupIconSelectable \nReturn Value: \n Boolean
groupIconsVisible \nGame: ARMA 2  (1.00) \nDescription: Return group icons are visible.  \nSyntax:  \n groupIconsVisible \nReturn Value: \n Array
groupRadio \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Make a unit send a message over the group radio channel. The message \n is defined in the description.ext of the mission and may contain \n text and sound.  \nSyntax:  \n unit groupRadio radioName \nParameters: \nunit: Object \nradioName: String - the name of the message class in the description.ext \nReturn Value: \n Nothing
groupSelectedUnits \nGame: ARMA 2  (1.00) \nDescription: Returns selected groups in sgroup.  \nSyntax:  \n groupSelectedUnits unit \nParameters: \nunit: Object - \nReturn Value: \n Array
groupSelectUnit \nGame: ARMA 2  (1.00) \nDescription: Select unit from unit's group.  \nSyntax:  \n unitName groupSelectUnit [unit, booleanValue] \nParameters: \nunitName: Object - desc \n[unit, booleanValue]: Array \nunit: Object - desc \nbooleanValue: Boolean - desc \nReturn Value: \n Nothing
grpNull \nGame: Operation Flashpoint (1.00) \nDescription: A non-existing Group. This value is not equal to anything, including \n itself.   \nSyntax:  \n Group = grpNull \nReturn Value: \n Group
gunner \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the gunner of a vehicle.  \nSyntax:  \n Object = gunner vehicle \nParameters: \nvehicle: Object \nReturn Value: \n Object -  The person sitting in the gunner place is returned. If vehicle is not a vehicle but a person, the person is returned.
halt \nGame: Armed Assault (1.00) \nDescription: Stops the program into a debugger.  \nSyntax:  \n halt \nReturn Value: \n Nothing
handsHit \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Checks if a soldier's hands are hit, which results in inaccurate \n aiming.  \nSyntax:  \n Number = handsHit unitName \nParameters: \nunitName: Object \nReturn Value: \n Number -  If the hands aren't damaged, the returned value is 0. If the hands are hit or the unit is dead, the returned value is 1.
hasInterface \nGame: ArmA 2: Operation Arrowhead (1.63) \nDescription: Returns true if the computer has an interface (a real player). False \n for a dedicated server or for a headless client.  \nSyntax:  \n hasInterface \nReturn Value: \n Boolean
hasWeapon \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Checks if a unit has the given weapon.  \nSyntax:  \n Boolean = unitName hasWeapon weaponName \nParameters: \nunitName: Object \nweaponName: String - the name of the weapon to check for. \nReturn Value: \n Boolean -  Returns true if the unit has the weapon, false if not.
hcAllGroups \nGame: ARMA 2  (1.00) \nDescription: Returns selected groups in high command.  \nSyntax:  \n hcAllGroups unit \nParameters: \nunit: Object - \nReturn Value: \n Array
hcGroupParams \nGame: ARMA 2  (1.00) \nDescription: Returns parameters describing group in high command bar. Return value \n is [string,float[4]]  \nSyntax:  \n unit hcGroupParams group \nParameters: \nunit: Object - \ngroup: Group - \nReturn Value: \n Array
hcLeader \nGame: ARMA 2  (1.00) \nDescription: Returns group's HC commander.  \nSyntax:  \n hcLeader group \nParameters: \ngroup: Group - \nReturn Value: \n Object
hcRemoveAllGroups \nGame: ARMA 2  (1.00) \nDescription: Remove all groups from unit's high command bar.  \nSyntax:  \n hcRemoveAllGroups unit \nParameters: \nunit: Object - \nReturn Value: \n Nothing
hcRemoveGroup \nGame: ARMA 2  (1.00) \nDescription: Removes group from unit's high command bar.  \nSyntax:  \n unit hcRemoveGroup group \nParameters: \nunit: Object - \ngroup: Group - \nReturn Value: \n Nothing
hcSelected \nGame: ARMA 2  (1.00) \nDescription: Returns selected groups in high command.  \nSyntax:  \n hcSelected unit \nParameters: \nunit: Object - \nReturn Value: \n Array
hcSelectGroup \nGame: ARMA 2  (1.00) \nDescription: Select given group in HC bar.  \nSyntax:  \n unit hcSelectGroup array \nParameters: \nunit: Object - \narray: Array - \nReturn Value: \n Nothing
hcSetGroup \nGame: ARMA 2  (1.00) \nDescription: Add group to unit's high command bar. Array parameters are group \n,group,name and team (teammain,teamred,teamgreen,teamblue,teamyellow \n).,Group is the only necessary parameter.  \nSyntax:  \n unit hcSetGroup array \nParameters: \nunit: Object - \narray: Array - \nReturn Value: \n Nothing
hcShowBar \nGame: ARMA 2  (1.00) \nDescription: Shows or hides HC bar. There must be some groups under hc command \n to show hc bar.  \nSyntax:  \n hcShowBar bool \nParameters: \nbool: Boolean - \nReturn Value: \n Nothing
hcShownBar \nGame: ARMA 2  (1.00) \nDescription: Return true if the HC bar is shown/active.  \nSyntax:  \n hcShownBar \nReturn Value: \n Boolean
hideBody \nGame: Armed Assault (1.00) \nDescription: Hides the body of the given person.  \nSyntax:  \n hideBody person \nParameters: \nperson: Object \nReturn Value: \n Nothing
hideObject \nBehavior: global \nGame: ARMA 2  (1.06) \nDescription: Hide entity. Can be used on soldiers and vehicles, also on static \n objects.  \nSyntax:  \n hideObject object \nParameters: \nobject: Object \nReturn Value: \n Nothing 
hint \nGame: Operation Flashpoint (1.00) \nDescription: Outputs a hint message on the left upper corner of the screen (in OFP with \n a ding sound). \nThe text may contain several lines.  \nSyntax:  \n hint text \nParameters: \ntext: String - the message to write on the screen may consist of any characters. \n indicates a line break. \nReturn Value: \n Nothing
hintC \nGame: Operation Flashpoint (1.00) \nDescription: Works the same way as hint, except the text is displayed in the middle \n of the screen. \nThe game is paused until the player presses "Continue".  \nSyntax:  \n hintC text \nParameters: \ntext: String \nReturn Value: \n Nothing
hintCadet \nGame: Operation Flashpoint (1.00) \nDescription: Shows a text hint only when using cadet mode. \nThe text can contain several lines. \n is used to indicate the end of a line \n.  \nSyntax:  \n hintCadet text \nParameters: \ntext: String \nReturn Value: \n Nothing
hintSilent \nGame: ARMA 2  (1.00) \nDescription: Same as hint, but without a sound.  \nSyntax:  \n hintSilent text \nParameters: \ntext: String or Structured Text \nReturn Value: \n Nothing
hostMission \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Host the mp mission described by config class. Should be called as reaction \n to some UI action in some dialog. \nFor example you can start a MP scenario from a button. It creates \n a host and takes you to the lobby with the scenario loaded. \nYou need to provide the display which is active when the hostMission \n command is called.  \nSyntax:  \n hostMission [Config, Display] \nParameters: \nConfig: Config \nConfig: Display \nReturn Value: \n Nothing
htmlLoad \nGame: Armed Assault (1.00) \nDescription: Load HTML from file to given control. File path is relative to current \n mission dir or an absolute path (with drive letter etc.).   \nSyntax:  \n control htmlLoad filename \nParameters: \ncontrol: Control \nfilename: String \nReturn Value: \n Nothing
if \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: The standard if, then, else construct available in many languages \n. This syntax however has alternate forms in the manner of an Array \n.if (condition) then {code} else {code}if (condition) then [ {code \n},{code} ] \nResult of the Code executed is returned as the result to this command \n (which may be Nothing}. \nSyntax:  \n Anything = if (condition) then {Code} else {Code} \nAnything = if (condition) then  [ {ThenCode} , {ElseCode} ] \nParameters: \ncondition: Boolean expression. If it evaluates as 'true', the 'then' clause is executed.  Otherwise, the 'else' clause (if present) is executed. \nReturn Value: \n If Type - Predicate which will execute 1st or 2nd option when used. This predicate is used in then or exitWith commands.
image \nGame: Armed Assault (1.00) \nDescription: Creates a structured text containing the given image.   \nSyntax:  \n Structured Text = image filename \nParameters: \nfilename: String \nReturn Value: \n Structured Text
importAllGroups \nGame: ARMA 2  (1.00) \nDescription: Imports all groups into the RTE.  \nSyntax:  \n importAllGroups map \nParameters: \nmap: Control - \nReturn Value: \n Nothing
importance \nGame: Armed Assault (1.08) \nDescription: Returns a location's importance value. \nSyntax:  \n importance location \nParameters: \nlocation: Location \nReturn Value: \n Number
in \nGame:  () \nDescription:  \nSyntax: 
inflame \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Control fireplace burning. Set inflame to true (on) or false (off).  \nSyntax:  \n fireplace inflame burn \nParameters: \nfireplace: Object \nburn: Boolean \nReturn Value: \n Nothing
inflamed \nBehavior: global \nGame: Operation Flashpoint (1.04) \nDescription: Check if fireplace is inflamed (burning) or not.  \nSyntax:  \n Boolean = inflamed fireplace \nParameters: \nfireplace: Object \nReturn Value: \n Boolean
inGameUISetEventHandler \nGame: Armed Assault (1.00) \nDescription: Sets given event handler of in-game UI.  \nSyntax:  \n inGameUISetEventHandler [handler name, function] \nParameters: \n[handler name, function]: Array \nReturn Value: \n Nothing
inheritsFrom \nGame: Armed Assault (1.00) \nDescription: Returns base entry of config entry.   \nSyntax:  \n Config = inheritsFrom config \nParameters: \nconfig: Config \nReturn Value: \n Config
initAmbientLife \nGame: Armed Assault (1.00) \nDescription: Initialize the ambient life.  \nSyntax:  \n initAmbientLife \nReturn Value: \n Nothing
inputAction \nGame: ARMA 2  (1.00) \nDescription: Return the state of input devices mapped to given input action (see Category \n:Key Actions for action names).   \nSyntax:  \n inputAction name \nParameters: \nname: String - name of the action \nReturn Value: \n Number
insertEditorObject \nGame: ARMA 2  (1.00) \nDescription: Insert an object to the editor and assign arguments. Create script \n is,not called. Returns the ID of the new EditorObject. Subtype class \n is,optional.   \nSyntax:  \n map insertEditorObject [type,value,[name1,value1,...],subtype class] \nParameters: \nmap: Control - \n[name1,value1,...],subtype class]: Array - \nReturn Value: \n String
intersect \nGame: Armed Assault (1.00) \nDescription: Find named selections in object which is in specified lod intersected \n by given section of a line. Return value is in the form of [selection \n, number]. Multiple returned arrays are nested within a single array \n, and no intersection will return an empty array."LodName" is one of: "FIRE \n", "VIEW", "GEOM", "IFIRE" \nSyntax:  \n Array = [object, lodName] intersect [begin, end] \nParameters: \n[object, lodName]: Array \nobject: Object \nlodName: String \n[begin, end]: Array \nbegin: Array - format Position3D \nend: Array - format Position3D \nReturn Value: \n Array
isAgent \nGame: ARMA 2  (1.00) \nDescription: Check if team member is an agent.  \nSyntax:  \n isAgent teamMember \nParameters: \nteamMember: Team Member \nReturn Value: \n Boolean
isArray \nGame: Armed Assault (1.00) \nDescription: Check if config entry represents array.   \nSyntax:  \n Boolean =  isArray config \nParameters: \nconfig: Config \nReturn Value: \n Boolean
isAutoHoverOn \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Return true if vehicle has enabled auto hover. (always returns false \n if the vehicle can't set auto hover)  \nSyntax:  \n isAutoHoverOn vehicle \nParameters: \nvehicle: Object \nReturn Value: \n Boolean
isClass \nGame: Armed Assault (1.00) \nDescription: Check if config entry represents config class.   \nSyntax:  \n Boolean = isClass config \nParameters: \nconfig: Config \nReturn Value: \n Boolean
isDedicated \nGame: ARMA 2  (1.00) \nDescription: Return true if the machine (executing the command) is a dedicated \n server.  \nSyntax:  \n isDedicated \nReturn Value: \n Boolean
isEngineOn \nBehavior: global \nGame: Operation Flashpoint: Resistance (1.9) \nDescription: Returns true if engine is on, false if it is off.  \nSyntax:  \n Boolean = isEngineOn vehicle \nParameters: \nvehicle: Object \nReturn Value: \n Boolean
isFlatEmpty \nGame: ARMA 2  (1.00) \nDescription: Check if given area is flat and empty.  \nSyntax:  \n position isFlatEmpty [float minDistance,float precizePos,float maxGradient,float gradientRadius,float onWater,bool onShore,object skipobj] \nParameters: \nposition: Array - \n[float minDistance,float precizePos,float maxGradient,float gradientRadius,float onWater,bool onShore,object skipobj]: Array - \nReturn Value: \n Array
isForcedWalk \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns true if player is forced to walk.  \nSyntax:  \n isForcedWalk unitName \nParameters: \nunitName&#160;: Object \nReturn Value: \n Boolean
isFormationLeader \nGame: Armed Assault (1.00) \nDescription: Returns true if the specified unit is subgroup leader.  \nSyntax:  \n isLeader = isFormationLeader unit \nParameters: \nunit: Object - Unit being checked. \nReturn Value: \n isLeader: Boolean - True if subgroup leader.
isHidden \nGame: Armed Assault (1.00) \nDescription: Return whether the person is hidden (reached the hiding position \n).  \nSyntax:  \n Boolean = isHidden person \nParameters: \nperson: Object \nReturn Value: \n Boolean
isKeyActive \nGame: Armed Assault (1.00) \nDescription: Checks whether the given key is active in the current user profile \n. \nSee keys, keysLimit and doneKeys in the description.ext file of the missions \n.  \nSyntax:  \n isKeyActive keyName \nParameters: \nkeyName: String \nReturn Value: \n Boolean
isKindOf \nGame: Armed Assault (1.00) \nDescription: Checks whether the object is (a subtype) of the given type.  \nSyntax:  \n Boolean = object isKindOf typeName \nParameters: \nobject: Object \ntypeName: String \nReturn Value: \n Boolean 
isManualFire \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns true if manual fire is on. \nAlways returns false for a soldier.  \nSyntax:  \n isManualFire vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n Boolean
isMarkedForCollection \nGame: Armed Assault (1.00) \nDescription: Checks whether the object is marked for weapons collection.  \nSyntax:  \n  Boolean = isMarkedForCollection object \nParameters: \nobject: Object \nReturn Value: \n Boolean
isMultiplayer \nGame: ARMA 2  (1.00) \nDescription: Return true if multiPlayer.  \nSyntax:  \n isMultiplayer \nReturn Value: \n Boolean
isNil \nGame: Armed Assault (1.00) \nDescription: Tests whether the variable defined by the String argument is undefined \n, or whether an expression result passed as Code is undefined. The function \n returns true if the variable is undefined or the expression result \n undefined (i.e. the expression result is Void), and false in all other \n cases.  \nSyntax:  \n Boolean = isnil variable \nParameters: \nvariable: String or Code \nReturn Value: \n Boolean
isNull \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Checks whether the tested item is Null. \nWhich null type the item has to be equal to depends on the type of object \n tested: \n Objects -&gt; objNull Controls -&gt; controlNull Displays -&gt; displayNull \n Groups -&gt; grpNull Locations -&gt; locationNull (since ARMA 2) Tasks \n -&gt; taskNull (since ARMA 2) Team Members -&gt; teamMemberNull \n (since ARMA 2) \nNote: A test via == does not work, because, for example, objNull \n is not equal to anything, not even to itself.  \nSyntax:  \n isNull obj \nParameters: \nobj: Object, Control, Display, Group (or Location, Task, Team Member, since ARMA 2) \nReturn Value: \n Boolean
isNumber \nGame: Armed Assault (1.00) \nDescription: Check if config entry represents number.   \nSyntax:  \n Boolean = isNumber config \nParameters: \nconfig: Config \nReturn Value: \n Boolean
isOnRoad \nGame: ARMA 2  (1.00) \nDescription: Check whether given position is on road.  \nSyntax:  \n isOnRoad position or object \nParameters: \nposition or object: Object or Array - \nReturn Value: \n Boolean
isPlayer \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Check if given person is a human player.   \nSyntax:  \n isPlayer person \nParameters: \nperson: Object \nReturn Value: \n Boolean
isRealTime \nGame: ARMA 2  (1.00) \nDescription: Returns true if the mission editor is operating in real time mode \n.  \nSyntax:  \n isRealTime map \nParameters: \nmap: Control - \nReturn Value: \n Boolean
isServer \nGame: Armed Assault (1.06) \nDescription: Returns true if the machine is either a server in a multiplayer game \n or if it is running a singleplayer game.  \nSyntax:  \n Boolean = isServer \nReturn Value: \n Boolean
isShowing3DIcons \nGame: ARMA 2  (1.00) \nDescription: Returns true if the editor is set to draw 3D icons.  \nSyntax:  \n isShowing3DIcons map \nParameters: \nmap: Control - \nReturn Value: \n Boolean
isText \nGame: Armed Assault (1.00) \nDescription: Check if config entry represents text.   \nSyntax:  \n Boolean = isText config \nParameters: \nconfig: Config \nReturn Value: \n Boolean
isWalking \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns true if walk is toggled.  \nSyntax:  \n isWalking unitName \nParameters: \nunitName: Object \nReturn Value: \n Boolean
items \nGame: ARMA 2  (1.00) \nDescription: Returns an array of names of all special items of a vehicle or a soldier \n.  \nSyntax:  \n items unit \nParameters: \nunit: Object - \nReturn Value: \n Array
join \nBehavior: local \nGame: Operation Flashpoint (1.34) \nDescription: Join all units in the array to given group.  \nMaximum number of group members is: OFP: 12 Arma:&#160;? Arma2:&#160;? VBS2 \n: "unlimited" (260+) \nTo have a group member leave a group, join him with the grpNull group \n (e.g. [guy1] join grpNull)  \nSyntax:  \n unitArray join group \nParameters: \nunitArray: Array \ngroup: Group or Object \nReturn Value: \n Nothing
joinAs \nGame: ARMA 2  (1.00) \nDescription: Joins the unit to the given group, if position id is available, this \n one is used.   \nSyntax:  \n unit joinAs [group, id] \nParameters: \nunit: Object \n[group, id]: Array \ngroup: Group \nid: Number \nReturn Value: \n Nothing
joinAsSilent \nGame: ARMA 2  (1.00) \nDescription: Joins the unit to the given group, if position id is available, this \n one is used. Avoid any radio communication related to joining.  \nSyntax:  \n unit joinAsSilent [group, id] \nParameters: \nunit: Object \n[group, id]: Array \ngroup: Group \nid: Number \nReturn Value: \n Nothing
joinSilent \nBehavior: local \nGame: Armed Assault (1.06) \nDescription: Join all units in the array to given group silently (without radio \n message).  \nSyntax:  \n unitArray joinSilent group \nParameters: \nunitArray: Array \ngroup: Object or Group \nReturn Value: \n Nothing
kbAddDatabase \nGame: ARMA 2  (1.00) \nDescription: Register knowledge base database to given person. \nSyntax:  \n Boolean = person kbAddDatabase filename \nParameters: \nperson: Object \nfilename: String \nReturn Value: \n Boolean
kbAddDatabaseTargets \nGame: ARMA 2  (1.00) \nDescription: Register target list knowledge base database to given person. \nSyntax:  \n Boolean = person kbAddDatabaseTargets filename \nParameters: \nperson: Object \nfilename: String \nReturn Value: \n Boolean
kbAddTopic \nGame: ARMA 2  (1.00) \nDescription: Register conversation topic to given person. \nSyntax:  \n person kbAddTopic [TopicName, filename.bikb, (filename.fsm, (event_handler))] \nParameters: \nperson: Object \n[TopicName, filename.bikb, (filename.fsm, (event_handler))]: Array \nTopicName: String - \nfilename.bikb: String - Must exist. bikb file name. \nfilename.fsm: String - Optional. Can be empty string. fsm file name \nevent_handler: Code or String - Optional. New to Arma2. \nThe event handler receives parameters: \n_sentenceId: the sentence as defined in the.bikb file \n_topic: TopicName registered via kbAddTopic \n_this: the person that was talked to (receiver) \n_from: the person that talked to the receiver and triggered the script \nReturn Value: \n Nothing
kbHasTopic \nGame: ARMA 2  (1.00) \nDescription: Check if conversation topic was registered to given person. \nSyntax:  \n Boolean = person kbHasTopic TopicName \nParameters: \nperson: Object \nTopicName: String \nReturn Value: \n Boolean
kbReact \nGame: ARMA 2  (1.00) \nDescription: Pass a non-verbal communication to the receiver.   \nSyntax:  \n person kbReact [receiver,topic,sentence id,[argument name,argument value,argument text,argument speech],...] \nParameters: \nperson:  - \n[receiver,topic,sentence id,[argument name,argument value,argument text,argument speech],...]: Array - \nReturn Value: \n Nothing
kbRemoveTopic \nGame: ARMA 2  (1.00) \nDescription: Unregister conversation topic from given person. \nSyntax:  \n person kbRemoveTopic TopicName \nParameters: \nperson: Object \nTopicName: String \nReturn Value: \n Nothing
kbTell \nGame: ARMA 2  (1.00) \nDescription: Make the person tell to the receiver the sentence.  \nSyntax:  \n person kbTell [receiver, TopicName, SentenceClass, [argument name, argument value, argument text, argument speech],...{,forceRadio}] \nParameters: \nperson: Object \n[receiver, TopicName, SentenceClass, [argument name, argument value, argument text, argument speech],...{,forceRadio}]: Array \nreceiver: Object \nTopicName, SentenceClass, argument name: Strings \nargument value: Code \nargument text: String \nargument speech is an array of Strings, where each string is an already defined word in configs. \nforceRadio (optional): Boolean \nReturn Value: \n Nothing
kbWasSaid \nGame: ARMA 2  (1.00) \nDescription: Check if given item was said by person to someone.   \nSyntax:  \n person kbWasSaid [receiver,topic,sentence id,max. age] \nParameters: \nperson: Person - who said the item \n[receiver,topic,sentence id,max. age]: Array \nreceiver: Person - receiver of the sentence \ntopic: String - name of the topic used in kbAddTopic \nmax. age: Number - time in seconds. kbWasSaid will check whether the sentence was said in last max. age seconds \nReturn Value: \n Boolean
keyImage \nGame: Armed Assault (1.00) \nDescription: Returns a structured text, containing an image or name (if no image \n is found) of the button, on the keyboard, mouse or joystick, with \n the given code.  \nSyntax:  \nStructured Text =  keyImage dikcode \nParameters: \ndikCode: Number \nReturn Value: \n Structured Text
keyName \nGame: Armed Assault (1.00) \nDescription: Returns the name of a button (on the keyboard, mouse or joystick \n) with the given code.  \nSyntax:  \n String = keyName dikCode \nParameters: \ndikCode: Number \nReturn Value: \n String
knowsAbout \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Check if (and by how much) unit knows about target. If unit is vehicle \n, vehicle commander is considered.  \nSyntax:  \n Number = unit knowsAbout target \nParameters: \nunit: Object or Group \ntarget: Object \nReturn Value: \n Number (from 0 to 4)
land \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Force helicopter landing. Landing mode may be:  "LAND" (complete \n stop) "GET IN" (hovering very low, for another unit to get in) "GET OUT" (hovering \n low,for another unit to get out) "NONE" (cancel a landing) Available \n since ArmA 2 57463 build. \nSyntax:  \n helicopter land mode \nParameters: \nhelicopter: Object \nmode: String \nReturn Value: \n Nothing
landAt \nGame: Armed Assault (1.08) \nDescription: Order an AI airplane to land at a given airport. ID is the number \n to identify which airport on the island you want.  \nSyntax:  \n plane landAt id \nParameters: \nplane: Object \nid: Number \nReturn Value: \n Nothing
landResult \nGame: ARMA 2  (1.00) \nDescription: Return the result of helicopter landing position searching (performed \n, after land command). The value can be "Found" (position found),"NotFound \n" (position not found), "NotReady" (position searching is,still in progress \n) or empty string when wrong argument given.   \nSyntax:  \n landResult helicopter \nParameters: \nhelicopter: Object - \nReturn Value: \n String
laserTarget \nBehavior: local \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns target created by given unit (gunner in vehicle or on foot \n).  \nSyntax:  \n laserTarget unitName \nParameters: \nunitName: Object \nReturn Value: \n Object
lbAdd \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Adds an item with the given text to the listbox or combobox with \n id idc of the topmost user dialog. \nIt returns the index of the newly added item.  \nSyntax:  \n Number = lbAdd [idc, text] \nParameters: \n[idc, text]: Array \nidc: Number of control \ntext: String \nReturn Value: \n Number 
lbClear \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Clear all items in listbox or combobox with id idc of topmost user \n dialog.  \nSyntax:  \n lbClear idc \nParameters: \nidc: Number \nReturn Value: \n Nothing 
lbColor \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Returns the text color of the item with the given index of the listbox \n or combobox with id idc of the topmost user dialog. \nThe color is returned in format Color.  \nSyntax:  \nlbColor [idc, index] \nParameters: \n[idc, index]: Array \nidc: Number of control \nindex: Number \nReturn Value: \n Array - format Color 
lbCurSel \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Returns the index of the selected item of the listbox or combobox \n with id idc of the topmost user dialog.  \nSyntax:  \n Number = lbCurSel idc \nParameters: \nidc: Number \nReturn Value: \n Number 
lbData \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Returns the additional text (invisible) in an item with the given \n index of the listbox or combobox with id idc of the topmost user \n dialog.  \nSyntax:  \n String = lbData [idc, index] \nParameters: \n[idc, index]: Array \nidc: Number of control \nindex: Number \nReturn Value: \n String 
lbDelete \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Removes the item with the given index from the listbox or combobox \n with id idc of the topmost user dialog.  \nSyntax:  \n lbDelete [idc, index] \nParameters: \n[idc, index]: Array \nidc: Number of control \nindex: Number \nReturn Value: \n Nothing 
lbIsSelected \nGame: Armed Assault (1.00) \nDescription: Check whether given row of the given listbox is selected.  \nSyntax:  \n Boolean = control lbIsSelected index \nParameters: \ncontrol: Control \nindex: Number \nReturn Value: \n Boolean
lbPicture \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Returns the picture name of the item with the given index of the listbox \n or combobox with id idc of the topmost user dialog.  \nSyntax:  \n lbPicture [idc, index] \nParameters: \n[idc, index]: Array \nidc: Number of control \nindex: Number \nReturn Value: \n String 
lbSelection \nGame: Armed Assault (1.00) \nDescription: Returns the array of selected rows indices in the given listbox  \nSyntax:  \n Array = lbSelection control \nParameters: \ncontrol: Control \nReturn Value: \n Array
lbSetColor \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Sets the color of the item with the given index of the listbox or combobox \n with id idc of the topmost user dialog to color. \nColour is in format Color.  \nSyntax:  \n lbSetColor  [idc, index, color] \nParameters: \n[idc, index, color]: Array \nidc: Number of control \nindex: Number \ncolor: Color \nReturn Value: \n Nothing 
lbSetCurSel \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Selects the item with the given index of the listbox or combobox \n with id idc of the topmost user dialog.  \nSyntax:  \n lbSetCurSel [idc, index] \nParameters: \n[idc, index]: Array \nidc: Number of control \nindex: Number \nReturn Value: \n Nothing 
lbSetData \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Sets the additional text (invisible) in the item with the given index \n of the listbox or combobox with id idc of the topmost user dialog \n to the given data.   \nSyntax:  \n lbSetData [idc, index, data] \nParameters: \n[idc, index, data]: Array \nidc: Number of control \nindex: Number \ndata: String \nReturn Value: \n Nothing 
lbSetPicture \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Sets the picture in the item with the given index of the listbox \n or combobox with id idc of the topmost user dialog. \nName is the picture name. \nThe picture is searched for in the mission directory, the dtaExt \n subdirectory of the campaign directory and the dtaExt directory \n and the data bank (or directory).  \nSyntax:  \n lbSetPicture [idc, index, name] \nParameters: \n[idc, index, name]: Array \nidc: Number of control \nindex: Number \nname: String \nReturn Value: \n Nothing 
lbSetSelected \nGame: Armed Assault (1.00) \nDescription: Set the selection state of the given row of the given listbox. \nListbox must support multiple selection.  \nSyntax:  \n control lbSetSelected [index, selected] \nParameters: \ncontrol: Control \n[index, selected]: Array \nindex: Number \nselected: Boolean \nReturn Value: \n Nothing
lbSetValue \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Sets the additional integer value in the item with the given index \n of the listbox or combobox with id idc of the topmost user dialog \n to the given value.  \nSyntax:  \n lbSetValue [idc, index, value] \nParameters: \n[idc, index, value]: Array \nidc: Number of control \nindex: Number \nvalue: Number \nReturn Value: \n Nothing 
lbSize \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Return number of items of listbox or combobox with id idc of topmost \n user dialog.  \nSyntax:  \n lbSize idc \nParameters: \nidc: Number \nReturn Value: \n Number 
lbSort \nGame: Armed Assault (1.08) \nDescription: Sorts listbox entries alphabetical by their text.  \nSyntax:  \n lbSort control \nParameters: \ncontrol: Control \nReturn Value: \n Nothing
lbSortByValue \nGame: Armed Assault (1.08) \nDescription: Sorts the Listbox Entries by their assigned Values. \nThe Entries getting listed by their Negativity (most negative Value \n on Top). \nAlso note that this Command will mix up the Entries randomly if multiple \n Entries have the same Value.  \nSyntax:  \n lbSortByValue control \nParameters: \ncontrol: Given Control \nReturn Value: \n Nothing
lbText \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Returns the shown text in the item with the given index of the listbox \n or combobox with id idc of the topmost user dialog.  \nSyntax:  \n lbText [idc, index] \nParameters: \n[idc, index]: Array \nidc: Number of control \nindex: Number \nReturn Value: \n String 
lbValue \nBehavior: local \nGame: Operation Flashpoint (1.5) \nDescription: Returns the additional integer value in the item with the given index \n of the listbox or combobox with id idc of the topmost user dialog \n.  \nSyntax:  \nlbValue [idc, index] \nParameters: \n[idc, index]: Array \nidc: Number of control \nindex: Number \nReturn Value: \n Number 
leader \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Returns the group leader for the given unit or group. For dead units \n, objNull is returned.   \nSyntax:  \n Object = leader unitName \nParameters: \nunitName: Object or Group \nReturn Value: \n Object
leaveVehicle \nBehavior: local \nGame: ARMA 2  (1.00) \nDescription: Ceases the using of the vehicle by either a unit or a group. It unassigns \n them from the vehicle.   \nSyntax:  \n group leaveVehicle vehicle \nParameters: \ngroup: Object or Group \nvehicle: Object \nReturn Value: \n Nothing
libraryCredits \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns the credits for the libraries used by the game.  \nSyntax:  \n libraryCredits \nReturn Value: \n Array - [array1, array2, (..), arrayN] all under the form [libraryName, credits] \n
libraryDisclaimers \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns the library disclaimers.  \nSyntax:  \n libraryDisclaimers \nReturn Value: \n Array - [array1] - only has one element at the moment, but this number might grow \n
lifeState \nBehavior: global \nGame: ARMA 2  (1.00) \nDescription: Returns the life state of the given unit. \nCan be one of:"ALIVE""UNCONSCIOUS""DEAD"  \nSyntax:  \n lifeState unit \nParameters: \nunit: Object \nReturn Value: \n String
lightAttachObject \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Attach light to given object at given position on object.  \nSyntax:  \n light lightAttachObject [object, position] \nParameters: \nlight: Object \n[object, position]: Array \nobject: Object \nposition: Array - format Position \nReturn Value: \n Nothing
lightDetachObject \nGame: Armed Assault (1.00) \nDescription: Detach light from object.  \nSyntax:  \n lightDetachObject light \nParameters: \nlight: Object \nReturn Value: \n Nothing
lightIsOn \nGame: Operation Flashpoint (1.04) \nDescription: Check if lampost is on (shining). Possible values are:  "ON" "OFF" "AUTO \n" (auto is only on during the night). \nSyntax:  \n lightIsOn lamppost \nParameters: \nlamppost: Object \nReturn Value: \n String
limitSpeed \nGame: Armed Assault (1.00) \nDescription: Limit speed of given vehicle or person to given value (in km/h).  \nSyntax:  \n objectName limitSpeed speed \nParameters: \nobjectName: Object \nspeed: Number \nReturn Value: \n Nothing
lineBreak \nGame: Armed Assault (1.00) \nDescription: Creates a structured text containing a line break.  \nSyntax:  \n Structured Text = lineBreak \nReturn Value: \n
lineIntersects \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Checks for object intersection with a virtual line between two positions \n. Returns true if intersects with an object.  \nSyntax:  \n lineIntersects [begPos, endPos, objIgnore1, objIgnore2] \nParameters: \nbegPos: PositionASL \nendPos: PositionASL \nobjIgnore1: (optional) Object - object to ignore. When testing intersection from an object/unit/vehicle, pass that object here to prevent intersection inside of the object. \nobjIgnore2: (optional) Object - another object to ignore. When testing intersection of a line between two objects, pass the second object here to prevent interesection inside of it being reported \nReturn Value: \n Boolean - true if intersection
lineIntersectsWith \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns objects intersecting with the virtual line from begPos to endPos \n.  \nSyntax:  \n lineIntersectsWith [begPos, endPos, objIgnore1, objIgnore2, sortByDist] \nParameters: \nbegPos: PositionASL \nendPos: PositionASL \nobjIgnore1: (optional) Object - object to ignore. When testing intersection from an object/unit/vehicle, pass that object here to prevent intersection inside of the object. \nobjIgnore2: (optional) Object - another object to ignore. When testing intersection of a line between two objects, pass the second object here to prevent interesection inside of it being reported \nsortByDist: (optional) Boolean - sort intersecting objects by distance \nReturn Value: \n Array - intersecting objects
list \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: List of units that would activate given Trigger. \nIt returns nothing before the simulation strted, i.e. in (undelayed \n) init.sqf files or in VBS OME. Returns a pointer to the trigger \n's list after the simulation started. \nSince this is just a reference this means that the value in your \n local variable will change as the content of the trigger area changes \n. To permanently copy the returned list to a different variable, use _mylist \n = +(list triggerOne). \nThe second example can be used inside the trigger (in that case, no need \n to name your trigger). \nFor trigger of type "Not present" the list is the same as that returned \n for "present".  \nSyntax:  \nArray =  list trigger \nParameters: \ntrigger: Object \nReturn Value: \n Array or Nothing
listObjects \nGame: ARMA 2  (1.00) \nDescription: Return the list of all objects of given type.  \nSyntax:  \n map listObjects type \nParameters: \nmap: Control - \ntype: String - \nReturn Value: \n Array
ln \nGame: Operation Flashpoint (1.00) \nDescription: Natural logarithm of x.  \nSyntax:  \nNumber =  ln x \nParameters: \nx: Number \nReturn Value: \n Number
lnbAddArray \nGame: ARMA 2  (1.00) \nDescription: Adds list of rows of strings.  \nSyntax:  \n lnbAddArray [IDC,[[[text,text],[value,..],[data,..]],[[text,text],[value,..],[data,..]],]] \nParameters: \n[IDC,[[[text,text],[value,..],[data,..]],[[text,text],[value,..],[data,..]],]]: Array - \nReturn Value: \n Number
lnbAddColumn \nGame: ARMA 2  (1.00) \nDescription: Adds an item with the given text to the given listbox or combobox \n. It returns the index of the newly added item.  \nSyntax:  \n control lnbAddColumn position \nParameters: \ncontrol: Control - \nposition: Number - \nReturn Value: \n Number
lnbAddRow \nGame: ARMA 2  (1.00) \nDescription: Adds an row of strings.  \nSyntax:  \n lnbAddRow [idc,[text,text,...]] \nParameters: \n[idc,[text,text,...]]: Array - \nReturn Value: \n Number
lnbClear \nGame: ARMA 2  (1.00) \nDescription: Clears all items in the 2D listbox.  \nSyntax:  \n lnbClear idc \nParameters: \nidc: Number - \nReturn Value: \n Nothing
lnbColor \nGame: ARMA 2  (1.00) \nDescription: Returns the text color of the item with the given position of the 2D listbox \n. The color is returned in format Color.  \nSyntax:  \n lnbColor [idc,[row,column] \nParameters: \n[idc,[row,column]: Array - \nReturn Value: \n Array
lnbCurSelRow \nGame: ARMA 2  (1.00) \nDescription: Returns the index of the selected row id 2D listbox.  \nSyntax:  \n lnbCurSelRow idc \nParameters: \nidc: Number - \nReturn Value: \n Number
lnbData \nGame: ARMA 2  (1.00) \nDescription: Returns the additional text (invisible) in an item with the given \n position of the 2D listbox.  \nSyntax:  \n lnbData [idc,[row,column] \nParameters: \n[idc,[row,column]: Array - \nReturn Value: \n String
lnbDeleteColumn \nGame: ARMA 2  (1.00) \nDescription: Removes column with given index.  \nSyntax:  \n lnbDeleteColumn [idc,index] \nParameters: \n[idc,index]: Array - \nReturn Value: \n Nothing
lnbDeleteRow \nGame: ARMA 2  (1.00) \nDescription: Removes row with the given index from the given listbox or combobox \n.  \nSyntax:  \n control lnbDeleteRow row \nParameters: \ncontrol: Control - \nrow: Number - \nReturn Value: \n Nothing
lnbGetColumnsPosition \nGame: ARMA 2  (1.00) \nDescription: Returns the columns position in 2D listbox.  \nSyntax:  \n lnbGetColumnsPosition idc \nParameters: \nidc: Number - \nReturn Value: \n Array
lnbPicture \nGame: ARMA 2  (1.00) \nDescription: Returns the picture name of the item with the given position of the 2D listbox \n.  \nSyntax:  \n lnbPicture [idc, [row, column]] \nParameters: \n[idc, [row, column]]: Array \nIDC: Identifier Number of Control \nRow: Index Number of Row \nColumn: Index Number of Column \nReturn Value: \n String 
lnbSetColor \nGame: ARMA 2  (1.00) \nDescription: Sets the color of the item with the given position of the 2D listbox \n. Color is in format Color.  \nSyntax:  \n lnbSetColor [idc,[row,column],color] \nParameters: \n[idc,[row,column],color]: Array - \nReturn Value: \n Nothing
lnbsetColumnsPos \nGame: ARMA 2  (1.00) \nDescription: Sets the additional text (invisible) in the item with the given position \n of the 2D listbox.  \nSyntax:  \n lnbsetColumnsPos [idc,[row,column],data] \nParameters: \n[idc,[row,column],data]: Array - \nReturn Value: \n Nothing
lnbSetCurSelRow \nGame: ARMA 2  (1.00) \nDescription: Selects the row with the given index of the 2D listbox.  \nSyntax:  \n lnbSetCurSelRow [idc,index] \nParameters: \n[idc,index]: Array - \nReturn Value: \n Nothing
lnbSetData \nGame: ARMA 2  (1.00) \nDescription: Sets the additional text (invisible) in the item with the given position \n of the 2D listbox.  \nSyntax:  \n lnbSetData [idc,[row,column],data] \nParameters: \n[idc,[row,column],data]: Array - \nReturn Value: \n Nothing
lnbSetPicture \nGame: ARMA 2  (1.00) \nDescription: Sets the picture in the item with the given position of the 2D listbox \n.,Name is the picture name. The picture is searched in the mission \n,directory,the dtaExt subdirectory of the campaign directory and the,dtaExt \n directory and the data bank (or directory).   \nSyntax:  \n lnbSetPicture [idc, [row, column], name] \nParameters: \n[idc, [row, column], name]: Array - \nReturn Value: \n Nothing
lnbSetText \nGame: ARMA 2  (1.00) \nDescription: Sets the additional text (invisible) in the item with the given position \n of the 2D listbox.  \nSyntax:  \n lnbSetText [idc,[row,column],data] \nParameters: \n[idc,[row,column],data]: Array - \nReturn Value: \n Nothing
lnbSetValue \nGame: ARMA 2  (1.00) \nDescription: Sets the additional integer value in the item with the position index \n of the 2D listbox.  \nSyntax:  \n lnbSetValue [idc,[row,column],value] \nParameters: \n[idc,[row,column],value]: Array - \nReturn Value: \n Nothing
lnbSize \nGame: ARMA 2  (1.00) \nDescription: Returns size of 2D listbox as [rows, columns].  \nSyntax:  \n lnbSize idc \nParameters: \nidc: Number - \nReturn Value: \n [rows, columns]: Array
lnbText \nGame: ARMA 2  (1.00) \nDescription: Returns the shown text in the item with the given position of the given \n 2D listbox.  \nSyntax:  \n control lnbText [row,column] \nParameters: \ncontrol: Control - \n[row,column]: Array - \nReturn Value: \n String
lnbValue \nGame: ARMA 2  (1.00) \nDescription: Returns the additional integer value in the item with the given position \n of the 2D listbox.  \nSyntax:  \n lnbValue [idc,[row,column] \nParameters: \n[idc,[row,column]: Array - \nReturn Value: \n Number
loadFile \nGame: Operation Flashpoint: Resistance (1.90) \nDescription: Return content of given filename.  \nSyntax:  \n String = loadFile filename \nParameters: \nfilename: String \nReturn Value: \n String
loadGame \nGame: ARMA 2  (1.00) \nDescription: Load a game from the autosave,if failed,restart the mission.  \nSyntax:  \n loadGame \nReturn Value: \n Nothing
loadIdentity \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Loads person's identity from Objects.sav file in campaign directory \n (from entry name).  \nSyntax:  \n person loadIdentity name \nParameters: \nperson: Object \nname: String \nReturn Value: \n Boolean
loadMagazine \nGame: ArmA 2: Operation Arrowhead (1.60) \nDescription: Initiates the loading action on given weapon of the turret. So the new magazine \n is not available instantly, yet according to the reloadTime. \nThe turret has to be manned. One can also change the magazine if its respective \n weapon is not selected.  \nSyntax:  \n vehicle loadMagazine [turretPath, weaponName, magazineName] \nParameters: \nvehicle: Object \nturretPath: Array \nweaponName: String \nmagazineName: String \nReturn Value: \n Nothing
loadOverlay \nGame: ARMA 2  (1.00) \nDescription: Creates the load overlay dialog for the specified type of overlay \n.  \nSyntax:  \n map loadOverlay config \nParameters: \nmap: Control - \nconfig: Config - \nReturn Value: \n Nothing
loadStatus \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Loads object's properties from Objects.sav file in campaign directory \n (from entry name).  \nSyntax:  \n Boolean = Object loadStatus "EntryName" \nParameters: \nObject \nEntryName: String \nReturn Value: \n Boolean
local \nGame: Operation Flashpoint (1.00) \nDescription: Check if given unit is local on the computer in Multiplayer games \n (see Locality in Multiplayer for general concepts). \nThis can be used when some activation fields or scripts need to be performed \n only on one computer. In Singleplayer all objects are local.  \nNote: All static objects are local everywhere.  \nSyntax:  \n Boolean = local object \nParameters: \nobject: Object \nReturn Value: \n Boolean
localize \nGame: Operation Flashpoint (1.00) \nDescription: Used to internationalise text messages. \nA string is returned from Stringtable.csv which corresponds to the stringName \n.  \nSyntax:  \n localize stringName \nParameters: \nstringName: String \nReturn Value: \n String found in corresponding entry in stringtable.csv
locationNull \nGame: ARMA 2  (1.00) \nDescription: A non-existing location. This value is not equal to anything, including \n itself.  \nSyntax:  \n locationNull \nReturn Value: \n Location
locationPosition \nGame: Armed Assault (1.08) \nDescription: Returns the position of a location. If the location is attached to an object \n, that object's position is returned.  \nSyntax:  \n locationPosition Location \nParameters: \nLocation \nReturn Value: \n Position
lock \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Lock vehicle (disable mounting / dismounting) for player.  \nSyntax:  \n vehicleName lock lock \nParameters: \nvehicleName: Object \nlock: Boolean \nReturn Value: \n Nothing
lockCargo \nGame: ARMA 2  (1.00) \nDescription: Lock the all cargo positions of the vehicle.  \nSyntax:  \n vehicle lockCargo lock or vehicle lockCargo [index, lock] \nParameters: \nvehicle: Object - \nlock: Boolean - \nindex: Number \nReturn Value: \n Nothing
lockDriver \nBehavior: local \nGame: ARMA 2  (1.00) \nDescription: Lock the driver position of the vehicle.  \nSyntax:  \n vehicle lockDriver lock \nParameters: \nvehicle: Object - \nlock: Boolean - \nReturn Value: \n Nothing
locked \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Check if vehicle is locked for Persons. If it is locked, Persons \n cannot mount / dismount without order.  \nSyntax:  \n Boolean = locked vehicle \nParameters: \nvehicle: Object \nReturn Value: \n Nothing
lockedCargo \nGame: ARMA 2  (1.00) \nDescription: Check whether cargo position of the vehicle is locked.  \nSyntax:  \n vehicle lockedCargo cargo index \nParameters: \nvehicle: Object - \ncargo index: Number - \nReturn Value: \n Boolean
lockedDriver \nGame: ARMA 2  (1.00) \nDescription: Check whether driver position of the vehicle turret is locked.  \nSyntax:  \n lockedDriver vehicle \nParameters: \nvehicle: Object - \nReturn Value: \n Boolean
lockedTurret \nGame: ARMA 2  (1.00) \nDescription: Check whether gunner position of the vehicle turret is locked.  \nSyntax:  \n vehicle lockedTurret turret path \nParameters: \nvehicle: Object - \nturret path: Array - \nReturn Value: \n Boolean
lockTurret \nGame: ARMA 2  (1.00) \nDescription: Lock the gunner position of the vehicle turret.  \nSyntax:  \n vehicle lockTurret [turret path,lock] \nParameters: \nvehicle: Object - \n[turret path,lock]: Array - \nReturn Value: \n Nothing
lockWp \nGame: ARMA 2  (1.00) \nDescription: Disables switching to the next waypoint (the current waypoint will \n never complete while lockWp is used). This is sometimes used during \n cut-scenes.   \nSyntax:  \ngroupName lockWp lockWP \nParameters: \ngroupName: Object or Group \nlockWP: Boolean \nReturn Value: \n Nothing
log \nGame: Operation Flashpoint (1.00) \nDescription: Base-10 logarithm of x.  \nSyntax:  \n Number = log x \nParameters: \nx: Number \nReturn Value: \n Number
lookAt \nGame: Armed Assault (1.00) \nDescription: Control what the unit(s) is/are looking at (target or position).  \nSyntax:  \n unit(s) lookAt position \nParameters: \nunit(s): Object or Array \nposition: Object or Array \nReturn Value: \n Nothing
lookAtPos \nGame: ARMA 2  (1.00) \nDescription: Center the map on,and point the camera at,the position.  \nSyntax:  \n map lookAtPos position \nParameters: \nmap: Control - \nposition: Array - \nReturn Value: \n Nothing
magazines \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Returns array of type names of all a vehicles (soldier unit is also \n a vehicle) magazines.  \nSyntax:  \n magazines vehicle \nParameters: \nvehicle: Object \nReturn Value: \n Array
magazinesTurret \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.52) \nDescription: Returns all magazines of given turret. Use turret path [-1] for driver \n's turret.  \nSyntax:  \n vehicle magazinesTurret turretPath \nParameters: \nvehicle: Object \nturretPath: Array \nReturn Value: \n Array of Strings
mapAnimAdd \nBehavior: local \nGame: Operation Flashpoint (1.27) \nDescription: Add next frame to map animation. Format of frame is [time, zoom, position \n], format of position is Position2D.  \nSyntax:  \n mapAnimAdd [time, zoom, position] \nParameters: \n[time, zoom, position]: Array \ntime: Number \nzoom: Number \nposition: Array - format Position2D \nReturn Value: \n Nothing
mapAnimClear \nBehavior: local \nGame: Operation Flashpoint (1.27) \nDescription: Clear map animation.  \nSyntax:  \n mapAnimClear \nReturn Value: \n Nothing
mapAnimCommit \nBehavior: local \nGame: Operation Flashpoint (1.27) \nDescription: Play map animation.  \nSyntax:  \n mapAnimCommit \nReturn Value: \n Nothing
mapAnimDone \nBehavior: local \nGame: Operation Flashpoint (1.27) \nDescription: Check if map animation is finished.  \nSyntax:  \n Boolean = mapAnimDone \nReturn Value: \n Boolean
mapCenterOnCamera \nGame: ARMA 2  (1.02) \nDescription: Enable/disable continuous centering the map on the camera position \n.  \nSyntax:  \n control mapCenterOnCamera enable \nParameters: \ncontrol: Control - \nenable: Boolean - \nReturn Value: \n Nothing
mapGridPosition \nGame: ARMA 2  (1.04) \nDescription: Returns the map grid position of an object or position. The format \n is determined by the Grid format specified in the CfgWorlds for the current \n world. Eg: "024577" or "De82" or similar.  \nSyntax:  \n mapGridPosition param \nParameters: \nparam: Object or Position - determines reference position \nReturn Value: \n String - grid position
markerAlpha \nGame: ARMA 2  (1.00) \nDescription: Gets the marker alpha. See setMarkerAlpha.  \nSyntax:  \n markerAlpha markerName \nParameters: \nmarkerName: String - \nReturn Value: \n Number
markerBrush \nGame: ARMA 2  (1.00) \nDescription: Gets the marker brush. See setMarkerBrush.  \nSyntax:  \n markerBrush name \nParameters: \nname: String - \nReturn Value: \n String
markerColor \nGame: Operation Flashpoint (1.5) \nDescription: Get marker colour. See setMarkerColor. Note: This function is identical \n to getMarkerColor.  \nSyntax:  \n String = markerColor markerName \nParameters: \nmarkerName: String \nReturn Value: \n String
markerDir \nGame: Armed Assault (1.04) \nDescription: Get marker direction.  \nSyntax:  \n Number = markerDir markerName \nParameters: \nmarkerName: String \nReturn Value: \n Number
markerPos \nGame: Operation Flashpoint (1.5) \nDescription: Get marker Position. Note: This function is identical to getMarkerPos \n.  \nSyntax:  \n Array = markerPos markerName \nParameters: \nmarkerName: String \nReturn Value: \n Array - format Position
markerShape \nGame: ARMA 2  (1.00) \nDescription: Gets the marker shape. See setMarkerShape for a list of strings that \n can be returned.  \nSyntax:  \n markerShape name \nParameters: \nname: String - \nReturn Value: \n String
markerSize \nGame: Operation Flashpoint (1.5) \nDescription: Get marker size. Note: This function is identical to getMarkerSize \n.  \nSyntax:  \n Array = markerSize markerName \nParameters: \nmarkerName: String \nReturn Value: \n Array
markerText \nGame: Armed Assault (1.04) \nDescription: Get marker text.  \nSyntax:  \n String = markerText markerName \nParameters: \nmarkerName: String \nReturn Value: \n String
markerType \nGame: Operation Flashpoint (1.5) \nDescription: Get type of marker. Note: This function is identical to getMarkerType \n. See cfgMarkers for a list of standard markers.  \nSyntax:  \n String = markerType markerName \nParameters: \nmarkerName: String \nReturn Value: \n String. See cfgMarkers.
max \nGame: Armed Assault (1.00) \nDescription: The greater of a,b  \nSyntax:  \n Number = a max b \nParameters: \na: Number \nb: Number \nReturn Value: \n Number
members \nGame: ARMA 2  (1.00) \nDescription: Return a list of members in given team.  \nSyntax:  \n members team \nParameters: \nteam: Team Member \nReturn Value: \n Array
min \nGame: Armed Assault (1.00) \nDescription: The smaller of a,b  \nSyntax:  \n a min b \nParameters: \na: Number \nb: Number \nReturn Value: \n Number
missionConfigFile \nGame: Armed Assault (1.00) \nDescription: Return root of mission description.ext entries hierarchy.  \nSyntax:  \nConfig = missionConfigFile \nReturn Value: \n Config
missionName \nGame: Operation Flashpoint: Resistance (1.8) \nDescription: Return currently loaded mission file (path to mission.pbo, relative \n to game exe). \nSyntax:  \n String = missionName \nReturn Value: \n String
missionNamespace \nGame: ARMA 2  (1.00) \nDescription: Return the global namespace attached to mission.  \nSyntax:  \n missionNamespace \nReturn Value: \n Namespace
missionStart \nGame: Operation Flashpoint: Resistance (1.8) \nDescription: Return when mission started in format [year, month, day, hour, minute \n, second]. \nWorks only in multiplayer, in singleplayer all values are equal to zero \n &#8594; [0,0,0,0,0,0] \nSyntax:  \n Array = missionStart \nReturn Value: \n Array
mod \nGame: Operation Flashpoint (1.00) \nDescription: Remainder of a divided by b.   \nSyntax:  \n Number = a mod b \nParameters: \na: Number \nb: Number \nReturn Value: \n Number
modelToWorld \nGame: Armed Assault (1.00) \nDescription: Converts position from object model space to world space.  \nSyntax:  \n Array = object modelToWorld modelPos \nParameters: \nobject: Object \nmodelPos: Array \nReturn Value: \n Array
moonIntensity \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns the intensity of the moon's brightness.  \nSyntax:  \n Number = moonIntensity \nReturn Value: \n Number
morale \nGame: ARMA 2  (1.00) \nDescription: Checks a current morale level of the unit (-1..+1).  \nSyntax:  \n morale unit \nParameters: \nunit:  - \nReturn Value: \n Number
move \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Creates a move waypoint on given position (format Position or Position2D \n) and makes it an actual group waypoint.  \nSyntax:  \n group move position \nParameters: \ngroup: Object or Group \nposition: Array - format Position \nReturn Value: \n Nothing
moveInCargo \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Move soldier into vehicle cargo position (Immediate, no animation \n).  \nSyntax:  \n unitName moveInCargo vehicle \nParameters: \nunitName: Object \nvehicle: Object \nReturn Value: \n Nothing 
moveInCommander \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Move soldier into vehicle commander position (Immediate, no animation \n).  \nSyntax:  \n unitName moveInCommander vehicle \nParameters: \nunitName: Object \nvehicle: Object \nReturn Value: \n Nothing
moveInDriver \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Move soldier into vehicle driver position (Immediate, no animation \n).  \nSyntax:  \n unitName moveInDriver vehicle \nParameters: \nunitName: Object \nvehicle: Object \nReturn Value: \n Nothing
moveInGunner \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Move soldier into vehicle gunner position (Immediate, no animation \n).  \nSyntax:  \n unitName moveInGunner vehicle \nParameters: \nunitName: Object \nvehicle: Object \nReturn Value: \n Nothing
moveInTurret \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Moves the soldier into the vehicle's turret. (Immediately, without \n animation). \nturret path is an array of positions inside a turret, or positions \n inside a turret of a turret. \n[0,0] means first turret of first turret. \n[1,0] means second turret of first turret. \n[0,1] means first turret of the second turret. \n[0,2] means first turret of third turret. \n[1] means second turret (without turrets in that turret). \nAnd so on...  \nSyntax:  \n unitName moveInTurret [vehicle, turret path] \nParameters: \nunitName: Object \n[vehicle, turret path]: Array \nvehicle: Object \nturret path: Array - see Description. \nReturn Value: \n Nothing
moveObjectToEnd \nGame: ARMA 2  (1.00) \nDescription: Shifts an editor object to the end of the objects array. This means \n,that the object will be drawn last (after all other objects).   \nSyntax:  \n map moveObjectToEnd object \nParameters: \nmap: Control - \nobject: String - \nReturn Value: \n Nothing
moveOut \nBehavior: global \nGame: ARMA 2  (1.00) \nDescription: Moves the soldier out of vehicle. (Immediately,without animation \n).  \nSyntax:  \n moveOut soldier \nParameters: \nsoldier: Object - \nReturn Value: \n Nothing
moveTime \nGame: ARMA 2  (1.00) \nDescription: Returns the current time of the most important RTM animation currently \n being played on the soldier.  \nSyntax:  \n moveTime soldier \nParameters: \nsoldier:  - \nReturn Value: \n Number
moveTo \nGame: Armed Assault (1.00) \nDescription: Low level command to person to move to given position.  \nSyntax:  \n person moveTo position \nParameters: \nperson: Object \nposition: Array \nReturn Value: \n Nothing
moveToCompleted \nGame: Armed Assault (1.00) \nDescription: Check if latest low level moveTo command is finished.  \nSyntax:  \nBoolean = moveToCompleted person \nParameters: \nperson: Object \nReturn Value: \n Boolean
moveToFailed \nGame: Armed Assault (1.00) \nDescription: Check if latest low level moveTo command failed.  \nSyntax:  \n Boolean = moveToFailed person \nParameters: \nperson: Object \nReturn Value: \n Boolean
musicVolume \nGame: Operation Flashpoint (1.00) \nDescription: Checks the current music volume (set by fadeMusic)  \nSyntax:  \n Number = musicVolume \nReturn Value: \n Number
name \nGame: Operation Flashpoint (1.00) \nDescription: The name given to a unit using the setIdentity instruction or selected \n randomly by the game engine if setIdentity has not been used on the unit \n. \nIf used on vehicle, name of first crew member (in order commander \n, driver, gunner). \nIf used on an object, "Error: No unit" is being returned.  \nSyntax:  \n String = name object \nParameters: \nobject: Object \nReturn Value: \n String
nearEntities \nGame: ARMA 2  (1.00) \nDescription: Find entities in the circle with given radius. If typeName(s) is (are) given \n, only entities of given type (or its subtype) are listed.  \nSyntax:  \n position nearEntities radius or [typeName,radius] or [[typeName1,typeName2,...],radius] \nParameters: \nposition: Object or Array - \n[typeName,radius] or [[typeName1,typeName2,...],radius]: Array - \nReturn Value: \n Array
nearestBuilding \nGame: Operation Flashpoint (1.00) \nDescription: Nearest building to given object.  \nA "building" is defined as an object that is of class "House", and contains \n a path LOD.  \nSyntax:  \n Object = nearestBuilding object \nParameters: \nobject: Object \nReturn Value: \n Object
nearestLocation \nGame: Armed Assault (1.08) \nDescription: Return the closest location of specified class to a given position \n. \nChecked range is unlimited (i.e. covers the whole map).  \nSyntax:  \n Location = nearestLocation [position, locationClass] \nParameters: \n[position, locationClass]: Array \nposition: Array \nlocationClass: String of a location class name. \nReturn Value: \n Location
nearestLocations \nGame: Armed Assault (1.08) \nDescription: Returns an array of locations of chosen type(s) within the given \n radius of the given position, sorted from nearest to farthest.  \nSyntax:  \n Array = nearestLocations [position, [locationType,...], radius] \nParameters: \n[position, [locationType,...], radius]: Array \nposition: Array - format Position \n[locationType,...]: Array An array of location type name strings \nradius: Number The maximum distance from the given position that returned locations may be, in meters. \nReturn Value: \n Array of locations
nearestLocationWithDubbing \nGame: ARMA 2  (1.00) \nDescription: Find the nearest location (to the given position) having it speech \n non-empty.  \nSyntax:  \n nearestLocationWithDubbing position \nParameters: \nposition: Array - \nReturn Value: \n Location
nearestObject \nGame: Operation Flashpoint (1.00) \nDescription: Nearest object of given type to given position within a range of 50 meters \n. \nIf class types are used in the filter, then in Arma any object derived \n from the type is found as well. In OFP, only objects with exactly \n the type given are found. \nSyntax:  \n nearestObject filter \nParameters: \nfilter: Array - Can be one of the following: \n[x,y,z]: Any objects near position \n[[x,y,z], "type"]: Objects of class "type" near position [x,y,z] \n[object, "type"]: Objects of class "type" near position of "object" \n \nReturn Value: \n Object - Found object, or objNull if nothing in range. 
nearestObjects \nGame: Armed Assault (1.00) \nDescription: Returns a list of nearest objects of the given types to the given \n position or object, within the specified distance. \nposition can use the format: \n[[x,y,z], ["ClassName",...], radius] \nor \n[object, ["ClassName",...], radius] \n \nTo use it without any ClassName filter: \n[object or position, [], radius]. \n \nA list of ClassName types (Tanks eg) can be found in CfgVehicles \n \nIf more than one object is found they will be ordered according to their \n distance (i.e. the closest one will be first in the array). \nSyntax:  \n objects = nearestObjects [position, types, radius]; \nParameters: \nposition: Array or Object - Where to find objects, center position. \ntypes: Array - List of class name of the objects to search for. \nradius: Number - Range from center position to search for objects. \nReturn Value: \n Array
nearObjects \nGame: Armed Assault (1.00) \nDescription: Find objects in the circle with given radius. \nIf typeName is given, only objects of given type (or its subtype \n) are listed. \nThe first object in the returned array is not necessarily the closest \n one (like it is in nearestObjects for example).  \nSyntax:  \n position nearObjects radius or [typeName, radius] \nParameters: \nposition: Array - format Position \n[typeName, radius]: Array \ntypeName: String \nradius: Number \nReturn Value: \n Array
nearObjectsReady \nGame: ARMA 2  (1.00) \nDescription: Check whether all data are loaded to nearObjects will return in reasonable \n time.  \nSyntax:  \n position nearObjectsReady radius \nParameters: \nposition: Object or Array - \nradius: Number - \nReturn Value: \n Boolean
nearRoads \nGame: ARMA 2  (1.00) \nDescription: Find the road segments within the circle of given radius.  \nSyntax:  \n pos nearRoads radius \nParameters: \npos: Array or Object - Position or object \nradius: Number - \nReturn Value: \n Array
nearTargets \nGame: Armed Assault (1.07) \nDescription: Returns a list of targets within the defined range. \n"Targets" are not restricted to enemy units.  \nSyntax:  \n Array = unit nearTargets range \nParameters: \nunit: Object \nrange: Number \nReturn Value: \n Nested Array, consisting of:0: Position (perceived, includes judgment and memory errors),1: Type (perceived, gives only what was recognized),2: Side (perceived side),3: Subjective Cost (positive for enemies, more positive for more important or more dangerous  \nenemies),4: Object (object type, can be used to get more information if needed)5: (since build 5209:) position accuracy (assumed accuracy of the perceived position) \nfor each recognized target
needReload \nGame: Armed Assault (1.00) \nDescription: Return how much vehicle wants to reload its weapons.  \nSyntax:  \n Number =  needReload vehicle \nParameters: \nvehicle: Object \nReturn Value: \n Number
newOverlay \nGame: ARMA 2  (1.00) \nDescription: Creates the new overlay dialog for the specified type of overlay \n.  \nSyntax:  \n map newOverlay config \nParameters: \nmap: Control - \nconfig: Config - \nReturn Value: \n Nothing
nextMenuItemIndex \nGame: ARMA 2  (1.00) \nDescription: Returns the next available menu item index.  \nSyntax:  \n nextMenuItemIndex map \nParameters: \nmap: Control - \nReturn Value: \n Number
nextWeatherChange \nGame: Armed Assault (1.00) \nDescription: Return the remaining time (in seconds) over which the current weather \n change will occur. When a weather change finishes, the game engine \n will automatically generate a new random weather change over a realistic \n time period (minimum of 90 minutes). \nSyntax:  \n Number = nextWeatherChange \nReturn Value: \n Number
nil \nGame: Operation Flashpoint (1.00) \nDescription: Nil value. This value can be used to undefine existing variables \n.  \nSyntax:  \n nil \nReturn Value: \n Any Value
nMenuItems \nGame: ARMA 2  (1.00) \nDescription: Returns the total number of user-added menu items belonging to the given \n menu.  \nSyntax:  \n map nMenuItems menu index \nParameters: \nmap: Control - \nmenu index:  - \nReturn Value: \n Number
not \nGame: Operation Flashpoint (1.00) \nDescription: not a. \nExactly the same as ! a  \nSyntax:  \n Boolean = not a \nParameters: \na: Number \nReturn Value: \n Boolean
NumberToDate \nGame: ARMA 2  (1.00) \nDescription: Convert float number to date.  \nSyntax:  \n NumberToDate [year,time] \nParameters: \n[year,time]: Array - \nReturn Value: \n Array
objNull \nGame: Operation Flashpoint (1.00) \nDescription: A non-existing Object. This value is not equal to anything, including \n itself.  \nSyntax:  \n Object = objNull \nReturn Value: \n Object
objStatus \nGame: Operation Flashpoint (1.00) \nDescription: Sets the status of an objective that was defined in briefing.html \n. \nStatus may be one of: "ACTIVE" "FAILED" "DONE" "HIDDEN" \nTo refer to an objective that is named "OBJ_1", for example, use only \n the index number in this command (i.e. "1" objStatus "HIDDEN"). \nSyntax:  \n objectivenumber objStatus status \nParameters: \nobjectivenumber: String \nstatus: String \nReturn Value: \n Nothing
onBriefingGroup \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Select a sound declared in the Description.ext of the mission to be played \n the first time the Group tab is selected in the briefing.  \nSyntax:  \n onBriefingGroup soundName \nParameters: \nsoundName: String \nReturn Value: \n Nothing
onBriefingNotes \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Select a sound declared in the Description.ext of the mission to be played \n the first time the Notes tab is selected in the briefing.  \nSyntax:  \n onBriefingNotes soundName \nParameters: \nsoundName: String \nReturn Value: \n Nothing
onBriefingPlan \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Select a sound declared in the Description.ext of the mission to be played \n the first time the Plan tab is selected in the briefing.  \nSyntax:  \n onBriefingPlan soundName \nParameters: \nsoundName: String \nReturn Value: \n Nothing
onBriefingTeamSwitch \nGame: Armed Assault (1.00) \nDescription: Select a sound declared in the Description.ext of the mission to be played \n the first time the TeamSwitch tab is selected in the briefing.  \nSyntax:  \n onBriefingTeamSwitch soundName \nParameters: \nsoundName: String \nReturn Value: \n Nothing
onCommandModeChanged \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed when command mode change. Command receives \n,_isHighCommand bool  \nSyntax:  \n onCommandModeChanged command \nParameters: \ncommand:  - \nReturn Value: \n Nothing
onDoubleClick \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed when the user double clicks on the map. Command \n receives:,_pos array position,_units array selected units,_shift \n,_alt bool key state,   \nSyntax:  \n map onDoubleClick command \nParameters: \nmap: Control - \ncommand: String - \nReturn Value: \n Any
onEachFrame \nGame: ArmA 2: Operation Arrowhead (1.63) \nDescription: Statement is run every frame. \nSyntax:  \n onEachFrame statement \nParameters: \nstatement: Code \nReturn Value: \n Nothing
onGroupIconClick \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed when palyer clicked on group marker (3D or in a map)  \nSyntax:  \n onGroupIconClick command \nParameters: \ncommand:  - \nReturn Value: \n Nothing
onGroupIconOverEnter \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed when player clicked on group marker (3D or in a map)  \nSyntax:  \n onGroupIconOverEnter command \nParameters: \ncommand:  - \nReturn Value: \n Nothing
onGroupIconOverLeave \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed when palyer clicked on group marker (3D or in a map)  \nSyntax:  \n onGroupIconOverLeave command \nParameters: \ncommand:  - \nReturn Value: \n Nothing
onHCGroupSelectionChanged \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed when HC group has been selected. Command \n receives,_group group selected group,_isSelected bool new selection \n state  \nSyntax:  \n onHCGroupSelectionChanged command \nParameters: \ncommand:  - \nReturn Value: \n Nothing
onMapSingleClick \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Define action performed when user clicks in map by executing command \n string. \nthe string receives 3 (localised in scope) variables: _pos: Array \n - Clicked position _units: Array - Units which were selected (via function \n keys) before opening the map (may be non-functional in Arma) _shift \n, _alt Boolean - Whether &lt;Shift&gt; or &lt;Alt&gt; were pressed \n when clicking on the map \nWhen click is processed, code should ultimately return true back \n to the engine. If false is returned, default processing by the game \n engine is done. Return value of any other type (including Nothing \n) is an error. In such case default processing by the game engine \n is done, and error message may be displayed. \nThe code is executed on every click, until the Command is removed \n via onMapSingleClick "", orreplaced by onMapSingleClick "SomeOtherCommand \n(s)" \nSyntax:  \n onMapSingleClick command \nParameters: \ncommand: String \nReturn Value: \n Nothing
onPlayerConnected \nGame: Armed Assault (1.00) \nDescription: This statement is launched whenever a player is connected to a MP session \n.  \n Variables _id and _name are set, in theory _id being the session \n id number as seen in #userlist.  \nNote that as of 1.08, this command only accepts a code-string rather \n than code delimited by braces. \nNote as of ArmA 2 version 1.02 this function returns also variable \n _uid with uniqueID of player. \nAs of version Arma2 1.04, _id will return a number in float format \n, something like 1.4253e+10.  \n_id is the Unique DirectPlay ID of player, and there are some conversions \n between DirectPlay floats and Arma Engine numbers. \nSyntax:  \n onPlayerConnected statement \nParameters: \nstatement: String \nReturn Value: \n Nothing
onPlayerDisconnected \nGame: Armed Assault (1.00) \nDescription: This statement is launched whenever a player is disconnected from \n a MP session.  \nVariables _id and _name are set.  \nNote that as of 1.08, this command only accepts a code-string rather \n than code delimited by braces.  \nNote as of ArmA 2 version 1.02 this function returns also variable \n _uid with uniqueID of player. \nSyntax:  \n onPlayerDisconnected statement \nParameters: \nstatement: String \nReturn Value: \n Nothing
onPreloadFinished \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed after the preload screen finished.  \nSyntax:  \n onPreloadFinished command \nParameters: \ncommand: String or Code \nReturn Value: \n Nothing
onPreloadStarted \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed just before the preload screen started \n.  \nSyntax:  \n onPreloadStarted command \nParameters: \ncommand: String or Code \nReturn Value: \n Nothing
onShowNewObject \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed when the user right clicks on the map and,selects \n New Object. Set to empty for default behavior. Command receives \n:,_pos array position,   \nSyntax:  \n map onShowNewObject command \nParameters: \nmap: Control - \ncommand: String - \nReturn Value: \n Any
onTeamSwitch \nGame: ARMA 2  (1.00) \nDescription: Defines an action performed when the team switch is finished. Command \n receives: _from object previous unit, _to object current unit.  \nSyntax:  \n onTeamSwitch command \nParameters: \ncommand:  - \nReturn Value: \n Nothing
openDSInterface \nGame: ARMA 2  (1.05) \nDescription: Open MP interface.  \nSyntax:  \n openDSInterface \nReturn Value: \n Nothing
openMap \nGame: ARMA 2  (1.03) \nDescription: Show player's map. If forced, cannot be closed.  \nSyntax:  \n openMap show \nParameters: \nshow: Boolean \nReturn Value: \n Boolean 
or \nGame: Operation Flashpoint (1.00) \nDescription: Returns true only if one or both conditions are true. In case of the alternative \n syntax, lazy evaluation is used (if left operand is true, evaluation \n of the right side is skipped completely). \nIdentical to: a  ||  b  \nSyntax:  \n Boolean = a or b \nParameters: \na: Boolean - Test condition or variable that returns Boolean. \nb: Boolean - Test condition or variable that returns Boolean. \nReturn Value: \n Boolean 
orderGetIn \nGame: Operation Flashpoint (1.00) \nDescription: Force all units in the array to get in or out of their assigned vehicles \n. Units must be assigned to a vehicle before this command will do anything \n.  \nSyntax:  \n unitArray orderGetIn order \nParameters: \nunitArray: Array \norder: Boolean \nReturn Value: \n Nothing
overcast \nGame: Armed Assault (1.00) \nDescription: Return the current overcast level. Zero is clear skies, one is maximum \n cloud cover.  \nSyntax:  \n Number = overcast \nReturn Value: \n Number
overcastForecast \nGame: Armed Assault (1.00) \nDescription: Return the overcast forecast.  \nSyntax:  \n Number = overcastForecast \nReturn Value: \n Number
owner \nGame: ARMA 2  (1.00) \nDescription: On server machine,return the ID of the client where the object is local \n. Otherwise return 0.  \nSyntax:  \n owner object \nParameters: \nobject: Object - \nReturn Value: \n Number
parseNumber \nGame: Armed Assault (1.00) \nDescription: Parse string containing real number.  \nSyntax:  \n Number = parseNumber string \nParameters: \nstring: String \nReturn Value: \n Number
parseText \nGame: Armed Assault (1.00) \nDescription: Creates a structured text by parsing the given XML description.  \nSyntax:  \n Structured Text = parseText text \nParameters: \ntext: String \nReturn Value: \n Structured Text
parsingNamespace \nGame: ARMA 2  (1.00) \nDescription: Return the global namespace attached to config parser.  \nSyntax:  \n parsingNamespace \nReturn Value: \n Namespace
pi \nGame: Operation Flashpoint (1.00) \nDescription: pi (180 degrees converted to Radians).  \nSyntax:  \n Number = pi \nReturn Value: \n Number
pickWeaponPool \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Transfer weapons and magazines from cargo of object into weapon pool \n (used in campaign to transfer weapons into next mission).  \nSyntax:  \n pickWeaponPool object \nParameters: \nobject: Object \nReturn Value: \n Nothing
playableUnits \nGame: ARMA 2  (1.00) \nDescription: Return a list of playable units (occupied by both AI or players) in a multiplayer \n game.  \nSyntax:  \n playableUnits \nReturn Value: \n Array
playAction \nGame: ARMA 2  (1.00) \nDescription: When used on a person, a smooth transition to the given action will \n be initiated.  \nSyntax:  \n soldier playAction action \nParameters: \nsoldier: Object - \naction: String - \nReturn Value: \n Nothing
playActionNow \nGame: ARMA 2  (1.00) \nDescription: When used on a person, a smooth transition to the given action will \n be initiated, but all previous playAction are discarded. Unlike \n playAction, playActionNow is automatically executed on all clients \n.  \nSyntax:  \n soldier playActionNow action \nParameters: \nsoldier: Object - \naction: String - \nReturn Value: \n Nothing
player \nGame: Operation Flashpoint (1.00) \nDescription: Person controlled by player. \nIn MP this value is different on each computer. \nIn Intros and Outros this isn't set by default and must be assigned \n.  \nSyntax:  \n Object = player \nReturn Value: \n Object
playerRespawnTime \nGame: Armed Assault (1.00) \nDescription: Return the player remaining time to respawn.   \nSyntax:  \n Number =  playerRespawnTime \nReturn Value: \n Number
playerSide \nGame: Armed Assault (1.00) \nDescription: Returns the player's side. This is valid even when the player controlled \n person is dead (a difference from side player).  \nSyntax:  \n Side = playerSide \nReturn Value: \n Side
playersNumber \nGame: Operation Flashpoint: Resistance (1.8) \nDescription: Return count of players playing on given side. Works only in multiplayer \n, in singleplayer always returns 0.  \nSyntax:  \n Number =  playersNumber side \nParameters: \nside: Side \nReturn Value: \n Number
playGesture \nGame: ARMA 2  (1.00) \nDescription: When used on a person,a smooth transition to the given move will \n be initiated.  \nSyntax:  \n soldier playGesture moveName \nParameters: \nsoldier:  - \nObject,moveName:  - \nReturn Value: \n Nothing
playMission \nGame: Armed Assault (1.00) \nDescription: The mission is launched (from the main menu). Both campaign and mission \n are given as their directory name. If the campaign is empty, a single \n mission is launched. If skipBriefing is true, the intro and briefing \n are skipped.  \nSyntax:  \n playMission [campaign, mission] or [campaign, mission, skipBriefing] \nParameters: \n[campaign, mission] or [campaign, mission, skipBriefing]: Array \ncampaign: String \nmission: String \nskipBriefing: Boolean - Optional \nReturn Value: \n Nothing
playMove \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: When used on person, smooth transition to given move will be done \n.  \nSyntax:  \n unitName playMove moveName \nParameters: \nunitName: Object \nmoveName: String \nReturn Value: \n Nothing
playMoveNow \nGame: ARMA 2  (1.00) \nDescription: When used on a person,a smooth transition to the given move will \n be initiated, but all previous playMove are discarded.  \nSyntax:  \n soldier playMoveNow moveName \nParameters: \nsoldier: Object - \nmoveName: String - \nReturn Value: \n Nothing
playMusic \nGame: Operation Flashpoint (1.00) \nDescription: Plays music defined in CfgMusic.   \nSyntax:  \n playMusic name \nParameters: \nname&#160;: String \nReturn Value: \nNothing  
playScriptedMission \nGame: ARMA 2  (1.00) \nDescription: Load the given world,launch an empty mission and execute the given \n,expression. Config (optional) can reference to the config entry \n,replacing description.ext for this mission.   \nSyntax:  \n playScriptedMission [world,expression,config] \nParameters: \n[world,expression,config]: Array - \nReturn Value: \n Nothing
playSound \nGame: Operation Flashpoint (1.00) \nDescription: selects Sound from CfgSounds declared in the Description.ext file \n.   \nSyntax:  \n playSound soundName \nParameters: \nsoundName: String \nReturn Value: \n Nothing 
position \nGame: Operation Flashpoint (1.5) \nDescription: Synonym for getPos.  \nSyntax:  \n Array = position object \nParameters: \nobject: Object; since VBS2 1.24: Location \nReturn Value: \n Array - format Position
positionCameraToWorld \nGame: Armed Assault (1.00) \nDescription: Transform position from camera coordinate space to world coordinate \n space.  \nSyntax:  \n Array = positionCameraToWorld position \nParameters: \nposition: Array - format Position \nReturn Value: \n Array
posScreenToWorld \nGame: Armed Assault (1.00) \nDescription: Convert screen coordinates in map to world coordinates.  \nSyntax:  \n map posScreenToWorld [x, y] \nParameters: \nmap&#160;: Control \n[x, y]: Array - format Position2D \nReturn Value: \n Array (Position2D Format)
posWorldToScreen \nGame: Armed Assault (1.00) \nDescription: Convert world coordinates to screen coordinates in map.  \nSyntax:  \n map posWorldToScreen position \nParameters: \nmap&#160;: Control \nposition&#160;: Array - format Position2D \nReturn Value: \n Array (Position2D Format)
ppEffectAdjust \nGame: ARMA 2  (1.00) \nDescription: Set post process effect parameters  \nSyntax:  \n effect ppEffectAdjust settings \nParameters: \neffect: String or Number - where string is effect name or number is ppEffect handle. \nsettings: Array \nReturn Value: \n Nothing
ppEffectCommit \nGame: ARMA 2  (1.00) \nDescription: Commit post process effect in given time.  \nSyntax:  \n effect ppEffectCommit duration \nParameters: \neffect: String or Number - where string is effect name or number is ppEffect handle. \nduration: Number \nReturn Value: \n Nothing
ppEffectCommitted \nGame: ARMA 2  (1.00) \nDescription: Check whether given post process effect is committed  \nSyntax:  \n ppEffectCommitted effect \nParameters: \neffect: String \nReturn Value: \n Boolean
ppEffectCreate \nGame: ARMA 2  (1.00) \nDescription: Create post process effect specified by effect name and priority \n. \nSee class CfgOpticsEffect for examples using: "radialBlur" "chromAberration \n" "wetDistortion" "colorCorrections" "dynamicBlur" "filmGrain" "colorInversion \n" \n \n \nSyntax:  \n ppEffectCreate effect \nParameters: \neffect: [name, priority] \nname: String - name of effect type. \npriority: Number - unique priority \nReturn Value: \n Number - handle
ppEffectDestroy \nGame: ARMA 2  (1.00) \nDescription: Destroy post process effect given by handle.  \nSyntax:  \n ppEffectDestroy effect \nParameters: \neffect: Array or Number - \nReturn Value: \n Nothing
ppEffectEnable \nGame: ARMA 2  (1.00) \nDescription: Enable / disable post process effect  \nSyntax:  \n effect ppEffectEnable enable \nParameters: \neffect: String or Number - where string is effect name or number is ppEffect handle. \nenable: Boolean \nReturn Value: \n Nothing
precision \nGame: Armed Assault (1.00) \nDescription: Return the precision of the given entity.  \nSyntax:  \n Number = precision entity \nParameters: \nentity: Object \nReturn Value: \n Number
preloadCamera \nGame: Armed Assault (1.00) \nDescription: Preload all textures and models around given Position to avoid visual \n artifacts after camera is moved. \nShould be used before any abrupt camera change/cut. \nReturns true once all data is ready.  \nSyntax:  \n Boolean = preloadCamera position \nposition: Array - format Position \nReturn Value: \n Boolean
preloadObject \nGame: Armed Assault (1.00) \nDescription: Preload all textures, materials and proxies needed to render given \n object. Object can be determined either by config class name (CfgVehicles \n), or by Unit.  \nReturns true once all data is loaded and ready.  \nSyntax:  \nBoolean = distance preloadObject object \nParameters: \ndistance: Number \nobject: Object or String \nReturn Value: \n Boolean
preloadSound \nGame: Armed Assault (1.00) \nDescription: Makes sure that a sound can start playing without any delay once \n it is needed. \n Note:Not implemented yet - currently does nothing.  \nSyntax:  \n Boolean = preloadSound soundName \nParameters: \nsoundName: String \nReturn Value: \n Boolean
preloadTitleObj \nGame: Armed Assault (1.00) \nDescription: Object title -  Preload data the object can be defined in the Description \n.ext file.  \nSyntax:  \nBoolean = preloadTitleObj [name, type, speed] or [name, type] \nParameters: \n[name, type, speed] or [name, type]: Array \nname: String defined in Description.ext for the mission \ntype: String "PLAIN" e.g. \nspeed: Optional, and ignored \nReturn Value: \n Boolean
preloadTitleRsc \nGame: Armed Assault (1.00) \nDescription: Resource title - Preload data. \nThe resource can be defined in the Description.ext file.  \nSyntax:  \nBoolean = preloadTitleRsc [name, type, speed] or [name, type] \nParameters: \n[name, type, speed] or [name, type]: Array \nname: String defined in Description.ext for the mission \ntype: String "PLAIN" e.g. \nspeed: Optional and ignored \nReturn Value: \n Boolean
preprocessFile \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Reads and processes the content of the specified file. Preprocessor \n is C-like, supports comments using // or /* and */ and macros defined \n with #define. \nDue to the hard-drive access this command executes (and the lack \n of caching) this command should not be used in time-critical script \n loops.  \nSyntax:  \n String = preprocessFile fileName \nParameters: \nfileName: String \nReturn Value: \n String
preprocessFileLineNumbers \nGame: Armed Assault (1.00) \nDescription: Returns the preprocessed content of the given file. The preprocessor \n is C-like, it supports comments using // or /* and */ and macros \n defined with #define.  \nSyntax:  \n String = preprocessFileLineNumbers fileName \nParameters: \nfileName: String \nReturn Value: \n String
primaryWeapon \nBehavior: global \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Returns name of unit's primary weapon (empty string if none).  \nSyntax:  \n String = primaryWeapon unit \nParameters: \nunit: Object \nReturn Value: \n String
priority \nGame: ARMA 2  (1.00) \nDescription: Return the priority of the task.  \nSyntax:  \n priority task \nParameters: \ntask: Task \nReturn Value: \n Number
private \nGame: Operation Flashpoint (1.00) \nDescription: Sets a variable to the innermost scope. The variable has to be local \n.  \nSyntax:  \n private variableName \nParameters: \nvariableName: String \nReturn Value: \n Nothing 
processDiaryLink \nGame: ARMA 2  (1.00) \nDescription: Open the diary screen on the record specified by link.   \nSyntax:  \n processDiaryLink link \nParameters: \nlink:  - \nReturn Value: \n Nothing
processInitCommands \nGame: Armed Assault (1.00) \nDescription: Process statements stored using setVehicleInit. The statements will \n only be executed once even if processInitCommands is called multiple \n times.  For security reasons, the command was disabled in Arma 3. Use BIS_fnc_MP \n for remote execution. \nSyntax:  \n processInitCommands \nReturn Value: \n Nothing
productVersion \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns the product's friendly name, identifier and version.  \nSyntax:  \n productVersion \nReturn Value: \n Array - [friendlyName, productID, version, releaseNumber] String - friendlyName String - productID Number - version Number - releaseNumber \n
profileNamespace \nGame: Take On Helicopters (1.00) \nDescription: Return the global namespace attached to the active user profile. \nUse setVariable and getVariable to save and load data to this Namespace \n. A variable can be deleted by setting its value to nil.  \nThe variables are stored next to the user profile in a file named \n myUsername.vars.TakeOnHProfile (e.g. in the My Documents\Take On Helicopters \n folder).  \nSyntax:  \n profileNamespace \nReturn Value: \n Namespace
progressLoadingScreen \nGame: ARMA 2  (1.00) \nDescription: If loading screen is show,set progress bar to the given value (from \n interval [0,1])  \nSyntax:  \n progressLoadingScreen progress \nParameters: \nprogress: Number - \nReturn Value: \n Nothing
progressPosition \nGame: ARMA 2  (1.00) \nDescription: Returns the current position in the progress bar.  \nSyntax:  \n progressPosition control \nParameters: \ncontrol:  - \nReturn Value: \n Number
progressSetPosition \nGame: ARMA 2  (1.00) \nDescription: Sets the current position in the progress bar.  \nSyntax:  \n control progressSetPosition pos \nParameters: \ncontrol: Control - \npos: Number - \nReturn Value: \n Nothing
publicVariable \nBehavior: global \nGame: Operation Flashpoint (1.34) \nDescription: Broadcast variable value to all computers. \nOnly type Number is supported in version 1.33 and before. \nFollowing Types are supported since version 1.34:  Number Boolean \n Object Group \nFollowing Types are supported since version ArmA v1.00:  String \nSince version ArmA v1.09:Any value can be transferred, including \n Array  Code \nThe only limitation is you cannot transfer references to entities \n which are local, like scripts, displays, or local objects. \n \n \nSyntax:  \n publicVariable varName \nParameters: \nvarName: String \nReturn Value: \n Nothing
publicVariableClient \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Send the variable value to the client computer - same limitations \n regarding variable type as publicVariable. \nThe Client ID is the temporary ID given to a connected client for that \n session. You can find out this ID with the owner command (using \n it on a player's character, for example, will give you that players \n client ID).  \nSyntax:  \n clientID publicVariableClient varName \nParameters: \nclientID: Number \nvarName: String \nReturn Value: \n Nothing
publicVariableServer \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Send the variable value to the server - same limitations regarding \n variable type as publicVariable.  \nSyntax:  \n publicVariableServer varName \nParameters: \nvarName: String \nReturn Value: \n Nothing
putWeaponPool \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Transfer weapons and magazines from weapon pool into cargo of object \n obj. Used in campaign to transfer weapons into next mission.  \nSyntax:  \n putWeaponPool object \nParameters: \nobject: Object \nReturn Value: \n Nothing
queryMagazinePool \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Return number of magazines of type name in magazine pool (used in campaign \n to transfer magazines into next mission).  \nSyntax:  \n Number = queryMagazinePool name \nParameters: \nname: String \nReturn Value: \n Number
queryWeaponPool \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Return number of weapons of type name in weapon pool (used in campaign \n to transfer weapons into next mission).  \nSyntax:  \n  Number = queryWeaponPool name \nParameters: \nname: String \nReturn Value: \n Number
rad \nGame: Operation Flashpoint (1.00) \nDescription: Convert x from Degrees to Radians. 360 degrees is equal to 2 multiplied \n with pi.  \nSyntax:  \n Number = rad x \nParameters: \nx: Number \nReturn Value: \n Number
radioVolume \nGame: Armed Assault (1.00) \nDescription: Checks the current radio volume (set by fadeRadio).  \nSyntax:  \n Number = radioVolume \nReturn Value: \n Number
rain \nGame: Armed Assault (1.00) \nDescription: Return the current rain density.  \nSyntax:  \n Number = rain \nReturn Value: \n Number
random \nGame: Operation Flashpoint (1.00) \nDescription: Random real (floating point) value from 0 (inclusive) to x (not inclusive \n).  \nSyntax:  \n Number = random x \nParameters: \nx: Number \nReturn Value: \n Number
rank \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Return the rank of the given unit.  \nRank can be one of the following:"PRIVATE""CORPORAL""SERGEANT""LIEUTENANT \n""CAPTAIN""MAJOR""COLONEL"  \nSyntax:  \n String = rank unitName \nParameters: \nunitName: Object \nReturn Value: \n String
rankId \nGame: ARMA 2  (1.00) \nDescription: Return the rank of the given unit for comparison. \nValue may be&#160;:0 - Private1 - Corporal2 - Sergeant3 - Lieutenant4 \n - Captain5 - Major6 - Colonel  \nSyntax:  \n rankId unit \nParameters: \nunit: Object \nReturn Value: \n Number
rating \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Check unit rating. Rating is increased for killing enemies, decreased \n for killing friendlies (see Rating Values). Can be changed via addRating \n by the mission designer.  \nThe rating of the player is displayed as the "score" at the end of the mission \n. Via Description.ext one can define how many points it takes to get a perfect \n score, as well as the number of stars. \nSyntax:  \n Number = rating unitName \nParameters: \nunitName: Object \nReturn Value: \n Number
rectangular \nGame: Armed Assault (1.08) \nDescription: Checks if a location is rectangular (returns true) or elliptical \n (returns false). \nSyntax:  \n rectangular location \nParameters: \nlocation: Location \nReturn Value: \n Boolean
registeredTasks \nGame: ARMA 2  (1.00) \nDescription: List all registered task types.  \nSyntax:  \n registeredTasks teamMember \nReturn Value: \nTask
registerTask \nGame: ARMA 2  (1.00) \nDescription: Register a new task type. Parameters are defined in the given config \n class (subclass of CfgTasks).   \nSyntax:  \n teamMember registerTask entry name \nReturn Value: \n
reload \nGame: Armed Assault (1.00) \nDescription: Reload all weapons  \nSyntax:  \n reload unitName \nParameters: \nunitName: Object \nReturn Value: \n Nothing
reloadEnabled \nGame: Armed Assault (1.00) \nDescription: Check whether magazine is reloaded whenever emptied.  \nSyntax:  \n Boolean =  reloadEnabled unitName \nParameters: \nunitName: Object \nReturn Value: \n Boolean
remoteControl \nGame: ARMA 2  (1.00) \nDescription: Switch on remote control of the unit.  \nSyntax:  \n who remoteControl whom \nParameters: \nwho: Object - \nwhom: Object - \nReturn Value: \n Nothing
removeAction \nGame: Operation Flashpoint (1.20) \nDescription: Remove action with given id index.  \nSyntax:  \n unitName removeAction index \nParameters: \nunitName: Object \nindex: Number of Action \nReturn Value: \n Nothing
removeAllEventHandlers \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Removes all event handlers of given type that were added by addEventHandler \n. Since VBS2 v1.24 can be applied on individual weapon rounds.  \nSyntax:  \n objectName removeAllEventHandlers handlerType \nParameters: \nhandlerType: String. See Event Handlers for list \nReturn Value: \n Nothing
removeAllItems \nGame: ARMA 2  (1.00) \nDescription: Removes all special items from the unit.  \nSyntax:  \n removeAllItems unit \nParameters: \nunit: Object - \nReturn Value: \n Nothing
removeAllMPEventHandlers \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Removes all MP event handler of the given type which were added by addMPEventHandler \n.  \nSyntax:  \n objectName removeAllMPEventHandlers "event" \nParameters: \nobjectName: Object \nevent: String \nReturn Value: \n Nothing
removeAllWeapons \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Remove all weapons and magazines of the unit.  \nOn vehicles only ammo is removed  \nDoes not remove map, compass, radio. Use  \nunitname removeweapon "itemmap" \nfor that purpose. \nSyntax:  \n removeAllWeapons unitName \nParameters: \nunitName: Object \nReturn Value: \n Nothing
removeBackpack \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Removes unit's backpack  \nSyntax:  \n removeBackpack unit \nParameters: \nunit: Object \nReturn Value: \n Nothing
removeDrawIcon \nGame: ARMA 2  (1.00) \nDescription: Removes an icon for an editor object.  \nSyntax:  \n map removeDrawIcon [object,string identifier] \nParameters: \nmap: Control - \n[object,string identifier]: Array - \nReturn Value: \n Nothing
removeDrawLinks \nGame: ARMA 2  (1.00) \nDescription: Remove all drawn links for the given editor object for the given \n editor,object type. Pass an empty string as param type to remove \n all draw,links for an object.   \nSyntax:  \n map removeDrawLinks [from,param type] \nParameters: \nmap: Control - \n[from,param type]: Array - \nReturn Value: \n Nothing
removeEventHandler \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Removes event handler added by addEventHandler.  \nWhen any handler is removed, all handler indices higher than the deleted \n one should be decremented.  \nSyntax:  \n objectName removeEventHandler [type, index] \nParameters: \nobjectName: Object \n[type, index]: Array \ntype: String \nindex: Number. Value returned from addEventHandler \nReturn Value: \n Nothing
removeGroupIcon \nGame: ARMA 2  (1.00) \nDescription: Remove icon with given ID from group.  \nSyntax:  \n group removeGroupIcon icon ID \nParameters: \ngroup: Group - \nicon ID: Number - \nReturn Value: \n Nothing
removeMagazine \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Remove magazine from the unit. \n Note: You may create invalid combinations with this function. When \n doing so, application behaviour is undefined.  \nSyntax:  \n unitName removeMagazine magazineName \nParameters: \nunitName: Object \nmagazineName: String - see weapons) \nReturn Value: \n Nothing
removeMagazines \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Remove all magazines of given type from the unit. \nNote: You may create invalid combinations with this function. When \n doing so, application behaviour is undefined.  \nSyntax:  \n unitName removeMagazines magazineName \nParameters: \nunitName: Object \nmagazineName: String \nReturn Value: \n Nothing
removeMagazinesTurret \nBehavior: local \nGame: ArmA 2: Operation Arrowhead (1.52) \nDescription: Removes all magazines of the given type from the unit. Use turret \n path [-1] for driver's turret.  \nNote: you may create invalid combinations by using this function \n. When doing so, application behaviour is undefined.  \nSyntax:  \n vehicle removeMagazinesTurret [magazineName, turretPath] \nParameters: \nvehicle: Object \n[weaponName, turretPath]: Array \nmagazineName: String \nturretPath: Array \nReturn Value: \n Nothing
removeMagazineTurret \nBehavior: local \nGame: ArmA 2: Operation Arrowhead (1.52) \nDescription: Removes the magazine from the turret. Use turret path [-1] for driver \n's turret. \nNote: you may create invalid combinations by using this function \n. When doing so, application behaviour is undefined.  \nSyntax:  \n vehicle removeMagazineTurret [magazineName, turretPath] \nParameters: \nvehicle: Object \n[weaponName, turretPath]: Array \nmagazineName: String \nturretPath: Array \nReturn Value: \n Nothing
removeMenuItem \nGame: ARMA 2  (1.00) \nDescription: Removes a previously added menu item.  \nSyntax:  \n map removeMenuItem index of menu item to delete \nParameters: \nmap: Control - \nindex of menu item to delete: Number - \nReturn Value: \n Nothing
removeMPEventHandler \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Removes MP event handler added by addMPEventHandler. Format of handler \n is [type,index]. Index is returned by addMPEventHandler. When any handler \n is removed, all handler indices highter than the deleted one should \n decremented  \nSyntax:  \n unitName removeMPEventHandler ["event", index] \nParameters: \nunitName: Object \nevent: String \nindex: Number \nReturn Value: \n Nothing
removeSimpleTask \nGame: ARMA 2  (1.00) \nDescription: Remove a simple task from the list of simple tasks.  \nSyntax:  \n person removeSimpleTask task \nParameters: \nperson: Object \ntask: Task \nReturn Value: \n Nothing
removeSwitchableUnit \nGame: Armed Assault (1.00) \nDescription: Remove a unit from the list of units available for Team Switch.  \nSyntax:  \n removeSwitchableUnit  unitName \nParameters: \nunitName: Object \nReturn Value: \n Nothing
removeTeamMember \nGame: ARMA 2  (1.00) \nDescription: Remove given member from given team.  \nSyntax:  \n team removeTeamMember member \nParameters: \nteam: Team Member \nmember: Team Member \nReturn Value: \n Nothing
removeWeapon \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Remove weapon from a unit.  \nNote: It is possible to create invalid combinations with this command \n (ie, attempting to remove a weapon that a unit does not possess \n). When doing so, application behaviour is undefined.  \nSyntax:  \n unitName removeWeapon weaponName \nParameters: \nunitName: Object \nweaponName: String \nReturn Value: \n Nothing
requiredVersion \nGame: Operation Flashpoint (1.21) \nDescription: Check if version of application is available. If the current version \n is older than the required one, a warning message is shown and false \n is returned.  \nVersion of format Major.Minor, e.g. 1.30 \nSyntax:  \n Boolean =  requiredVersion version \nParameters: \nversion: String \nReturn Value: \n Boolean
resetCamShake \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Reset all camera shakes.  \nSyntax:  \n resetCamShake \nReturn Value: \n Nothing
resistance \nGame: Operation Flashpoint (1.00) \nDescription: Resistance side.  \nWhen used in a format statement (hint format["%1",resistance]), the string \n returned is "GUER". \nSyntax:  \n Side = resistance \nReturn Value: \n Side
resize \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Change array size. Can be used to add or remove elements from an array \n.  \nSyntax:  \n arrayName resize count \nParameters: \narrayName: Array \ncount: Number \nReturn Value: \n Nothing
resources \nGame: ARMA 2  (1.00) \nDescription: Returns the resources of a team member.  \nSyntax:  \n resources member \nParameters: \nmember: Team Member - \nReturn Value: \n returnValue
respawnVehicle \nGame: Armed Assault (1.00) \nDescription: Set vehicle as respawnable in MP games.   \nSyntax:  \n vehicleName respawnVehicle [delay = -1, count = 0] \nParameters: \nvehicleName: Object \n[delay = -1, count = 0]: Array \ndelay: Number. Default -1 (use respawnDelay from Description.ext) \ncount: Number. Default 0 (unlimited respawns) \nReturn Value: \n Nothing
restartEditorCamera \nGame: ARMA 2  (1.00) \nDescription: Restarts the mission editor camera (if it was deleted by a script \n,for example).  \nSyntax:  \n restartEditorCamera map \nParameters: \nmap: Control - \nReturn Value: \n Nothing
reveal \nGame: Operation Flashpoint (1.00) \nDescription: Reveals a unit to a group or another unit.  \nThe knowledge value will be set to the highest level any unit of the revealing \n side has about the revealed unit. If the revealing side has no knowledge \n about the revealed unit, the value will be set to 1. \nSince ARMA 2 OA 1.60 the alternative syntax is available. Values \n greater than or equal 1.5 reveal the side of the unit, too. \nThe knowledge level can only be increased, not decreased by this \n command.   \nSyntax:  \n groupName reveal unitName \nParameters: \ngroupName: Object or Group  which receives revealing information \nunitName: Object  which is revealed \nReturn Value: \n Nothing 
reversedMouseY \nGame: ARMA 2  (1.00) \nDescription: Return if mouse vertical axe is inverted.  \nSyntax:  \n reversedMouseY \nReturn Value: \n Boolean
roadsConnectedTo \nGame: ARMA 2  (1.00) \nDescription: Find the road segments connected to the given road segment.   \nSyntax:  \n roadsConnectedTo road segment \nParameters: \nroad segment:  - \nReturn Value: \n Array
round \nGame: Armed Assault (1.00) \nDescription: Rounds up or down to the closest integer.   \nSyntax:  \n Number = round x \nParameters: \nx: Number \nReturn Value: \n Number
runInitScript \nGame: Armed Assault (1.00) \nDescription: Launch init.sqs or init.sqf scripts.  \nSyntax:  \n runInitScript \nReturn Value: \n Nothing
safeZoneH \nGame: ARMA 2  (1.00) \nDescription: see SafeZone  \nSyntax:  \n SafeZoneH \nReturn Value: \n Number
safeZoneW \nGame: ARMA 2  (1.00) \nDescription: see SafeZone  \nSyntax:  \n safeZoneW \nReturn Value: \n Number
safeZoneWAbs \nGame: ARMA 2  (1.03) \nDescription: Returns SafeZone width (of all monitors, in case there's more than \n one)  \nSyntax:  \n safeZoneWAbs \nReturn Value: \n Number
safeZoneX \nGame: ARMA 2  (1.00) \nDescription: see SafeZone  \nSyntax:  \n SafeZoneX \nReturn Value: \n Number
safeZoneXAbs \nGame: ARMA 2  (1.03) \nDescription: Returns SafeZone left border (of all monotors, in case there's more \n than one)  \nSyntax:  \n safeZoneXAbs \nReturn Value: \n Number
safeZoneY \nGame: ARMA 2  (1.00) \nDescription: see SafeZone  \nSyntax:  \n SafeZoneY \nReturn Value: \n Number
saveGame \nGame: Operation Flashpoint (1.00) \nDescription: Autosave game (used for Retry).  \nSyntax:  \n saveGame \nReturn Value: \n Nothing
saveIdentity \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Saves person's identity to Objects.sav file in campaign directory \n as entry name.  \nSyntax:  \n unitName saveIdentity name \nParameters: \nunitName: Object \nname: String \nReturn Value: \n Boolean
saveOverlay \nGame: ARMA 2  (1.00) \nDescription: Save the current overlay.  \nSyntax:  \n saveOverlay map \nParameters: \nmap: Control - \nReturn Value: \n Nothing
saveProfileNamespace \nGame: Take On Helicopters (1.00) \nDescription: Saves the variables stored in profileNamespace to the persistent \n active user profile.  Warning: this is a file operation, which makes \n it expensive! It is not recommended to do this at a high frequency \n in a loop for example. It is however also recommended not to change \n a large amount of variables and wait long before saving, because \n certain game crashes may cause a loss of data.  Warning: saving \n a lot of data can quickly increase the size of the profile variables \n file, so keep an eye on this. Warning: TKOH's Heliport status (used \n in the Career mode for example) is stored in this file, so be mindful \n of working with this technology to avoid losing data and progress \n.  \nSyntax:  \n saveProfileNamespace \nReturn Value: \n Nothing
saveStatus \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Saves object's properties to Objects.sav file in campaign directory \n as entry name.  \nSyntax:  \n object saveStatus name \nParameters: \nobject: Object \nname: String \nReturn Value: \n Boolean
saveVar \nGame: Operation Flashpoint (1.00) \nDescription: Save variable value into the campaign space. This variable is available \n to all following missions in the campaign.  \nSyntax:  \n saveVar varname \nParameters: \nvarname: String \nReturn Value: \n Nothing
savingEnabled \nGame: ARMA 2  (1.00) \nDescription: Check if saving the game is enabled.  \nSyntax:  \n savingEnabled \nReturn Value: \n Boolean
say \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Unit will say given sound. \nWhen the Unit is a Person, it will also perform corresponding lipsync \n effect provided an appropriate.lip file has been created for this \n sound. \nA unit that has been killed or does not exist will not say anything \n. \nCompare this with playSound which will always play a sound at the location \n of the player. \nIf the camera is not within given range, title is not shown and the sound \n will not be heard. \nSound is defined in CfgSound of the Description.ext.  \nSyntax:  \n unit say [sound, maxTitlesDistance,speed] \nParameters: \nunit: Object \n[sound, maxTitlesDistance,speed]: Array \nsound: String classname. Defined in Description.ext \nmaxTitlesDistance: Number \nspeed: Number. Optional \nReturn Value: \n Nothing
say2D \nGame: ARMA 2  (1.00) \nDescription: Command description.  \nSyntax:  \nunit say2D speechName[unit, target] say2D speechName \n \nParameters: \nunit: object - \ntarget: object \nspeechName: dataType \nReturn Value: \n returnValue
say3D \nGame: ARMA 2  (1.00) \nDescription: Unit or object will say given sound in 3D Space. \nThis allows broadcasting of positional music or sound from a source \n, without having to script a fade sound or music command. \nCompare this with say2D which will always play a sound at the location \n of the player after he has been in the vicinity of a broadcasting \n sound. \nSound is defined in CfgSound of the Description.ext.  \nSyntax:  \n unit say3D sound \nParameters: \nunit: Object - \nsound: String - classname. Defined in Description.ext \nReturn Value: \n Nothing 
scopeName \nGame: Armed Assault (1.00) \nDescription: Defines name of current scope. Name is visible in debugger, and name \n is also used as reference in some commands. Scope name can be defined \n only once per scope.  \nSyntax:  \n scopeName name \nParameters: \nname: String \nReturn Value: \n Nothing
score \nGame: Operation Flashpoint (1.00) \nDescription: MP: Returns the person's score.  \nSyntax:  \n Number =  score unitName \nParameters: \nunitName: Object \nReturn Value: \n Number
scoreSide \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns score for a given side.  \nSyntax:  \n scoreSide side \nParameters: \nside: side \nReturn Value: \n Number
screenToWorld \nGame: ARMA 2  (1.00) \nDescription: Returns the position on landscape (in world coordinates) corresponding \n to the given point on screen (in UI coordinates).  \nSyntax:  \n screenToWorld position \nParameters: \nposition: Array - \nReturn Value: \n Array
scriptDone \nGame: Armed Assault (1.00) \nDescription: Check if a script is finished running using the Script_(Handle) returned \n by execVM or spawn.  \nSyntax:  \n scriptDone handle \nParameters: \nhandle: Script_(Handle) returned by spawn or execVM \nReturn Value: \n Boolean
scriptName \nGame: ARMA 2  (1.00) \nDescription: Assign a user friendly name to the VM script this command is executed \n from. \nOnce name is assigned, it cannot be changed.  \nSyntax:  \n scriptName name \nParameters: \nname: String - \nReturn Value: \n Nothing
scudState \nGame: Operation Flashpoint (1.30) \nDescription: Current state of given Scud launcher. Following states are recognized \n: 0 - No activity  1 - Launch preparation, 2 - Launch prepared3 - Ignition \n  4 - Launched. \nSyntax:  \n Number =  scudState scudName \nParameters: \nscudName: Object \nReturn Value: \n Number
secondaryWeapon \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Returns name of a unit's secondary weapon (empty string if none).  \nSyntax:  \n secondaryWeapon unit \nParameters: \nunit: Object \nReturn Value: \n String
select \nGame: Operation Flashpoint (1.00) \nDescription: Selects an index element of an array or config object. \nIndex 0 denotes the first element, 1 the second, etc. \nIf index has decimal places it gets rounded down for fractions less \n than.5, otherwise it gets rounded up.  \nSyntax:  \n array  select index \nParameters: \narray&#160;: Array \nindex: Number \nReturn Value: \n Any Value 
selectBestPlaces \nGame: ARMA 2  (1.00) \nDescription: Find the places with the max. value of _expression in the given area \n. Places can be on water.  \nSyntax:  \n selectBestPlaces [_position,_radius,_expression,_precision,_sourcesCount] \nParameters: \n[_position,_radius,_expression,_precision,_sourcesCount]: Array - \nReturn Value: \n Array - Format is [[position: Position2D, expressionResult: Number],...]
selectDiarySubject \nGame: ARMA 2  (1.00) \nDescription: Select the subject page in a log.   \nSyntax:  \n person selectDiarySubject subject \nParameters: \nperson:  - \nObject,subject:  - \nReturn Value: \n Nothing
selectedEditorObjects \nGame: ARMA 2  (1.00) \nDescription: Returns a list of currently selected editor objects.  \nSyntax:  \n selectedEditorObjects map \nParameters: \nmap: Control - \nReturn Value: \n Array
selectEditorObject \nGame: ARMA 2  (1.00) \nDescription: Select an editor object. Does not un-select previously selected objects \n.  \nSyntax:  \n map selectEditorObject object \nParameters: \nmap: Control - \nobject: String - \nReturn Value: \n Any
selectionPosition \nGame: Armed Assault (1.00) \nDescription: Search for selection in the object model (first in the memory level \n, then in geometry LODs, then in roadway LOD [VBS2 only]). \nReturns position in model space. In A1 it returns the initial position \n of the selection, in A2 and VBS2 it returns the current position \n of the selection (e.g. when it is animated). \nIf a selection does not exist [0,0,0] is returned.  \nSyntax:  \n object selectionPosition selectionName \nParameters: \nobject: Object \nselectionName: String \nReturn Value: \n Array 
selectLeader \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Select a group's leader.  \nSyntax:  \n groupName selectLeader unitName \nParameters: \ngroupName: Group \nunitName: Object \nReturn Value: \n Nothing
selectNoPlayer \nGame: ARMA 2  (1.00) \nDescription: Switch player to no unit.  \nSyntax:  \n selectNoPlayer \nReturn Value: \n Nothing
selectPlayer \nGame: Armed Assault (1.00) \nDescription: Switch player to given person. Switching to a Null-Object works, but provides \n a view which you cannot manipulate (neither move nor rotate) with \n regular input. \nThis command has significant effects on locality. See notes beneath \n. \nSyntax:  \n selectPlayer unitName \nParameters: \nunitName: Object \nReturn Value: \n Nothing
selectWeapon \nGame: Operation Flashpoint (1.27) \nDescription: Selects the given weapon. \nNote: For weapons that have more than one muzzle, you have to input \n the muzzlename and not the weaponName. \nThe only weapons that have muzzleNames seem to be rifles with grenade \n launchers, handgrenades, smokeshells and satchels. \nIn all other cases the weaponName must be used.Fortunately, in OFP, in most \n cases, both names are the same. But check. \nIn ArmA the weaponNames and muzzleNames are different. \nFor muzzle names see cfgWeapons.  \nSyntax:  \n unitName selectWeapon muzzleName \nParameters: \nunitName: Object \nmuzzleName: String \nReturn Value: \n Nothing
sendSimpleCommand \nGame: Armed Assault (1.00) \nDescription: Sends a simple command to the vehicle's driver / gunner.  \nSyntax:  \n vehicleName sendSimpleCommand command \nParameters: \nvehicleName: Object \ncommand: String \nReturn Value: \n Nothing
sendTask \nGame: ARMA 2  (1.00) \nDescription: Create a new AI task (subtask of parentTask). Type is name of registered \n task type.  \nSyntax:  \n sender sendTask [receiver,[type] or [type,parentTask],priority,name1,value1,name2,value2,...] \nParameters: \nsender:  - \n[type] or [type,parentTask],priority,name1,value1,name2,value2,...]: Array - \nReturn Value: \n Task
sendTaskResult \nGame: ARMA 2  (1.00) \nDescription: Send a result of the task to the task sender.  \nSyntax:  \n task sendTaskResult [state,result,sentence] \nParameters: \ntask: Task - \n[state,result,sentence]: Array - \nReturn Value: \n Nothing
sendUDPMessage \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Send message to given address using UDP protocol. Returns false if the message \n has not been delivered  \nNote: Not implemented (see talk page for more info). \nSyntax:  \n sendUDPMessage [ip, port, message] \nParameters: \nip: String \nport: \nmessage: String \nReturn Value: \n Boolean
serverCommand \nGame: ARMA 2  (1.05) \nDescription: Executes an admin command on the server. If used in singleplayer \n or in multiplayer, but without required privileges (player using \n the computer where command is executed is not an admin) nothing \n happens. This can be detected beforehand using serverCommandAvailable \n.   \nSyntax:  \n serverCommand command \nParameters: \ncommand&#160;: String \nReturn Value: \n Nothing
serverCommandAvailable \nGame: ARMA 2  (1.05) \nDescription: Returns true if the admin command can be performed on the machine \n, false if not. Used in connection with serverCommand.  \nSyntax:  \n Boolean = serverCommandAvailable command \nParameters: \ncommand: String \nReturn Value: \n Boolean
serverTime \nGame: ARMA 2  (1.00) \nDescription: Server time synchronized to clients. Returns always 0 in Singleplayer \n. \nNote that in ArmA2 1.05 Final, this command only returns the time \n since the Server was actualy started.  \nSyntax:  \n serverTime \nReturn Value: \n Number
set \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Format of element is [index, value]. Changes an element of given \n array. If element does not exist, resize index+1 is called to create \n it.  \nSyntax:  \n array set [index, value] \nParameters: \narray: Array \n[index, value]: Array \nindex: Number \nvalue: Anything \nReturn Value: \n Nothing
setAccTime \nGame: Operation Flashpoint (1.00) \nDescription: Set time acceleration coefficient. May be also used to slow time \n in cutscenes. This command does NOT work in multiplayer.  \nSyntax:  \n setAccTime accFactor \nParameters: \naccFactor: Number \nReturn Value: \n Nothing
setAirportSide \nGame: Armed Assault (1.08) \nDescription: Set owning side of the airport. ID is the number to identify which \n airport on the island you want to check.  \nSyntax:  \n id setAirportSide side \nParameters: \nid: Number \nside: Side \nReturn Value: \n Nothing
setAmmoCargo \nGame: Operation Flashpoint (1.00) \nDescription: Set amount of ammo resources in cargo space of a rearm vehicle. Ammo \n resource is used to resupply vehicles that take ammo. Soldiers use individual \n magazines instead. Amount: 1 is full cargo. \nThe actual quantity to work with is determined by the model's class \n in CfgVehicles   \nSyntax:  \n vehicleName setAmmoCargo ammoCargo \nParameters: \nvehicleName: Object \nammoCargo: Number \nReturn Value: \n Nothing
setAperture \nGame: Armed Assault (1.00) \nDescription: Sets custom camera aperture (-1 to do it automatically).  \nSyntax:  \n setAperture aperture \nParameters: \naperture: Number \nReturn Value: \n Nothing
setArmoryPoints \nGame: ARMA 2  (1.00) \nDescription: Store the given amount of armory points.   \nSyntax:  \n setArmoryPoints points \nParameters: \npoints: Number (Integer) \nReturn Value: \n Nothing
setAttributes \nGame: Armed Assault (1.00) \nDescription: Returns a structured text created by the given structured or plain \n text by setting attributes to the given values.  \nSyntax:  \n text setAttributes [name1, value1, name2, value2,...] \nParameters: \ntext: String \n[name1, value1, name2, value2,...]: Array \nReturn Value: \n Structured Text
setBehaviour \nGame: Operation Flashpoint (1.00) \nDescription: Set group/unit behaviour mode. Behaviour is one of: "CARELESS""SAFE \n""AWARE""COMBAT""STEALTH".  \n \nSee this page for details of the effect of this command on AI units \n. \nSyntax:  \n groupName setBehaviour behaviour \nParameters: \ngroupName: Object or Group \nbehaviour: String \nReturn Value: \n Nothing
setCameraInterest \nGame: Armed Assault (1.00) \nDescription: Set camera interest for given entity. Camera interest is by default \n 0. Any unit which is speaking has its camera interest raised to 50. Camera \n interest is used to focus camera to control depth of field in cutscenes \n. Combination of camera interest, unit position of the screen, unit \n movement, unit type, and some other properties is used to determine \n which unit to focus at. Higher camera interest increases the chance \n of the unit being focused. \nSyntax:  \n entity setCameraInterest interest \nParameters: \nentity: Object \ninterest: Number \nReturn Value: \n Nothing
setCamShakeDefParams \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Sets camera shake default params.  \nSyntax:  \n [power, duration, frequency, minSpeed, minMass, caliberCoefHit, vehicleCoef] setCamShakeDefParams \nParameters: \npower: Number \nduration: Number \nfrequency: Number \nminSpeed: Number \nminMass: Number \ncaliberCoefHit: Number \nvehicleCoef: Number \nReturn Value: \n Nothing
setCamShakeParams \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Set camera shake parameters.  \nSyntax:  \n setCamShakeParams [posCoef, rotXCoef, rotYCoef, rotZCoef, interp] \nParameters: \nposCoef: Number \nrotXCoef: Number \nrotYCoef: Number \nrotZCoef: Number \ninterp: Number \nReturn Value: \n Nothing
setCamUseTi \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Activate camera thermal vision.  \nSyntax:  \n Bool setCamUseTi mode index \nParameters: \nBool: Boolean \nmode index: Number \nReturn Value: \n Nothing
setCaptive \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Mark a unit as captive. \nIf unit is a vehicle, commander is marked. \nA captive is neutral to everyone, and will not trigger "detected \n by" conditions for its original side. \nUsing a number (instead of a boolean) for the status has no further \n effect on the engine's behavior, but can be used by captiveNum to keep \n track of the captivity status at a finer resolution (e.g. handcuffed \n, grouped, etc.) \nThe numbered status syntax was introduced in Arma 2.  \nSyntax:  \n unitName setCaptive status \nParameters: \nunitName: Object \nstatus: Boolean or Number - When using a number parameter, any value&gt;0 is considered to be the same as true \nReturn Value: \n Nothing
setCombatMode \nGame: Operation Flashpoint (1.00) \nDescription: Set group combat mode (engagement rules).Mode may be one of:  "BLUE \n" (Never fire) "GREEN" (Hold fire - defend only) "WHITE" (Hold fire \n, engage at will) "YELLOW" (Fire at will) "RED" (Fire at will, engage \n at will) \nSyntax:  \n groupName setCombatMode mode \nParameters: \ngroupName: Object or Group \nmode: String \nReturn Value: \n Nothing
setCurrentTask \nGame: ARMA 2  (1.00) \nDescription: Set the task as a current task of the person.  \nSyntax:  \n Object setCurrentTask Task \nParameters: \nObject: the unit having the task \nTask: the task you want to select \nReturn Value: \n Nothing
setCurrentWaypoint \nBehavior: local \nGame: Armed Assault (1.05) \nDescription: Sets the currently active waypoint for a group.  \nSyntax:  \n groupName setCurrentWaypoint waypoint \nParameters: \ngroupName: Object or Group \nwaypoint: Array - format Waypoint \nReturn Value: \n Nothing
setDamage \nBehavior: global \nGame: Operation Flashpoint (1.5) \nDescription: Damage / repair object. \nDamage 0 means fully functional, damage 1 means completely destroyed \n / dead. \nThis function is identical to setDammage. \nIt was introduced to fix a spelling error in original function name \n.  \nSyntax:  \n object setDamage damage \nParameters: \nobject: Object \ndamage: Number \nReturn Value: \n Nothing
setDammage \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Damage / repair object. \nDamage 0 means fully functional, damage 1 means completely destroyed \n / dead. \nThis function is identical to setDamage. \nsetDamage was introduced to fix a spelling error in this operator \n's name.  \nSyntax:  \n object setDammage damage \nParameters: \nobject: Object \ndamage: Number \nReturn Value: \n Nothing
setDate \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Sets the actual mission date and time.  \nSyntax:  \n setDate [year, month, day, hour, minute] \nParameters: \n[year, month, day, hour, minute]: Array \nReturn Value: \n Nothing
setDestination \nGame: Armed Assault (1.00) \nDescription: Set the destination for path planning of the pilot. \nPossible values for planningMode are: \n"DoNotPlan", \n"LeaderPlanned", \n"LeaderDirect", \n"FormationPlanned", \n"VehiclePlanned"  \nSyntax:  \n object setDestination [position, planningMode, forceReplan] \nParameters: \nobject: Object \n[position, planningMode, forceReplan]: Array \nposition: Array - format Position \nplanningMode: String \nforceReplan: Boolean Specifies if replanning of the path should be forced. \nReturn Value: \n Nothing
setDir \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Sets object heading. Angles are measured in degrees clockwise from \n north. The accepted heading range is from 0 to 360 Negative angles \n represent a counter-clockwise angle and the angle can be of any size \n.   \nSyntax:  \n object setDir heading \nParameters: \nobject: Object \nheading: Number \nReturn Value: \n Nothing
setDirection \nGame: Armed Assault (1.08) \nDescription: Set's the orientation of a location. It's area and map icon (if it's type \n uses an icon) will be rotated to this orientation. \nSyntax:  \n location setDirection direction \nParameters: \nlocation: Location \ndirection: Number \nReturn Value: \n Nothing
setDrawIcon \nGame: ARMA 2  (1.00) \nDescription: Set the icon to be shown in 2D editor for the specified editor object \n. If maintain size is false,icon will not scale depending on the scale \n,of the map. If maintain size is a number,the icon will maintain \n size,if map scale is below that number. is3D,show line and priority \n are,optional.   \nSyntax:  \n map setDrawIcon [object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority] \nParameters: \nmap: Control - \n[object,texture,color,offset,width,height,maintain size?,angle,string identifier,shadow,is3D,draw line?,priority]: Array - \nReturn Value: \n Nothing
setDropInterval \nGame: Armed Assault (1.00) \nDescription: Set interval of emitting particles from particle source.  \nSyntax:  \n particleSource setDropInterval interval \nParameters: \nparticleSource: Object \ninterval: Number \nReturn Value: \n Nothing
setEditorMode \nGame: ARMA 2  (1.00) \nDescription: Sets map mode to MAP,3D or PREVIEW.  \nSyntax:  \n map setEditorMode mode \nParameters: \nmap: Control - \nmode: String - \nReturn Value: \n Nothing
setEditorObjectScope \nGame: ARMA 2  (1.00) \nDescription: This command defines the level of access a user has to editor objects \n. \n"objects" is an array of either Editor Objects (eg ["_unit_0"]) or actual \n Game Objects (eg [player]). If the array is empty then the command \n will automatically parse all editor objects. \n"editorType" is the editor type to effect (eg "unit", "vehicle", "center \n") or "" for all types. \n"condition" is an executable string that must evaluate to true or false \n. If true, the scope of the evaluated editor object will be modified \n. "_x" can be used in the string as reference to the ingame representation \n of the currently processed array member. \n"scope" is one of "HIDE", "VIEW", "SELECT", "LINKTO", "LINKFROM", "ALLNODRAG \n", "ALLNOTREE", "ALLNOCOPY", "ALLNOSELECT" or "ALL". \n"subordinatesAlso" is a boolean value. If true then subordinates \n in the editor will be assigned the same scope as the parent.  \nSyntax:  \n map setEditorObjectScope [objects, editorType, condition, scope, subordinatesAlso] \nParameters: \nmap: Control - \n[objects, editorType, condition, scope, subordinatesAlso]: Array - \nobjects: Array of Objects and/or Editor Objects \neditorType: String \ncondition: String \nscope: String \nsubordinatesAlso: Boolean \nReturn Value: \n Nothing
setEffectCondition \nGame: Armed Assault (1.00) \nDescription: The statement is executed when the trigger or waypoint is activated \n and the effects are launched depending on the result.If the result \n is a boolean and true, the effect is launched.If the result is an object \n, the effect is launched if the result is the player or the player \n vehicle.If the result is an array, the effect is launched if the result \n contains the player or the player vehicle.  \nSyntax:  \n trigger setEffectCondition statement \nParameters: \ntrigger: Object \nstatement: String \nReturn Value: \n Nothing 
setFace \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Set person's face. For a list of available faces, check Category \n:CfgIdentities.  \nSyntax:  \n person setFace face \nParameters: \nperson: Object \nface: String \nReturn Value: \n Nothing
setFaceAnimation \nGame: Operation Flashpoint (1.00) \nDescription: Set facial animation phase (eye blinking), blink is in the range \n from 0 to 1.  \nSyntax:  \n person setFaceAnimation blink \nParameters: \nperson: Object \nblink: Number \nReturn Value: \n Nothing
setFlagOwner \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Set flag owner. When owner is set to objNull or any object other \n than a unit of class man or logic, flag is returned to the flagpole \n. A flag owned by a logic has no visual representation. \nSyntax:  \n flag setFlagOwner owner \nParameters: \nflag: Object \nowner: Object \nReturn Value: \n Nothing
setFlagSide \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Set flag side. A flag may be taken by any unit that is enemy to the side \n that owns the flag.  \nSyntax:  \n flag setFlagSide side \nParameters: \nflag: Object \nside: Side \nReturn Value: \n Nothing
setFlagTexture \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Set flag texture. \nIf texture is "", flag is not drawn. \nCustom texture can be used, as long as it is in *.jpg format, and has dimensions \n of 200px*200px. \nThe page Flag Textures shows which textures are available in each \n game. \nSyntax:  \n flag setFlagTexture texture \nParameters: \nflag: Object \ntexture: String \nReturn Value: \n Nothing
setFog \nGame: Operation Flashpoint (1.00) \nDescription: Changes the fog smoothly over the the given TransitionTime (in seconds \n). A time of zero means there will be an immediate change. A fog intensity \n of zero is minimum fog and a fog level of one is maximum fog.  \nSyntax:  \n time setFog fog \nParameters: \ntime: Number \nfog: Number \nReturn Value: \n Nothing
setFormation \nGame: Operation Flashpoint (1.00) \nDescription: Set group formation.Formation is one of:  "COLUMN" "STAG COLUMN" "WEDGE \n" "ECH LEFT" "ECH RIGHT" "VEE" "LINE" "FILE" (ArmA) "DIAMOND" (ArmA \n) \nSyntax:  \n group setFormation formation \nParameters: \ngroup: Object or Group \nformation: String \nReturn Value: \n Nothing
setFormationTask \nGame: Armed Assault (1.00) \nDescription: Set the current task of the formation member.  \nSyntax:  \n object setFormationTask task \nParameters: \nobject: Object \ntask: String \nReturn Value: \n Nothing
setFormDir \nGame: Operation Flashpoint (1.00) \nDescription: Set group formation heading. Accepted heading range is 0 to 360. Formation \n is facing this direction unless enemy is seen. When group is moving \n, this value is overriden by movement direction.  \nSyntax:  \n group setFormDir heading \nParameters: \ngroup: Object or Group \nheading: Number \nReturn Value: \n Nothing
setFriend \nGame: Armed Assault (1.00) \nDescription: Sets how friendly side1 is with side2. For a value smaller than 0.6 it results \n in being enemy, otherwise it's friendly. \nIntended to be used on mission start. Changing value during mission \n can cause unexpected errors in AI behavior.  \nSyntax:  \n side1 setFriend [side2 , value] \nParameters: \nside1: Side \n[side2 , value]: Array \nside2: Side \nvalue: Number \nReturn Value: \n Nothing
setFromEditor \nGame: ARMA 2  (1.00) \nDescription: Set if given team member was inserted directly from editor.  \nSyntax:  \n teamMember setFromEditor fromEditor \nParameters: \nteamMember: Team Member \nfromEditor: Boolean \nReturn Value: \n Nothing
setFSMVariable \nGame: ARMA 2  (1.00) \nDescription: Set variable to given value in the variable space of given FSM. The FSM handle \n is the number returned by the execFSM command.  \nSyntax:  \n FSM handle setFSMVariable [name,value] \nParameters: \nFSM handle: Number - \n[name,value]: Array - \nReturn Value: \n Nothing
setFuel \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Set fuel percentage from 0 (empty) to 1 (full).  \nSyntax:  \n vehicle setFuel amount \nParameters: \nvehicle: Object \namount: Number \nReturn Value: \n Nothing
setFuelCargo \nGame: Operation Flashpoint (1.00) \nDescription: Set fuel amount in cargo space of refuel vehicle from empty (0) to full \n (1)Note the carrying capacity of each side's refuel trucks differ \n.  \nSyntax:  \n vehicle setFuelCargo amount \nParameters: \nvehicle&#160;: Object \namount&#160;: Number \nReturn Value: \n Nothing
setGroupIcon \nGame: ARMA 2  (1.00) \nDescription: Set group icons properties.  \nSyntax:  \n group setGroupIcon properties \nParameters: \ngroup: Group - \nproperties: Array - \nReturn Value: \n Nothing
setGroupIconParams \nGame: ARMA 2  (1.00) \nDescription: Set group icons parameters. [color,string,float,bool]  \nSyntax:  \n group setGroupIconParams properties \nParameters: \ngroup: Group - \nproperties: Array - \nReturn Value: \n Nothing
setGroupIconsSelectable \nGame: ARMA 2  (1.00) \nDescription: Sets if group icons raises onclick and onover events.  \nSyntax:  \n setGroupIconsSelectable bool \nParameters: \nbool: Boolean - \nReturn Value: \n Nothing
setGroupIconsVisible \nGame: ARMA 2  (1.00) \nDescription: Sets if group icons are visible.  \nSyntax:  \n setGroupIconsVisible array \nParameters: \narray: Array - \nReturn Value: \n Nothing
setGroupId \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Set a group's identity.  \nSyntax:  \n group setGroupId [nameFomat, nameParam1,...] \nParameters: \ngroup: Object or Group \n[nameFomat, nameParam1...]: Array of strings. \nReturn Value: \n Nothing
setHideBehind \nGame: Armed Assault (1.00) \nDescription: Sets the data for hiding. objectWhereHide can be taken using findCover \n. hidePosition can be taken using getHideFrom. Command is not functional \n in ArmA 2.  \nSyntax:  \n object setHideBehind [objectWhereHide, hidePosition] \nParameters: \nobject: Object \n[objectWhereHide, hidePosition]: Array \nobjectWhereHide: Object \nhidePosition: Array - format Position \nReturn Value: \n Nothing
setHit \nBehavior: local \nGame: ARMA 2  (1.00) \nDescription: Damage / repair part of object. Damage 0 means fully functional, damage \n 1 means completely destroyed / dead. Note: Some part names are in Czech \n; see translation table.   \nSyntax:  \n object setHit [part, damage] \nParameters: \nobject: Object - \npart: String - Name of the part (selection name). \ndamage: Number - \nReturn Value: \n Nothing
setIdentity \nGame: Operation Flashpoint (1.00) \nDescription: Set identity of person.Identities are defined in Description.ext of the mission \n or campaign. For a list of available faces, glasses and speakers \n check Category:CfgIdentities.  \nSyntax:  \n person setIdentity identity \nParameters: \nperson: Object \nidentity: String \nReturn Value: \n Nothing
setImportance \nGame: Armed Assault (1.08) \nDescription: Sets the importance value of location. \nSyntax:  \n location setImportance value \nParameters: \nlocation: Location \nvalue: Number \nReturn Value: \n Nothing
setLeader \nGame: ARMA 2  (1.00) \nDescription: Set the leader of given team.  \nSyntax:  \n team setLeader leader \nParameters: \nteam: Team Member \nleader: Team Member \nReturn Value: \n Nothing
setLightAmbient \nGame: Armed Assault (1.00) \nDescription: Set ambient color of light.  \nSyntax:  \n light setLightAmbient [r, g, b] \nParameters: \nlight: Object \n[r, g, b]: Array \nReturn Value: \n Nothing
setLightBrightness \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Set brightness of light.  \nSyntax:  \n light setLightBrightness brightness \nParameters: \nlight: Object \nbrightness: Number \nReturn Value: \n Nothing
setLightColor \nGame: Armed Assault (1.00) \nDescription: Set diffuse color of light.  \nSyntax:  \n light setLightColor [r, g, b] \nParameters: \nlight: Object \n[r, g, b]: Array \nReturn Value: \n Nothing
setMarkerAlpha \nGame: ARMA 2  (1.00) \nDescription: Sets the marker alpha. The marker is modified on all computers in a network \n session. When alpha equal one, the marker is visible, but if alpha \n equal zero, then the marker is invisible. Alpha can be numbers and fractions \n.  \nSyntax:  \n marker setMarkerAlpha alpha \nParameters: \nmarker: String - \nalpha: Number - \nReturn Value: \n Nothing
setMarkerAlphaLocal \nGame: ARMA 2  (1.00) \nDescription: Sets the marker alpha. The marker is only modified on the computer \n where the command is called. When alpha equal one, the marker is visible \n, but if alpha equal zero, then the marker is invisible. Alpha can be numbers \n and fractions.  \nSyntax:  \n marker setMarkerAlphaLocal alpha \nParameters: \nmarker: String - \nalpha: Number - \nReturn Value: \n Nothing
setMarkerBrush \nGame: Armed Assault (1.00) \nDescription: Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE \n"). Brush is the name of the subclass in CfgMarkerBrushes. \nbrush can be: "Solid" "Horizontal" "Vertical" "Grid" "FDiagonal" "BDiagonal \n" "DiagGrid" "Cross" "Border" (ArmA2 only) "SolidBorder" (OA only \n)  \nSyntax:  \n markerName setMarkerBrush brush \nParameters: \nmarkerName: String \nbrush: String \nReturn Value: \n Nothing
setMarkerBrushLocal \nGame: Armed Assault (1.04) \nDescription: Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE \n"). Brush is the name of the subclass in CfgMarkerBrushes. \nbrush can be: "Solid" "Horizontal" "Vertical" "Grid" "FDiagonal" "BDiagonal \n" "DiagGrid" "Cross" "Border" (ArmA2 only) "SolidBorder" (OA only \n)  \nSyntax:  \n markerName setMarkerBrushLocal brush \nParameters: \nmarkerName: String \nbrush: String \nReturn Value: \n Nothing
setMarkerColor \nGame: Operation Flashpoint (1.21) \nDescription: Set marker color. Color is one of:  "Default" "ColorBlack" "ColorRed \n" "ColorRedAlpha" "ColorGreen" "ColorGreenAlpha" "ColorBlue" "ColorYellow \n" "ColorOrange" "ColorWhite" "ColorPink" "ColorBrown" "ColorKhaki \n" \nSyntax:  \n markerName setMarkerColor color \nParameters: \nmarkerName: String \ncolor: String \nReturn Value: \n Nothing
setMarkerColorLocal \nGame: Armed Assault (1.04) \nDescription: Set marker color. Color is one of:  "Default" "ColorBlack" "ColorRed \n" "ColorRedAlpha" "ColorGreen" "ColorGreenAlpha" "ColorBlue" "ColorYellow \n" "ColorOrange" (Arma 2 only) "ColorWhite" \nSyntax:  \n markerName setMarkerColorLocal color \nParameters: \nmarkerName: String \ncolor: String \nReturn Value: \n Nothing
setMarkerDir \nGame: Armed Assault (1.00) \nDescription: Sets the orientation of the marker. Angle is in degrees.  \nSyntax:  \n markerName setMarkerDir angle \nParameters: \nmarkerName: String \nangle: Number \nReturn Value: \n Nothing
setMarkerDirLocal \nGame: Armed Assault (1.04) \nDescription: Sets the orientation of the marker. Angle is in degrees.  \nSyntax:  \n markerName setMarkerDirLocal angle \nParameters: \nmarkerName: String \nangle: Number \nReturn Value: \n Nothing
setMarkerPos \nGame: Operation Flashpoint (1.00) \nDescription: Moves the marker. Pos format is Position2D.  \nSyntax:  \n markerName setMarkerPos pos \nParameters: \nmarkerName: String \npos: Array - format Position2D \nReturn Value: \n Nothing
setMarkerPosLocal \nGame: Armed Assault (1.04) \nDescription: Moves the marker. Pos format is Position2D.  \nSyntax:  \n markerName setMarkerPosLocal pos \nParameters: \nmarkerName: String \npos: Array - format Position2D \nReturn Value: \n Nothing
setMarkerShape \nGame: Armed Assault (1.00) \nDescription: Selects the shape (type) of the marker. \nShape can be "ICON", "RECTANGLE" or "ELLIPSE".  \nSyntax:  \n markerName setMarkerShape shape \nParameters: \nmarkerName: String \nshape: String \nReturn Value: \n Nothing
setMarkerShapeLocal \nGame: Armed Assault (1.04) \nDescription: Selects the shape (type) of the marker. \nShape can be "ICON", "RECTANGLE" or "ELLIPSE".  \nSyntax:  \n markerName setMarkerShapeLocal shape \nParameters: \nmarkerName: String \nshape: String \nReturn Value: \n Nothing
setMarkerSize \nGame: Operation Flashpoint (1.21) \nDescription: Set marker size.Size is in format [a-axis, b-axis].  \nSyntax:  \n markerName setMarkerSize [a-axis, b-axis] \nParameters: \nmarkerName: String \n[a-axis, b-axis]: Array \na-axis: Number. width of marker \nb-axis: Number. height of marker \nReturn Value: \n Nothing
setMarkerSizeLocal \nGame: Armed Assault (1.04) \nDescription: Set marker size.Size is in format [a-axis, b-axis].  \nSyntax:  \n markerName setMarkerSizeLocal [a-axis, b-axis] \nParameters: \nmarkerName: String \n[a-axis, b-axis]: Array \na-axis: Numbers. width of marker \nb-axis: Numbers. height of marker \nReturn Value: \n Nothing
setMarkerText \nGame: Armed Assault (1.00) \nDescription: Sets the text label of an existing marker.  \nSyntax:  \n markerName setMarkerText text \nParameters: \nmarkerName: String \ntext: String \nReturn Value: \n Nothing
setMarkerTextLocal \nGame: Armed Assault (1.04) \nDescription: Sets the text label of an existing marker.  \nSyntax:  \n markerName setMarkerTextLocal text \nParameters: \nmarkerName: String \ntext: String \nReturn Value: \n Nothing
setMarkerType \nGame: Operation Flashpoint (1.00) \nDescription: Set marker type. See cfgMarkers for a list of standard markers. \n \n \nSyntax:  \n markerName setMarkerType type \nParameters: \nmarkerName: String \ntype: String. See cfgMarkers. \nReturn Value: \n Nothing
setMarkerTypeLocal \nGame: Armed Assault (1.04) \nDescription: Set marker type. See cfgMarkers for a list of standard markers. \n \n \nSyntax:  \n markerName setMarkerTypeLocal type \nParameters: \nmarkerName: String \ntype: String. See cfgMarkers. \nReturn Value: \n Nothing
setMimic \nGame: Operation Flashpoint (1.00) \nDescription: Set person's facial expression. Following mimic values are recognized \n:  "Default" "Normal" "Smile" "Hurt" "Ironic" "Sad" "Cynic" "Surprised \n" "Agresive" "Angry" \nSince Arma 2 OA 1.6*, these values are used&#160;: "neutral" "dead \n" "danger" "hurt" "aware" "safe" "combat" \nSyntax:  \n person setMimic mimic \nParameters: \nperson: Object \nmimic: String. as above \nReturn Value: \n Nothing
setMousePosition \nGame: Armed Assault (1.00) \nDescription: Move (UI) mouse pointer to specified position of the screen. \nValues of x and y can be in the range from 0 to 1.   \nSyntax:  \n setMousePosition [x, y] \nParameters: \n[x, y]: Array \nReturn Value: \n Nothing
setMusicEffect \nGame: Armed Assault (1.00) \nDescription: Defines the music track played on activation. \nTrack is a subclass name of CfgMusic. In addition, "$NONE$" (no change \n) or "$STOP$" (stops the current music track).  \nSyntax:  \n trigger setMusicEffect track \nParameters: \ntrigger: Object \ntrack: String \nReturn Value: \n Nothing 
setName \nGame: Armed Assault (1.08) \nDescription: Sets the name of a location \nSyntax:  \n location setName name \nParameters: \nlocation: Location \nname: String \nReturn Value: \n Nothing
setObjectArguments \nGame: ARMA 2  (1.00) \nDescription: Set object arguments in mission editor.  \nSyntax:  \n map setObjectArguments [object,[name1,value1,...]] \nParameters: \nmap: Control - \n[name1,value1,...]]: Array - \nReturn Value: \n Any
setObjectProxy \nGame: ARMA 2  (1.00) \nDescription: Set the proxy object associated with the given editor object.  \nSyntax:  \n map setObjectProxy [object,proxy object] \nParameters: \nmap: Control - \n[object,proxy object]: Array - \nReturn Value: \n Any
setObjectTexture \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Textures object selection with texture named in array.  \nArray has the form [selectionNumber,"Texture"]. The selection number \n is defined through the  hiddenselection[]={} array in the vehicle \n's config (starting with 0).  \nSyntax:  \n object setObjectTexture [selectionNumber,texture] \nParameters: \nobject: Object \n[selectionNumber,texture]: Array \nselectionNumber: Number \ntexture: String \nReturn Value: \n Nothing
setOvercast \nGame: Operation Flashpoint (1.00) \nDescription: Set overcast to given value smoothly during given time (in seconds \n). Zero time means immediate change. An overcast setting of zero \n means clear (sunny) weather, and one means storms and rain are very \n likely. Higher overcast values also result in higher wind speeds \n.  \nSyntax:  \n time setOvercast overcast \nParameters: \ntime: Number. In seconds \novercast: Number. Range 0 to 1 \nReturn Value: \n Nothing
setOwner \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: From server machine, change the ownership of an object to a given \n client. Returns true if locality was changed.  \nSyntax:  \n object setOwner clientID \nParameters: \nobject: Object - \nclientID: Number - clientID of the new owner \nReturn Value: \n Boolean
setParticleCircle \nGame: Armed Assault (1.00) \nDescription: Update particle source to create particles on circle with given radius \n. Velocity is transformed and added to total velocity.  \nSyntax:  \n particleSource setParticleCircle [radius, velocity] \nParameters: \nparticleSource: Object \n[radius, velocity]: Array \nradius: Number \nvelocity: Array (x,y,z) \nReturn Value: \n Nothing
setParticleParams \nGame: Armed Assault (1.00) \nDescription: Set parameters to particle source. Array is in format ParticleArray \n.  \nSyntax:  \n particleSource setParticleParams array \nParameters: \nparticleSource: Object \narray: Array - format ParticleArray \nReturn Value: \n Nothing
setParticleRandom \nGame: Armed Assault (1.00) \nDescription: Set randomization of particle source parameters.  \nSyntax:  \n particleSource setParticleRandom [lifeTime, position, moveVelocity, rotationVelocity, size, color, randomDirectionPeriod, randomDirectionIntensity, {angle}] \nParameters: \nparticleSource: Object \n[lifeTime, position, moveVelocity, rotationVelocity, size, color, randomDirectionPeriod, randomDirectionIntensity, {angle}]: Array \nReturn Value: \n Nothing
setPlayable \nGame: Armed Assault (1.00) \nDescription: Create MP role for the unit. The roles created this way are used \n for Join In Progress and Team Switch.  \nSyntax:  \n setPlayable unitName \nParameters: \nunitName: Object \nReturn Value: \n Nothing
setPlayerRespawnTime \nGame: ArmA 2: Operation Arrowhead (1.57) \nDescription: Set the time interval to wait on player respawn. It is set to mission \n default on mission start again.  \nSyntax:  \n setPlayerRespawnTime interval \nParameters: \ninterval: Number - respawn time in seconds \nReturn Value: \n Nothing
setPos \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Set object position.   \nSyntax:  \n object setPos pos \nParameters: \nobject: Object \npos: Array - format Position \nReturn Value: \n Nothing
setPosASL \nGame: Armed Assault (1.00) \nDescription: Sets the object position above sea level. The pos array uses the PositionASL \n format.  \nSyntax:  \n object setPosASL pos \nParameters: \nobject: Object \npos: Array - format PositionASL \nReturn Value: \n Nothing
setPosASL2 \nGame: ARMA 2  (1.00) \nDescription: Sets the object position. The pos array uses the PositionASL format \n. The version of the command does not offset based on object center \n.  \nSyntax:  \n obj setPosASL2 pos \nParameters: \nobj: Object \npos: Array \nReturn Value: \n Nothing
setPosATL \nGame: ARMA 2  (1.03) \nDescription: Sets the position of an object relative to the terrain.  \nSyntax:  \n object setPosATL pos \nParameters: \nobject: Object \npos: Array - format PositionATL \nReturn Value: \n Nothing
setPosition \nGame: Armed Assault (1.08) \nDescription: Sets the position of a location.  \nSyntax:  \n location setPosition pos \nParameters: \nlocation: Location \npos: Array - format Position \nReturn Value: \n Nothing
setRadioMsg \nGame: Operation Flashpoint (1.00) \nDescription: Set radio message (0, 0, map radio) to given text. Use "NULL" to disable \n radio slot.  \nSyntax:  \n index setRadioMsg text \nParameters: \nindex: Number \ntext: String \nReturn Value: \n Nothing
setRain \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Set rain density smoothly over the given transition time (in seconds \n). A transition time of zero means an immediate change. A rain density \n of zero is no rain, one is maximum rain. Rain is not possible when \n overcast is less than 0.7.  \nSyntax:  \n time setRain rain \nParameters: \ntime: Number. In seconds \nrain: Number. Range 0 to 1 \nReturn Value: \n Nothing
setRank \nGame: Armed Assault (1.00) \nDescription: Sets rank of given unit. \nPossible values: PRIVATE, CORPORAL, SERGEANT, LIEUTENANT, CAPTAIN \n, MAJOR or COLONEL.  \nSyntax:  \n unitName setRank rank \nParameters: \nunitName: Object \nrank: String \nReturn Value: \n Nothing
setRectangular \nGame: Armed Assault (1.08) \nDescription: Set the shape of a location to be either rectangular or elliptical \n. Locations default shape is elliptical. \nSyntax:  \n location setRectangular set \nParameters: \nlocation: Location \nset: Boolean \nReturn Value: \n Nothing
setRepairCargo \nGame: Operation Flashpoint (1.00) \nDescription: Set amount of repair resources in cargo space of repair vehicle.Amount \n 1 is full cargo.  \nSyntax:  \n vehicleName setRepairCargo amount \nParameters: \nvehicleName: Object \namount: Number range 0 to 1 \nReturn Value: \n Nothing
setSide \nGame: Armed Assault (1.08) \nDescription: Sets a location's side. The default side is Unknown. \nSyntax:  \n location setSide side \nParameters: \nlocation: Location \nside: Side \nReturn Value: \n Nothing
setSimpleTaskDescription \nGame: ARMA 2  (1.00) \nDescription: Attach descriptions to the simple task.   \nSyntax:  \n task setSimpleTaskDescription array \nParameters: \nTask \nArray: [Task description, Task title, Task waypoint description] \nReturn Value: \n Nothing
setSimpleTaskDestination \nGame: ARMA 2  (1.00) \nDescription: Attach a destination to the simple task.   \nSyntax:  \n task setSimpleTaskDestination position \nParameters: \nTask: Task \nPosition: Position \nReturn Value: \n Nothing
setSimpleTaskTarget \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Attach a target to the simple task. \nOverrides setSimpleTaskDestination. \nSyntax:  \n task setSimpleTaskTarget [target, precisePosition] \nParameters: \ntask: Task \ntarget: Object \nprecisePosition: Boolean - use exact position of the target for map marker / HUD indicator instead of the position known to the owner of the task (depending on the knowledge about the target) \nReturn Value: \n Nothing
setSize \nGame: Armed Assault (1.08) \nDescription: Sets the size (radius)  of a location. \nThe width  is 2 * x, the height is 2 * y.  \nSyntax:  \n location setSize size \nParameters: \nlocation: Location \nsize: Array \nReturn Value: \n Nothing
setSkill \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Sets ability level of person (commander unit). Value of skill may vary \n from 0 to 1.  \nSyntax:  \n vehicleName setSkill skill \nParameters: \nvehicleName: Object \nskill: Number Range 0 to 1 \nReturn Value: \n Nothing
setSoundEffect \nGame: Armed Assault (1.00) \nDescription: Defines the different sound effects. \nSound / voice plays a 2D / 3D sound from CfgSounds. \nSoundEnv plays an enviromental sound from CfgEnvSounds. \nSoundDet (only for triggers) creates a dynamic sound object attached \n to a trigger defined in CfgSFX.  \nSyntax:  \n trigger setSoundEffect [sound, voice, soundEnv, soundDet] \nParameters: \ntrigger: Object \n[sound, voice, soundEnv, soundDet]: Array of strings \nReturn Value: \n Nothing 
setSpeedMode \nGame: Operation Flashpoint (1.00) \nDescription: Set group speed mode. Mode may be one of:  "LIMITED" (half speed \n) "NORMAL" (full speed, maintain formation) "FULL" (do not wait for any other \n units in formation) \nSyntax:  \n groupName setSpeedMode mode \nParameters: \ngroupName: Object or Group \nmode: String \nReturn Value: \n Nothing
setTargetAge \nGame: Armed Assault (1.00) \nDescription: Sets how the target is known to the other centers. They behave like \n the target was seen age seconds ago. \nPossible age values are: "ACTUAL", "5 MIN", "10 MIN", "15 MIN", "30 MIN", "60 MIN", "120 MIN" or "UNKNOWN \n".  \nSyntax:  \n object setTargetAge age \nParameters: \nobject: Object \nage: String As above \nReturn Value: \n Nothing
setTaskResult \nGame: ARMA 2  (1.00) \nDescription: Set a result of the task.  \nSyntax:  \n task setTaskResult [state,result] \nParameters: \ntask: Task - \n[state,result]: Array - \nReturn Value: \n Nothing
setTaskState \nGame: ARMA 2  (1.00) \nDescription: Set the state of a given task. \nState value may be one of:"Succeeded""Failed""Canceled""Created""Assigned \n" \nSyntax:  \n task setTaskState state \nParameters: \ntask: Task \nstate: String \nReturn Value: \n
setTerrainGrid \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Operation Flashpoint, VBS1: Set desired terrain resolution (in meters \n). For default landscapes, supported resolutions are: 50 - smoothest \n, less lag 25 - default in multiplayer 12.5 - default in singleplayer \n 6.25 3.125 - bumpiest, higher lag \nIf you select unsupported resolutions, nearest supported value is used \n instead.  \nArmed Assault, VBS2: Terrain resolution is fixed, determined by the world \n created. This function controls terrain LOD instead (the distance \n in which the terrain mesh resolution starts to degrade). Higher \n number means less vertices are used for terrain rendering, making \n distant hills less smooth. Value 12.5 corresponds to selecting Terrain \n Detail Normal in Video options, 50 to Very Low, 3.125 to Very High \n. \nSyntax:  \n setTerrainGrid grid \nParameters: \ngrid: Number \nReturn Value: \n Nothing
setText \nGame: Armed Assault (1.08) \nDescription: Sets the text associated with a location. This text will be displayed \n on the game map at the location's position.  \nSyntax:  \n location setText text \nParameters: \nlocation: Location \ntext: String \nReturn Value: \n Nothing
setTitleEffect \nGame: Armed Assault (1.00) \nDescription: Defines the title effect via [Type, Effect, Text] where \n'Type' can be "NONE", "OBJECT", 'Text' defines the shown object , a subclass \n of CfgTitles."RES" 'Text' defines a resource class, a subclass of RscTitles \n."TEXT"The 'Text' is shown as text itself. 'Effect' defines a subtype \n: "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK \n IN", "WHITE OUT" or "WHITE IN".   \nSyntax:  \n trigger setTitleEffect [type, effect, text] \nParameters: \ntrigger: Object \n[type, effect, text]: Array of strings. See above \nReturn Value: \n Nothing 
setToneMapping \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Applies a specific tone mapping to the game  \nSyntax:  \n setToneMapping toneName \nParameters: \ntoneName: String - where string is effect name - defaults are Arma, Filmic and Reinhard. They can be edited with setToneMappingParams command \nReturn Value: \n Nothing
setToneMappingParams \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Edits tone mapping parameters  \nSyntax:  \n toneName setToneMapping params \nParameters: \ntoneName: String - where string is effect name - defaults are Arma, Filmic and Reinhard. \nparams: Array - (please populate) \nReturn Value: \n Nothing
setTriggerActivation \nGame: Armed Assault (1.00) \nDescription: Defines the trigger activation type.  \nSee ArmA:Mission Editor - Triggers for a thorough overview of triggers \n and its fields for activation, effects, etc. \nSyntax:  \n trigger setTriggerActivation [by, type, repeating] \nParameters: \ntrigger: Object - Trigger object \nby: String - Who activates trigger. Can be "NONE" or \nSide': "EAST", "WEST", "GUER", "CIV", "LOGIC", "ANY" \nRadio: "ALPHA", "BRAVO", "CHARLIE", "DELTA", "ECHO", "FOXTROT", "GOLF", "HOTEL", "INDIA", "JULIET" \nObject: "STATIC", "VEHICLE", "GROUP", "LEADER", "MEMBER" \nStatus: "WEST SEIZED", "EAST SEIZED" or "GUER SEIZED" \ntype: String -  How trigger is it activated. Can be: \nPresence: "PRESENT", "NOT PRESENT" \nDetection: "WEST D", "EAST D", "GUER D" or "CIV D" \nrepeating: Boolean - Activation can happen repeatedly \nReturn Value: \n Nothing
setTriggerArea \nGame: Armed Assault (1.00) \nDescription: Defines the area controlled by the trigger. \nThe area is either rectangular or elliptical, the width is 2 * xrad \n, the height is 2 * yrad. \nIt is rotated angle degrees.  \nSyntax:  \n trigger setTriggerArea [xrad, yrad, angle, rectangle] \nParameters: \ntrigger: Object \n[xrad, yrad, angle, rectangle]: Array \nxrad: Number - horizontal(x) radius (or half the width of rectangle) \nyrad: Number - vertical(y) radius (or half the height of rectangle) \nangle: Number - rotational in degrees \nrectangle: Boolean - true if rectangle) \nReturn Value: \n Nothing
setTriggerStatements \nGame: Armed Assault (1.00) \nDescription: Defines a trigger's condition, and executable code for its activation \n and deactivation events.  \nSyntax:  \n trigger setTriggerStatements [condition, activation, deactivation] \nParameters: \ntrigger: Object - Trigger object \ncondition: String - Code containing the trigger's condition, which has to return a boolean value. If this is used, the result of the trigger's activation condition is interpreted. \nactivation: String - Code that is executed when the trigger is activated (The variable thislist contains an array with the units that activated the trigger.) \ndeactivation: String - Code that is executed when the trigger is deactivated. \nReturn Value: \n Nothing
setTriggerText \nGame: Armed Assault (1.00) \nDescription: Sets the text label attached to the trigger object. This is used \n for example as a radio slot label for radio activated triggers.  \nSyntax:  \n trigger setTriggerText text \nParameters: \ntrigger: Object \ntext: String \nReturn Value: \n Nothing
setTriggerTimeout \nGame: Armed Assault (1.00) \nDescription: Defines the time between condition satisfaction and trigger activation \n (randomly from min to max, with an average value mid). If the last \n argument is true, the condition must be fullfilled all the time \n.  \nSyntax:  \n trigger setTriggerTimeout [min, mid, max, interruptable] \nParameters: \ntrigger: Object \n[min, mid, max, interruptable]: Array \nmin: Number \nmid: Number \nmax: Number \ninterruptable: Boolean \nReturn Value: \n Nothing
setTriggerType \nGame: Armed Assault (1.00) \nDescription: Sets the type of action processed by the trigger after activation \n (no action, a waypoints switch or an end of mission): "NONE" "EAST \n G" - Guarded by OPFOR "WEST G" - Guarded by BLUFOR "GUER G" - Guarded \n by Independent "SWITCH" - Switch waypoints/break loop (see Triggers \n) "END1" - End #1 "END2" - End #2 "END3" - End #3 "END4" - End #4 "END5 \n" - End #5 "END6" - End #6 "LOOSE" - Lose "WIN" - (not found in ArmA \n) \nSyntax:  \n trigger setTriggerType action \nParameters: \ntrigger: Object \naction: String \nReturn Value: \n Nothing
setType \nGame: Armed Assault (1.08) \nDescription: Changes a location to the specified class. Location classes are defined \n in CfgLocationTypes.  \nSyntax:  \n location setType name \nParameters: \nlocation: Location \nname: String \nReturn Value: \n Nothing
setUnconscious \nBehavior: local \nGame: ARMA 2  (1.00) \nDescription: Set / reset the unconscious life state of the given unit (in MP works \n only for a local unit).  \nSyntax:  \n unit setUnconscious set \nParameters: \nunit: Object - \nset: Boolean - \nReturn Value: \n Nothing
setUnitAbility \nGame: Armed Assault (1.00) \nDescription: Sets skill of given unit. This command will probably differ in some \n future products, but currently it does the same as setSkill.  \nSkill may vary from 0.2 to 1.0.  \nSyntax:  \n unit setUnitAbility skill \nParameters: \nunit: Object \nskill: Number Range 0.2 to 1.0 \nReturn Value: \n Nothing
setUnitPos \nGame: Operation Flashpoint (1.00) \nDescription: Set unit position rules. Mode may be one of:  "DOWN" - unit goes \n prone and stays prone. "UP" - unit stands and stays standing. "Middle \n" - Kneel Position. ArmA version 1.04 (Unit will not kneel if it is unarmed \n) "AUTO" - unit chooses mode according to circumstances. \n \n \nSyntax:  \n unitName setUnitPos mode \nParameters: \nunitName: Object \nmode: String As above \nReturn Value: \n Nothing
setUnitPosWeak \nGame: Armed Assault (1.04) \nDescription: Set unit position rules. Mode may be one of:  "DOWN" - person goes \n prone and stays prone. "UP" - person stands and stays standing. "Middle \n" - Kneel Position. ArmA version 1.04 "AUTO" - person chooses mode \n according to circumstances. \n \n \nSyntax:  \n unitName setUnitPosWeak mode \nParameters: \nunitName: Object \nmode: String As above \nReturn Value: \n Nothing
setUnitRank \nGame: Armed Assault (1.00) \nDescription: Sets rank of given unit. \nPossible rank values, and the associated rating that is automatically \n given: PRIVATE: 0 CORPORAL: 500 SERGEANT: 1500 LIEUTENANT: 2500 \n CAPTAIN: 3500 MAJOR: 5000 COLONEL: 7500  \nSyntax:  \n unitName setUnitRank rank \nParameters: \nunitName: Object \nrank: String As above \nReturn Value: \n Nothing
setUnitRecoilCoefficient \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Proportionaly increase/decrease unit's recoil.  \nSyntax:  \n unitName setUnitRecoilCoefficient coefficient \nParameters: \nunitName: Object \ncoefficient: Number \nReturn Value: \n Nothing
setVariable \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Set variable to given value in the variable space of given element \n.  \nTo remove a variable, set it to nil (e.g. player setVariable ["varname \n",nil]).  \nAll available data type combinations: Namespace setVariable Array \n Control setVariable Array Object setVariable Array Group setVariable \n Array Team_Member setVariable Array Task setVariable Array Location \n setVariable Array \nSyntax:  \n objectName setVariable [name, value, (public)] \nParameters: \nobjectName: Object or Location. Arma 2 also supports: Namespace, Group, Control, Task \n[name, value]: Array \nname: String \nvalue: Any_Value \npublic: Boolean - Only available for Object types. If public is true then the value is broadcast to all computers. \nReturn Value: \n Nothing
setVectorDir \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Set object's direction vector. Up vector will remain unchanged.  \nSyntax:  \n object setVectorDir [x, z, y] \nParameters: \nobject: Object \n[x, z, y]: Array \nReturn Value: \n Nothing
setVectorDirAndUp \nBehavior: local \nGame: Armed Assault (1.09) \nDescription: Set object's orientation (given as direction and up vector).  \nSyntax:  \n vehicle setVectorDirAndUp [[x, z, y],[x, z, y]] \nParameters: \nvehicle: Object \n[[x, z, y],[x, z, y]]: Array \nReturn Value: \n Nothing
setVectorUp \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Set object's up vector. Direction vector will remain unchanged.  \nSyntax:  \n object setVectorUp [x, z, y] \nParameters: \nobject: Object \n[x, z, y]: Array \nReturn Value: \n Nothing
setVehicleAmmo \nGame: Armed Assault (1.00) \nDescription: Sets how much ammunition (compared to a full state defined by the vehicle \n type) the vehicle has. \nThe value ranges from 0 to 1.  \nSyntax:  \n  vehicleName setVehicleAmmo value \nParameters: \nvehicleName: Object \nvalue: Number Range 0 to 1 \nReturn Value: \n Nothing
setVehicleArmor \nGame: Armed Assault (1.00) \nDescription: Sets the armor (or health for men) state of the vehicle (a value \n from 0 to 1).  \nSyntax:  \n  vehicleName setVehicleArmor value \nParameters: \nvehicleName: Object \nvalue: Number range 0 to 1 \nReturn Value: \n Nothing
setVehicleId \nGame: Armed Assault (1.00) \nDescription: Sets id (integer value) to vehicle. By this id vehicle is referenced \n by triggers and waypoints.  \nSyntax:  \n vehicleName setVehicleId id \nParameters: \nvehicleName: Object \nid: Number \nReturn Value: \n Nothing
setVehicleInit \nGame: Armed Assault (1.00) \nDescription: Attach a statement to a unit. The statement is propagated over the network \n in MP games, it can be executed by invoking processInitCommands \n.  For security reasons, the command was disabled in Arma 3. Use BIS_fnc_MP \n for remote execution. \nSyntax:  \n unitName setVehicleInit statement \nParameters: \nunitName: Object \nstatement: String \nReturn Value: \n Nothing
setVehicleLock \nGame: Armed Assault (1.00) \nDescription: Set how vehicle is locked for player. \nPossible values: "UNLOCKED", "DEFAULT" or "LOCKED".  \nSyntax:  \n vehicleName setVehicleLock state \nParameters: \nvehicleName: Object \nstate: String see above \nReturn Value: \n Nothing
setVehiclePosition \nGame: Armed Assault (1.00) \nDescription: Moves the object to a random position. \nUses either the position that's defined in the first array, or one of the marker \n positions from the markers array.  \nThe object is placed inside a circle with this position as its center \n and placement as its radius.  \nSyntax:  \n object setVehiclePosition [position, markers, placement] \nParameters: \nobject: Object \n[position, markers, placement]: Array \nposition: Array - format Position \nmarkers: Array - format Position \nplacement: Number \nReturn Value: \n Nothing
setVehicleTiPars \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: RSet ti parameters for spécified vehicle, pars: engine/body, tracks \n/wheels, main gun.  \nSyntax:  \n vehicleName setVehicleTiPars [pars] \nParameters: \nvehicleName: Object \npars: Array \nReturn Value: \n Nothing
setVehicleVarName \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Sets the name of the variable which contains a reference to this \n object. It is necessary in MP to change the variable content after \n a respawn. When you only use 'myVar = &lt;vehicle&gt;', you'll just \n have a normal variable, when you use this command as well, 'myVar \n' will be the name for the vehicle, i.e. if you have other variables \n containing the vehicle, they'll now return 'myVar' and not WEST \n... \nNote: This command does not set 'myVar' to contain the vehicle, this \n has to be done separately.  \nSyntax:  \n object setVehicleVarName name \nParameters: \nobject: Object \nname: String \nReturn Value: \n Nothing
setVelocity \nBehavior: local \nGame: Operation Flashpoint: Resistance (1.8) \nDescription: Set velocity (speed vector) of a vehicle.   Units are in metres per second \n.  \nSyntax:  \n vehicleName setVelocity [x, z, y] \nParameters: \nvehicleName: Object \n[x, z, y]: Array \nReturn Value: \n Nothing
setVelocityTransformation \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Interpolate and sets vectors.  \nSyntax:  \n objectName setVelocityTransformation [position1, position2, velocity1, velocity2, direction1, direction2, up1, up2, time] \nParameters: \nobjectName: Object \nposition1: Number \nposition2: Number \nvelocity1: Number \nvelocity2: Number \ndirection1: Number \ndirection2: Number \nup1: Number \nup2: Number \ntime: Number \nReturn Value: \n Nothing
setViewDistance \nGame: Operation Flashpoint (1.00) \nDescription: Set rendering distance, in metres. Default is 900m (in OFP) or 1,200m \n (in ArmA), accepted range is 500m to 5,000m (in OFP) or 10,000m \n (in ArmA).  \nSyntax:  \n setViewDistance distance \nParameters: \ndistance: Number \nReturn Value: \n Nothing
setVisibleIfTreeCollapsed \nGame: ARMA 2  (1.00) \nDescription: Sets whether or not the object is visible even if the tree is collapsed \n.  \nSyntax:  \n map setVisibleIfTreeCollapsed [object, visible] \nParameters: \nmap: Control \n[object, visible]: Array \nobject: Editor Object \nvisible: Boolean \nReturn Value: \n Nothing
setWaypointBehaviour \nGame: Armed Assault (1.00) \nDescription: Switches the unit behaviour when the waypoint becomes active. \nPossible values are: "UNCHANGED" "CARELESS" "SAFE" "AWARE" "COMBAT \n" "STEALTH" \nSee the AIBehaviour page for details of the effect of this command \n on AI units. \nSyntax:  \n waypoint setWaypointBehaviour mode \nParameters: \nwaypoint: Array - format Waypoint \nmode: String As Above \nReturn Value: \n Nothing
setWaypointCombatMode \nGame: Armed Assault (1.00) \nDescription: The group combat mode is switched when the waypoint becomes active \n. \nPossible mode values are: "NO CHANGE" (No change) "BLUE" (Never fire \n) "GREEN" (Hold fire - defend only) "WHITE" (Hold fire, engage at will \n) "YELLOW" (Fire at will) "RED" (Fire at will, engage at will) \nSyntax:  \n waypoint setWaypointCombatMode mode \nParameters: \nwaypoint: Array - format Waypoint \nmode: String \nReturn Value: \n Nothing
setWaypointCompletionRadius \nGame: ARMA 2  (1.00) \nDescription: The completion radius allows units to call the waypoint completed \n once they are inside of the given circle.  \nSyntax:  \n waypoint setWaypointCompletionRadius radius \nParameters: \nwaypoint:  Array - format Waypoint \nradius: Number \nReturn Value: \n Nothing
setWaypointDescription \nGame: Armed Assault (1.00) \nDescription: Sets the description shown in the HUD while the waypoint is active \n.  \nSyntax:  \n waypoint setWaypointDescription text \nParameters: \nwaypoint: Array - format Waypoint \ntext: String \nReturn Value: \n Nothing
setWaypointFormation \nGame: Armed Assault (1.00) \nDescription: Switches the group formation when the waypoint becomes active. \nPossible values are:  "NO CHANGE" "COLUMN" "STAG COLUMN" "WEDGE" "ECH LEFT \n" "ECH RIGHT" "VEE" "LINE" "FILE" "DIAMOND" \nSyntax:  \n waypoint setWaypointFormation formation \nParameters: \nwaypoint: Array - format Waypoint \nformation: String \nReturn Value: \n Nothing
setWaypointHousePosition \nGame: Armed Assault (1.00) \nDescription: For waypoints attached to a house, this defines the target house \n position.  \nSyntax:  \n waypoint setWaypointHousePosition pos \nParameters: \nwaypoint: Array - format Waypoint \npos: Number \nReturn Value: \n Nothing
setWaypointPosition \nGame: Armed Assault (1.00) \nDescription: Moves the waypoint to a random position in a circle with the given \n center and radius.  \nSyntax:  \n waypoint setWaypointPosition [center, radius] \nParameters: \nwaypoint: Array - format Waypoint \n[center, radius]: Array \ncenter: Array - format Position \nradius: Number meters \nReturn Value: \n Nothing
setWaypointScript \nGame: Armed Assault (1.00) \nDescription: Attaches a script to a scripted waypoint. Command consist of a script \n name and additional script arguments. \nThe Script has to use SQS-Syntax. \nSee Mission editor Description for more information about scripted \n waypoints. \n \n \nSyntax:  \n waypoint setWaypointScript command \nParameters: \nwaypoint: Array - format Waypoint \ncommand: String \nReturn Value: \n Nothing
setWaypointSpeed \nGame: Armed Assault (1.00) \nDescription: Switches the group speed mode when the waypoint becomes active. \nPossible values are: "UNCHANGED" "LIMITED" "NORMAL" "FULL" \nSyntax:  \n waypoint setWaypointSpeed mode \nParameters: \nwaypoint: Array - format Waypoint \nmode: String \nReturn Value: \n Nothing
setWaypointStatements \nGame: Armed Assault (1.00) \nDescription: The waypoint is done only when the condition is fulfilled. When the waypoint \n is done, the statement expression is executed. \nWithin the Condition &amp; Statement code string: this refers to the group \n leader thislist refers to an array containing each unit in the group \n \nSyntax:  \n waypoint setWaypointStatements [condition, statement] \nParameters: \nwaypoint: Array - format Waypoint \n[condition, statement]: Array \ncondition: String \nstatement: String \nReturn Value: \n Nothing
setWaypointTimeout \nGame: Armed Assault (1.00) \nDescription: Defines the time between condition satisfaction and waypoint finish \n (randomly from min to max, with an average value mid).  \nSyntax:  \n waypoint setWaypointTimeout [min, mid, max] \nParameters: \nwaypoint: Array - format Waypoint \n[min, mid, max]: Array \nmin: Number \nmid: Number \nmax: Number \nReturn Value: \n Nothing
setWaypointType \nGame: Armed Assault (1.00) \nDescription: Changes the waypoint type.  \nType can be: "MOVE" "DESTROY" "GETIN" "SAD" "JOIN" "LEADER" "GETOUT \n" "CYCLE" "LOAD" "UNLOAD" "TR UNLOAD" "HOLD" "SENTRY" "GUARD" "TALK \n" "SCRIPTED" "SUPPORT" "GETIN NEAREST" "DISMISS" "LOITER" (new in Arma \n 3) "AND" (only for game logics) "OR" (only for game logics) \nMore details at Waypoint types. \nSyntax:  \n waypoint setWaypointType type \nParameters: \nwaypoint: Array - format Waypoint \ntype: String \nReturn Value: \n Nothing
setWaypointVisible \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Sets the visibility of the waypoint.  \nSyntax:  \n waypoint setWaypointVisible visible \nParameters: \nwaypoint: Array - format Waypoint \nvisible: Boolean \nReturn Value: \n Nothing
setWeaponReloadingTime \nGame: ArmA 2: Operation Arrowhead (1.60) \nDescription: Sets states and/or makes an action of/on weapon. Reload time is between \n 0 and 1 inclusive, where 1 is 100% of maximum reloading time.  \nSyntax:  \n vehicle setWeaponReloadingTime [gunner, weaponName, reloadTime] \nParameters: \nvehicle: Object \n[gunner, weaponName, reloadTime]: Array \nReturn Value: \n Boolean
setWind \nGame: ARMA 2  (1.00) \nDescription: Set current (forced == false) or permanent (forced == true) wind \n direction and force.  \nSyntax:  \n setWind [x, z, forced] \nParameters: \n[x, z, forced]: Array \nx: Number \nz: Number \nforced: Boolean \nReturn Value: \n Nothing
setWPPos \nGame: Operation Flashpoint (1.21) \nDescription: Set waypoint position  \nSyntax:  \n waypoint setWPPos pos \nParameters: \nwaypoint: Array - format Waypoint \npos: Array - format Position2D \nReturn Value: \n Nothing
show3DIcons \nGame: ARMA 2  (1.00) \nDescription: Toggle the drawing of 3D icons.  \nSyntax:  \n map show3DIcons bool \nParameters: \nmap: Control - \nbool: Boolean - \nReturn Value: \n Nothing
showCinemaBorder \nGame: Operation Flashpoint (1.00) \nDescription: Force drawing of cinema borders. This is normally used in cutscenes \n to indicate player has no control.  \nSyntax:  \n showCinemaBorder show \nParameters: \nshow: Boolean \nReturn Value: \n Nothing
showCommandingMenu \nGame: ARMA 2  (1.00) \nDescription: Create the commanding menu described by the given config class or menu \n name. When the name is empty, the current menu is hidden.   \nSyntax:  \n showCommandingMenu name \nParameters: \nname: String - Class name or user menu name (with "#USER:" prefix and "_#" page number suffix, where # is the page number starting with 0). \nReturn Value: \n Nothing
showCompass \nGame: Operation Flashpoint (1.00) \nDescription: Shows or hides the compass on the map screen, if enabled for the mission \n and you possess the item. (default true)  \nSyntax:  \n showCompass show \nParameters: \nshow: Boolean \nReturn Value: \n Nothing
showGPS \nGame: Operation Flashpoint (1.00) \nDescription: Shows or hides the GPS receiver on the map screen, if enabled for the mission \n and you possess the item. (default false)  \nSyntax:  \n showGPS show \nParameters: \nshow: Boolean \nReturn Value: \n Nothing
showHUD \nGame: ARMA 2  (1.00) \nDescription: Enable / disable showing of HUD.  \nSyntax:  \n showHUD enable \nParameters: \nenable: Boolean - \nReturn Value: \n Nothing
showLegend \nGame: ARMA 2  (1.00) \nDescription: Show/hide map legend.  \nSyntax:  \n map showLegend bool \nParameters: \nmap: Control - \nbool: Boolean - \nReturn Value: \n Nothing
showMap \nGame: Operation Flashpoint (1.00) \nDescription: Enable Map (default true)  \nSyntax:  \n showMap show \nParameters: \nshow: Boolean \nReturn Value: \n Nothing
shownCompass \nGame: Operation Flashpoint (1.00) \nDescription: Check if player has compass enabled.  \nSyntax:  \n Boolean = shownCompass \nReturn Value: \n Boolean
showNewEditorObject \nGame: ARMA 2  (1.00) \nDescription: Show the add editor object dialog,type is editor object type,class \n is,class definition to automatically select,side filters by a certain \n,side,pos is position to create the object.   \nSyntax:  \n map showNewEditorObject [type,class,side,position] \nParameters: \nmap: Control - \n[type,class,side,position]: Array - \nReturn Value: \n Any
shownGPS \nGame: Operation Flashpoint (1.00) \nDescription: Check if player has GPS reciever enabled.  \nSyntax:  \n Boolean = shownGPS \nReturn Value: \n Boolean
shownMap \nGame: Operation Flashpoint (1.00) \nDescription: Check if player has Map enabled.  \nSyntax:  \n Boolean = shownMap \nReturn Value: \n Boolean
shownPad \nGame: Operation Flashpoint (1.00) \nDescription: Check if player has Notebook enabled.  \nSyntax:  \n Boolean = shownPad \nReturn Value: \n Boolean
shownRadio \nGame: Operation Flashpoint (1.00) \nDescription: Check if player has Radio enabled.  \nSyntax:  \n Boolean = shownRadio \nReturn Value: \n Boolean
shownWarrant \nGame: Operation Flashpoint (1.00) \nDescription: Check if player has ID card enabled. Obsolete command.  \nSyntax:  \n Boolean = shownWarrant \nReturn Value: \n Boolean
shownWatch \nGame: Operation Flashpoint (1.00) \nDescription: Check if player has Watch enabled.  \nSyntax:  \n Boolean = shownWatch \nReturn Value: \n Boolean
showPad \nGame: Operation Flashpoint (1.00) \nDescription: Shows or hides the notebook on the map screen, if enabled for the mission \n. (default true). It is no longer relevant to Arma 2.  \nSyntax:  \n showPad show \nParameters: \nshow: Boolean \nReturn Value: \n Nothing
showRadio \nGame: Operation Flashpoint (1.00) \nDescription: Shows or hides the radio on the map screen, if enabled for the mission \n and you possess the item. (default true)  \nSyntax:  \n showRadio show \nParameters: \nshow: Boolean \nReturn Value: \n Nothing
showSubtitles \nGame: ARMA 2  (1.00) \nDescription: Enable / disable showing of subtitles. Return the previous state \n.  \nSyntax:  \n showSubtitles enable \nParameters: \nenable: Boolean - \nReturn Value: \n Boolean
showWarrant \nGame: Operation Flashpoint (1.00) \nDescription: Enable ID card (default false). Obsolete command.  \nSyntax:  \n showWarrant show \nParameters: \nshow: Boolean \nReturn Value: \n Nothing
showWatch \nGame: Operation Flashpoint (1.00) \nDescription: Shows or hides the watch on the map screen, if enabled for the mission \n and you possess the item. (default true)  \nSyntax:  \n showWatch show \nParameters: \nshow: Boolean \nReturn Value: \n Nothing
showWaypoint \nGame: Armed Assault (1.00) \nDescription: Sets the condition determining when the waypoint is shown. \nPossible values are: "NEVER", "EASY" and "ALWAYS".  \nSyntax:  \n waypoint showWaypoint show \nParameters: \nwaypoint: Array - format Waypoint \nshow: String As above \nReturn Value: \n Nothing
side \nGame: Operation Flashpoint (1.00) \nDescription: Returns the side of a unit or object. \nOnce dead, a unit will be on the civilian side. Query the side of the Group \n to get a reliable result. \nWhen used in conjunction with a format statement (hint format["%1",side \n player]), the returned strings are: "WEST", "EAST", "GUER", "CIV", "LOGIC \n", "ENEMY" (eg: renegades), "AMBIENT LIFE" or "UNKNOWN". \nSyntax:  \n Side = side unitName \nParameters: \nunitName: Object or Group \nReturn Value: \n Side
sideChat \nGame: Operation Flashpoint (1.34) \nDescription: Types text to the side radio channel. Note: This function only types \n text to the list, it does not broadcast the message. If you want \n the message to show on all computers, you have to execute it on all of them \n.  \nSyntax:  \n unitName sideChat chatText \nParameters: \nunitName: Object \nchatText: String \nReturn Value: \n Nothing 
sideEnemy \nGame: Operation Flashpoint: Resistance (1.78) \nDescription: The Enemy side (used for renegades). Unit of this side is enemy to everyone \n. To become one, you can attack members of your own side.  \nSyntax:  \n Side = sideEnemy \nReturn Value: \n Side
sideFriendly \nGame: Operation Flashpoint: Resistance (1.78) \nDescription: The Friendly side (used for captives).  \nSyntax:  \n Side = sideFriendly \nReturn Value: \n Side
sideLogic \nGame: Operation Flashpoint: Resistance (1.90) \nDescription: The Logic side.  \nSyntax:  \n Side = sideLogic \nReturn Value: \n Side
sideRadio \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Send the message to the side radio channel. Message is defined in Description \n.ext file.  \nSyntax:  \n unitName sideRadio chat \nParameters: \nunitName: Object \nchat: String \nReturn Value: \n Nothing
sideUnknown \nGame: ARMA 2  (1.00) \nDescription: The unknown side.  \nSyntax:  \n sideUnknown \nReturn Value: \n Side
simpleTasks \nGame: ARMA 2  (1.00) \nDescription: Return all simple tasks assigned to given person.  \nSyntax:  \n simpleTasks person \nParameters: \nperson: Object - \nReturn Value: \n Array
simulationEnabled \nGame: ARMA 2  (1.00) \nDescription: Check if the entity has enabled simulation.   \nSyntax:  \n simulationEnabled entity \nParameters: \nentity: Object \nReturn Value: \n Boolean
sin \nGame: Operation Flashpoint (1.00) \nDescription: Sine of x, argument in Degrees.  \nSyntax:  \n Number = sin x \nParameters: \nx: Number \nReturn Value: \n Number
size \nGame: Armed Assault (1.08) \nDescription: Returns a location's size. \nSyntax:  \n size location \nParameters: \nlocation: Location \nReturn Value: \n Array = in format [x,y] in meters
sizeOf \nGame: Armed Assault (1.08) \nDescription: Return approximate size of the entity of given type (y-axis, in meters \n) \nObject has to be present in current mission to be able to read a size \n (otherwise zero will be returned).  \nSyntax:  \n Number = sizeOf type \nParameters: \ntype: String \nReturn Value: \n Number
skill \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Returns current level of ability of person, in range between 0 and 1. Skill \n 1 is highest skill.  \nSyntax:  \n skill unitName \nParameters: \nunitName: Object \nReturn Value: \n Number 
skipTime \nGame: Operation Flashpoint (1.00) \nDescription: Jumps the specified number of hours forward or backward. \nThe time of day and tides are adjusted, but no changes are made to any units \n. If present, the lower level of clouds instantly jump to the position \n they would be in if time had passed normally. \nSyntax:  \n skipTime duration \nParameters: \nduration: Number - Hours to skip. \nA positive value will create a forward time jump, a negative value will jump backwards. \nOne second is roughly 0.00026 hours. \nAny calculations must be enclosed in parentheses, e.g. skipTime (_seconds/3600) \nReturn Value: \n Nothing
sleep \nGame: Armed Assault (1.00) \nDescription: Suspend execution for given time in seconds. The sleep precision \n is given by a framerate, the delay given is the minimal delay expected \n. Must be called inside of a context which is interruptible, i.e. a script \n executed by execVM or spawn.  \nSyntax:  \n sleep delay \nParameters: \ndelay: Number \nReturn Value: \n Nothing
sliderPosition \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Return current thumb position of slider idc of topmost user dialog \n.  \nSyntax:  \n sliderPosition idc \nParameters: \nidc: Number \nReturn Value: \n Number 
sliderRange \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Return limits, as an Array [min, max] of slider idc of topmost user \n dialog.  \nSyntax:  \n sliderRange idc \nParameters: \nidc: Number \nReturn Value: \n Array [min, max] 
sliderSetPosition \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Set current thumb position of slider idc of topmost user dialog.  \nSyntax:  \n sliderSetPosition [idc, pos] \nParameters: \n[idc, pos]: Array \nidc: Number of control \npos: Number \nReturn Value: \n Nothing 
sliderSetRange \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Set limits of slider idc of topmost user dialog.  \nSyntax:  \n sliderSetRange [idc, min, max] \nParameters: \n[idc, min, max]: Array \nidc: Number of control \nmin: Number \nmax: Number \nReturn Value: \n Nothing 
sliderSetSpeed \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Set speed of slider with id idc of topmost user dialog. Click to arrow \n - move by line Click to scale outside thumb - move by page.  \nSyntax:  \n sliderSetSpeed [idc,line,page] \nParameters: \n[idc,line,page]: Array \nidc: Number of control \nline: Number \npage: Number \nReturn Value: \n Nothing 
sliderSpeed \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Return speed, as an Array [min, max] of slider idc of topmost user \n dialog.  \nSyntax:  \n sliderSpeed idc \nParameters: \nidc: Number of control \nReturn Value: \n Array: [min, max] 
someAmmo \nGame: Operation Flashpoint (1.00) \nDescription: Check if unit has some ammo.  \nSyntax:  \n Boolean = someAmmo unitName \nParameters: \nunitName: Object \nReturn Value: \n Boolean
soundVolume \nGame: Operation Flashpoint (1.00) \nDescription: Check current sound volume (set by fadeSound).  \nSyntax:  \n Number = soundVolume \nReturn Value: \n Number
spawn \nGame: Armed Assault (1.00) \nDescription: Starts running a new script (SQF). Additional arguments are passed \n in local _this variable. \nThe new script is running in parallel, spawn does not wait for it to be done \n, instead spawn returns a Script handle.  \nSyntax:  \n Script = arguments spawn code \nParameters: \narguments: Any Value \ncode: Code \nReturn Value: \n Script
speed \nGame: Operation Flashpoint (1.00) \nDescription: Object speed (in km/h).  \nSyntax:  \n Number = speed object \nParameters: \nobject: Object \nReturn Value: \n Number
speedMode \nGame: Operation Flashpoint (1.00) \nDescription: Returns speed mode of the group, which can be any of the following \n:  "LIMITED" "NORMAL" "FULL" \nSyntax:  \nString = speedMode groupName \nParameters: \ngroupName: Object or Group \nReturn Value: \n String
sqrt \nGame: Operation Flashpoint (1.00) \nDescription: Returns square root of x.  \nSyntax:  \n Number =  sqrt x \nParameters: \nx: Number \nReturn Value: \n Number
startLoadingScreen \nGame: ARMA 2  (1.00) \nDescription: Shows loading screen with the given text,using the given resource \n.,When loading screen is shown,simulation and scene drawing is disabled \n, scripts run at full speed.   \nSyntax:  \n startLoadingScreen [text] or [text,resource] \nParameters: \n[text] or [text,resource]: Array - \nReturn Value: \n Nothing
step \nGame: Armed Assault (1.00) \nDescription: Optionally can set step. If you want to count down, step must be specified \n, and set negative. Default value is 1.  \nSyntax:  \n for /.../ step step \nParameters: \nfor /.../: For Type \nstep: Number \nReturn Value: \n For Type
stop \nGame: Operation Flashpoint (1.00) \nDescription: Stop AI unit. \nStopped unit will not be able to move, fire, or change its orientation \n to follow a watched object. \nIt may still change the stance if deemed appropriate (e.g. under \n fire). \nUse disableAI to disable specific AI capabilities.  \nSyntax:  \n unitName stop stop \nParameters: \nunitName: Object \nstop: Boolean \nReturn Value: \n Nothing
stopped \nGame: Operation Flashpoint (1.00) \nDescription: Check if unit is stopped by stop command.  \nSyntax:  \n Boolean = stopped unitName \nParameters: \nunitName: Object \nReturn Value: \n Boolean
str \nGame: Armed Assault (1.00) \nDescription: Converts any variable to a string.  \nSyntax:  \n String = str value \nParameters: \nvalue: Anything \nReturn Value: \n String
sunOrMoon \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns the sun to moon transition state.  \nSyntax:  \n Number = sunOrMoon \nReturn Value: \n Number
supportInfo \nGame: Armed Assault (1.00) \nDescription: Creates a list of supported operators and type. Each field of array \n has the format: "x:name" Where x can be:'t' - type'n' - null operator \n'u' - unary operator'b' - binary operator. \n'name' is the operator or type name (in case operator, type of input \n operands is included). mask parameter can be an empty string, or one of field \n. In this case, function returns empty array, if operator is not included \n in the list. Limited wildcard support is available. Type x may be replaced \n with *, meaning all types. For the mask partial match may be used \n, like abc*, meaning any operators starting with 'abc' are reported \n, for example: *:name, t:*, t:name* or *:*.  \nSyntax:  \n Array =  supportInfo mask \nParameters: \nmask: String \nReturn Value: \n Array
suppressFor \nGame: ARMA 2  (1.05) \nDescription: Force suppressive fire from the unit.  \nSyntax:  \n unit suppressFor duration \nParameters: \nunit: Object \nduration: Number \nReturn Value: \n Nothing
surfaceIsWater \nGame: Armed Assault (1.00) \nDescription: Returns whether water is at given position.  \nSyntax:  \nBoolean =  surfaceIsWater [x, y] \nParameters: \n[x, y]: Array - format Position2D \nReturn Value: \n Boolean
surfaceNormal \nGame: ArmA 2: Operation Arrowhead (1.60) \nDescription: Return surface normal on given position.  \nSyntax:  \n surfaceNormal position \nParameters: \nposition: Array - format Position2D \nReturn Value: \n Array - Example: [-0.102321,0.19977,0.974486]
surfaceType \nGame: Armed Assault (1.00) \nDescription: Returns what surface is at the given position.  \nSyntax:  \n String = surfaceType [x, y] \nParameters: \n[x, y]: Array - format Position2D \nReturn Value: \n String
switch \nGame: Armed Assault (1.00) \nDescription: See switch do  \nSyntax:  \n switch exp \nParameters: \nexp: Anything \nReturn Value: \n Switch Type
switchableUnits \nGame: Armed Assault (1.00) \nDescription: Return a list of units accessible through Team Switch.  \nSyntax:  \n Array = switchableUnits \nReturn Value: \n Array
switchAction \nGame: ARMA 2  (1.00) \nDescription: When used on a person, the given action is started immediately (there \n is no transition). Use switchmove "" to switch back to the default \n movement if there is no transition back, otherwise the person may be stuck \n.  \nSyntax:  \n soldier switchAction action \nParameters: \nsoldier: Object \naction: String \nReturn Value: \n Nothing
switchCamera \nGame: Operation Flashpoint (1.00) \nDescription: Switch camera to given vehicle / camera. Mode is one of:  "INTERNAL \n": 1st person "GUNNER": optics / sights "EXTERNAL": 3rd person "GROUP \n": group "VIEW": exactly what spectated unit sees (gun optics, binoculars \n, TI and NV, etc.) (VBS2 1.30+ only) \n \nNote: If you switch to a unit in a vehicle, this command uses the correct \n turret. \nSyntax:  \n unitName switchCamera mode \nParameters: \nunitName: Object \nmode: String \nReturn Value: \n Nothing
switchGesture \nGame: ARMA 2  (1.00) \nDescription: When used on a person,the given move is started immediately (there \n is no transition).  \nSyntax:  \n soldier switchGesture moveName \nParameters: \nsoldier:  - \nObject,moveName:  - \nReturn Value: \n Nothing
switchLight \nGame: Operation Flashpoint (1.00) \nDescription: Controls whether a lamp is lit or not.  \nSyntax:  \n lamp switchLight mode \nParameters: \nlamp: Object \nmode: String - Mode can be: "ON", "OFF" or "AUTO" (Lamp is on only during nighttime , default) \nReturn Value: \n Nothing
switchMove \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: When used on a person, the given move is started immediately (there \n is no transition). Use switchmove "" to switch back to the default \n movement if there is no transition back, otherwise the person may be stuck \n.  \nSyntax:  \n person switchmove movename \nParameters: \nperson: Object \nmovename: String \nReturn Value: \n Nothing
synchronizedObjects \nGame: ARMA 2  (1.00) \nDescription: Return the list of objects synchronized with the given unit.  \nSyntax:  \n synchronizedObjects unit \nParameters: \nunit: Object - \nReturn Value: \n Array
synchronizeObjectsAdd \nGame: ARMA 2  (1.00) \nDescription: Add given objects to the unit's list of synchronized objects.  \nSyntax:  \n unit synchronizeObjectsAdd [objects] \nParameters: \nunit: Object - \n[objects]: Array - \nReturn Value: \n Nothing
synchronizeObjectsRemove \nGame: ARMA 2  (1.00) \nDescription: Remove given objects from the unit's list of synchronized objects \n.  \nSyntax:  \n unit synchronizeObjectsRemove [objects] \nParameters: \nunit: Object - \n[objects]: Array - \nReturn Value: \n Nothing
synchronizeTrigger \nGame: ARMA 2  (1.00) \nDescription: Synchronizes the trigger with zero or more waypoints.  \nSyntax:  \n trigger synchronizeTrigger [waypoint1,...] \nParameters: \ntrigger: Object - trigger to synchronize \n[waypoint1, waypoint2,...]: Array of waypoints to synchronize with trigger. Array can be empty to unset. \nwaypoint1: Waypoint - first waypoint \nReturn Value: \n Nothing
synchronizeWaypoint \nGame: Armed Assault (1.00) \nDescription: Synchronizes the waypoint with other waypoints. Each waypoint is given \n as an array [group, index].  \nSyntax:  \n waypoint synchronizeWaypoint [waypoint1, waypoint2,...] \nParameters: \nwaypoint: Array - format Waypoint \n[waypoint1, waypoint2,...]: Array of waypoints \nwaypoint1: Array - format Waypoint \nwaypoint2: Array - format Waypoint \nAnd so on...... \nReturn Value: \n Nothing
tan \nGame: Operation Flashpoint (1.00) \nDescription: Tangent of x, argument in Degrees.  \nSyntax:  \n Number = tan x \nParameters: \nx: Number \nReturn Value: \n Number
targetsAggregate \nGame: ARMA 2  (1.00) \nDescription: Aggregate candidates.  \nSyntax:  \n [speaker, side, unit, place, time] targetsAggregate candidates \nParameters: \n[speaker, side, unit, place, time]: Array \ncandidates: Array \nReturn Value: \n Array
targetsQuery \nGame: ARMA 2  (1.00) \nDescription: Find all targets known to sender matching given query.  \nSyntax:  \n speaker targetsQuery [receiver,side,unit,place,time] \nParameters: \nspeaker: Object - \n[receiver,side,unit,place,time]: Array - \nReturn Value: \n Array
taskChildren \nGame: ARMA 2  (1.00) \nDescription: Return the child tasks of the specified task.  \nSyntax:  \n taskChildren task \nParameters: \ntask: Task - \nReturn Value: \n Array
taskCompleted \nGame: ARMA 2  (1.00) \nDescription: Return if task is completed. (state Succeeded, Failed or Canceled \n)  \nSyntax:  \n taskCompleted task \nParameters: \ntask: Task \nReturn Value: \n Boolean
taskDescription \nGame: ARMA 2  (1.00) \nDescription: Returns the sub-parts of the task description.  \nSyntax:  \n Array = taskDescription task \nParameters: \ntask: Task \nReturn Value: \n Array: [Task description, Task title, Task waypoint description]
taskDestination \nGame: ARMA 2  (1.00) \nDescription: Returns the position of the task (as specified by destination parameter \n in config).  \nSyntax:  \n taskDestination task \nParameters: \ntask: Task - \nReturn Value: \n Array
taskHint \nGame: ARMA 2  (1.00) \nDescription: Shows info about new, changed or failed task. The text can contain \n several lines. \n is used to indicate the end of a line.  To maintain \n Arma 3 visual style, it's recommended to use BIS_fnc_showNotification \n instead. \nSyntax:  \n taskHint [hintText, [r, g, b, a], icon] \nParameters: \n[hintText, [r, g, b, a], icon]: Array \nhintText: String \n[r, g, b, a]: Array - format Color \nicon: String - possible values: taskNew, taskDone, taskFailed, taskCurrent \nReturn Value: \n Nothing
taskNull \nGame: ARMA 2  (1.00) \nDescription: A non-existing task. This value is not equal to anything, including \n itself.  \nSyntax:  \n taskNull \nReturn Value: \n Task
taskParent \nGame: ARMA 2  (1.00) \nDescription: Return the parent task of the specified task.  \nSyntax:  \n taskParent task \nParameters: \ntask: Task - \nReturn Value: \n Task
taskResult \nGame: ARMA 2  (1.00) \nDescription: Send a result of the task to the task sender.  \nSyntax:  \n task sendTaskResult [state,result,sentence] \nParameters: \ntask: Task - \n[state,result,sentence]: Array - \nReturn Value: \n Nothing
taskState \nGame: ARMA 2  (1.00) \nDescription: Returns the current state of a task.  \nPossible return values are: None Created Assigned Succeeded Failed \n Canceled \nSyntax:  \n String = taskState  Task \nParameters: \nTask - the task you want to query \nReturn Value: \n String - current state of task
teamMember \nGame: ARMA 2  (1.00) \nDescription: Return an agent for given person.  \nSyntax:  \n teamMember person \nParameters: \nperson: Object \nReturn Value: \n Team Member
teamMemberNull \nGame: ARMA 2  (1.00) \nDescription: A non-existing team member. This value is not equal to anything, including \n itself.  \nSyntax:  \n teamMemberNull \nReturn Value: \n Team Member
teamName \nGame: ARMA 2  (1.00) \nDescription: Return a name of given team.  \nSyntax:  \n teamName team \nParameters: \nteam: Team Member \nReturn Value: \n String
teams \nGame: ARMA 2  (1.00) \nDescription: Return a list of teams in the current mission.  \nSyntax:  \n teams \nReturn Value: \n Array
teamSwitch \nGame: Armed Assault (1.00) \nDescription: Invoke the Team Switch dialog (force it even when conditions are not met).  \nSyntax:  \n teamSwitch \nReturn Value: \n Nothing
teamSwitchEnabled \nGame: Armed Assault (1.00) \nDescription: Check if Team Switch is currently enabled. \nTeam Switch is enabled by default. \nSyntax:  \n Boolean = teamSwitchEnabled \nReturn Value: \n Boolean
teamType \nGame: ARMA 2  (1.00) \nDescription: Returns a type of given team.  \nSyntax:  \n teamType team \nParameters: \nteam: Team Member \nReturn Value: \n String
terminate \nGame: Armed Assault (1.00) \nDescription: Terminate (abort) the script.  \nSyntax:  \n terminate scriptHandle \nParameters: \nscriptHandle: Script \nReturn Value: \n Nothing
terrainIntersect \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Checks for intersection of terrain between two positions. Returns \n true if intersects with terrain. Uses PositionATL  \nSyntax:  \n terrainIntersect [pos1, pos2] \nParameters: \npos1: PositionATL \npos2: PositionATL \nReturn Value: \n Boolean
terrainIntersectASL \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Checks for intersection of terrain between two positions. Returns \n true if intersects with terrain. Uses PositionASL  \nSyntax:  \n terrainIntersectASL [pos1, pos2] \nParameters: \npos1: PositionASL \npos2: PositionASL \nReturn Value: \n Boolean
text \nGame: Armed Assault (1.00) \nDescription: Creates a structured text containing the given plain text.  \nSyntax:  \n Structured Text = text text \nParameters: \ntext: String \nReturn Value: \n Structured Text
textLog \nGame: Operation Flashpoint (1.00) \nDescription: Dump argument value to debugging output.  \nNote: This command is non-functional in the retail version. \nSyntax:  \n textLog anything \nParameters: \nanything: Any Value \nReturn Value: \n Nothing
textLogFormat \nGame: ARMA 2  (1.05) \nDescription: Debugging output. This command is non-functional in the retail version \n.  \nSyntax:  \n textLogFormat [format, arg1, arg2,...] \nParameters: \nformat: dataType \narg1: Any Value \narg2: Any Value \nReturn Value: \n Nothing
tg \nGame: Operation Flashpoint (1.00) \nDescription: Identical to tan \nSyntax: 
then \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: First or second element of array is executed depending on result \n of if condition. Result of the expression executed is returned as a result \n (result may be Nothing).   \nSyntax:  \n if then else \nParameters: \nif: If Type \nelse: Array \nReturn Value: \n Anything
throw \nGame: Armed Assault (1.00) \nDescription: Throws an exception. The exception is processed by first catch block \n.   \nSyntax:  \n throw expression \nParameters: \nexpression: Anything \nReturn Value: \n Nothing
time \nGame: Operation Flashpoint (1.00) \nDescription: Time elapsed since mission started (in seconds).  \nSyntax:  \n Number = time \nReturn Value: \n Number
titleCut \nGame: Operation Flashpoint (1.00) \nDescription: Obsolete command. Use cutText instead.  \nSyntax:  \n titleCut [text, type, speed] \nParameters: \n[text, type, speed]: Array \ntext: String \ntype: String \nspeed: Number - optional, default 1. \nReturn Value: \n Nothing
titleFadeOut \nGame: Armed Assault (1.05) \nDescription: Terminate the title effect and set duration of the fade out phase \n to the given time.  \nSyntax:  \n titleFadeOut duration \nParameters: \nduration: Number \nReturn Value: \n Nothing
titleObj \nGame: Operation Flashpoint (1.00) \nDescription: Object title - Object can be defined in Description.ext \ntype may be one of: \n• "PLAIN" \n• "PLAIN DOWN" \n• "BLACK" \n• "BLACK FADED" \n• "BLACK OUT" \n• "BLACK IN" \n• "WHITE OUT" \n• "WHITE IN" \nSee Title Effect Type for more information about these types.  \nSyntax:  \n titleObj [text, type, speed] \nParameters: \n[text, type, speed]: Array \ntext: String \ntype: String. \nspeed: Number - optional, default 1. \nReturn Value: \n Nothing
titleRsc \nGame: Operation Flashpoint (1.00) \nDescription: Resource title - Resource can be defined in Description.ext Also \n see cutRsc, with these two commands you can show two different resources \n at once.  \nSyntax:  \n titleRsc [text, type, speed] \nParameters: \n[text, type, speed]: Array \ntext: String - the class name of the resource. ("Default" will remove the current resource.) \ntype: String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See Title Effect Type for more information about these values. \nspeed: Number - optional, default 1 \nReturn Value: \n Nothing
titleText \nGame: Operation Flashpoint (1.00) \nDescription: Displays text across the screen. \nIf used along with cutText two different texts (in different type \n styles) can be shown at once.  \nSyntax:  \n titleText [text, type, speed] \nParameters: \ntext: String \ntype: String- Possible Title Effect Types: \n• "PLAIN" \n• "PLAIN DOWN" \n• "BLACK" \n• "BLACK FADED" \n• "BLACK OUT" \n• "BLACK IN" \n• "WHITE OUT" \n• "WHITE IN" \nspeed: Number - optional, default 1 \nReturn Value: \n Nothing
to \nGame: Armed Assault (1.00) \nDescription: Continue sequence of 'for' command.  \nSyntax:  \n for "_var" from a to b \nParameters: \nfor "_var" from a: For Type \nb: Number \nReturn Value: \n For Type
toArray \nGame: Armed Assault (1.09) \nDescription: Converts the supplied String into an Array of Numbers.  \nThe numbers in the created array are the decimal Unicode representations \n of characters. \n \n \nSyntax:  \n toArray string \nParameters: \nstring: String \nReturn Value: \n Array
toLower \nGame: Armed Assault (1.09) \nDescription: Converts the supplied string to all lowercase characters.  \nSyntax:  \n toLower string \nParameters: \nstring: String \nReturn Value: \n String
toString \nGame: Armed Assault (1.09) \nDescription: Converts the supplied Array of Numbers into a String.  \nThe numbers in the array to be converted are the decimal Unicode \n representations of characters. \n \n \nSyntax:  \n toString array \nParameters: \narray: Array \nReturn Value: \n String
toUpper \nGame: Armed Assault (1.09) \nDescription: Converts the supplied string to all uppercase characters.  \nSyntax:  \n toUpper string \nParameters: \nstring: String \nReturn Value: \n String
triggerActivated \nGame: ARMA 2  (1.00) \nDescription: Returns true if the trigger has been activated.  \nSyntax:  \n triggerActivated trigger \nParameters: \ntrigger: Object \nReturn Value: \n Boolean
triggerActivation \nGame: ARMA 2  (1.00) \nDescription: Returns trigger activation in the form [by, type, repeating].  \nSyntax:  \n triggerActivation trigger \nParameters: \ntrigger: Object \nReturn Value: \n Array
triggerArea \nGame: ARMA 2  (1.00) \nDescription: Returns trigger area in the form [a, b, angle, rectangle].  \nSyntax:  \n triggerArea trigger \nParameters: \ntrigger: Object \nReturn Value: \n Array
triggerAttachedVehicle \nGame: ARMA 2  (1.00) \nDescription: Returns vehicle attached to the trigger (for example using triggerAttachVehicle \n).  \nSyntax:  \n triggerAttachedVehicle trigger \nParameters: \ntrigger: Object \nReturn Value: \n Object
triggerAttachObject \nGame: Armed Assault (1.00) \nDescription: Assigns a static object to the trigger. The activation source is changed \n to "STATIC".  \nSyntax:  \n triggerName triggerAttachObject objectId \nParameters: \ntriggerName: Object \nobjectId: Number \nReturn Value: \n Nothing
triggerAttachVehicle \nGame: Armed Assault (1.00) \nDescription: Specifies the entity which will activate the selected trigger. \nIf [] is given, the trigger is decoupled from the assigned vehicle \n (example 2).If the activation source is "VEHICLE", "GROUP", "LEADER \n" or "MEMBER", it's changed to "NONE". If [vehicle] is given, the trigger \n is coupled to the vehicle or its group. When the source is "GROUP \n", "LEADER" or "MEMBER", it's coupled to the group, otherwise it's coupled \n to the vehicle and the source is changed to "VEHICLE".  \nSyntax:  \n triggerName triggerAttachVehicle [] or [vehicle] \nParameters: \ntriggerName: Object \n[] or [vehicle]: Array \nReturn Value: \n Nothing
triggerStatements \nGame: ARMA 2  (1.00) \nDescription: Returns trigger statements in the form [cond, activ, desactiv].  \nSyntax:  \n triggerStatements trigger \nParameters: \ntrigger: Object \nReturn Value: \n Array
triggerText \nGame: ARMA 2  (1.00) \nDescription: Returns trigger text.  \nSyntax:  \n triggerText trigger \nParameters: \ntrigger: Object \nReturn Value: \n String
triggerTimeout \nGame: ARMA 2  (1.00) \nDescription: Returns trigger timeout in the form [min, mid, max, interruptable \n].  \nSyntax:  \n triggerTimeout trigger \nParameters: \ntrigger: Object \nReturn Value: \n Array
triggerType \nGame: ARMA 2  (1.00) \nDescription: Returns trigger type.  \nSyntax:  \n triggerType trigger \nParameters: \ntrigger: Object \nReturn Value: \n String
true \nGame: Operation Flashpoint (1.00) \nDescription: Always true  \nSyntax:  \n true \nReturn Value: \n Boolean
try \nGame: Armed Assault (1.00) \nDescription: Defines a try-catch structure. This sets up an exception handling \n block. Any thrown exception in a try block is caught in a catch \n block. The structured exception block has following form: \ntry //begin of try-catch block  { //block, that can throw exception \n } catch { //block, that process an exception. Exception is described \n in _exception variable };   \nSyntax:  \n try code \nParameters: \ncode: Code \nReturn Value: \n Exception Type
turretUnit \nGame: ARMA 2  (1.00) \nDescription: Returns the unit in the vehicle turret.   \nSyntax:  \n vehicle turretUnit turretpath \nParameters: \nvehicle: Object \nturretpath: Array \nReturn Value: \n Object
type \nGame: Armed Assault (1.08) \nDescription: Returns a string of a location's class name. \nSyntax:  \n type location \nParameters: \nlocation: Location \nReturn Value: \n String
typeName \nGame: Armed Assault (1.00) \nDescription: Returns the data type of an expression.  \nThe type is returned as an all-uppercase string having one of the following \n values: \n "ARRAY", \n"BOOL", \n"CODE", \n"CONFIG", \n"CONTROL", \n"DISPLAY", \n"GROUP", \n"LOCATION", \n"OBJECT", \n"SCALAR", \n"SCRIPT", \n"SIDE", \n"STRING", \n"TEXT".  \nThey represent the available data types in ArmA. If the argument \n is  nil (undefined), it returns an empty string. \nSyntax:  \n String =  typeName anything \nParameters: \nanything: Anything \nReturn Value: \n String
typeOf \nGame: Operation Flashpoint: Resistance (1.90) \nDescription: Returns the class type of a given object.  \nSyntax:  \n String =  typeOf vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n String
uiNamespace \nGame: ARMA 2  (1.00) \nDescription: Return the global namespace attached to user interface.  \nSyntax:  \n uiNamespace \nReturn Value: \n Namespace
uiSleep \nGame: ARMA 2  (1.05) \nDescription: Suspend execution of script for given uitime.  uiSleep is a sleep \n method to delay script execution where script time/simulation time \n is stopped. uiSleep is basically using the system time (uiTime more \n specifically) and not simulation time. So in the cases where sleep \n command would get stuck indefinitely, uiSleep can still be used \n to effectively delay script execution. For example in a mission \n briefing or an editor or when simulation is paused in general.   \nSyntax:  \n uiSleep delay \nParameters: \ndelay&#160;: Number \nReturn Value: \n Nothing
unassignTeam \nBehavior: local \nGame: Armed Assault (1.00) \nDescription: Unassigns the unit (in the case of a vehicle its commander unit) from \n his team. This is equal to unit assignTeam "MAIN".  \nSyntax:  \n unassignTeam vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n Nothing
unassignVehicle \nBehavior: local \nGame: Operation Flashpoint (1.00) \nDescription: Unassigns a unit from whichever vehicle that unit is currently assigned \n to. If the unit is currently in that vehicle, the group leader will \n issue an order to disembark.  \nSyntax:  \n unassignVehicle unitName \nParameters: \nunitName: Object \nReturn Value: \n Nothing
unitBackpack \nGame: ArmA 2: Operation Arrowhead (1.51) \nDescription: Returns unit's backpack  \nSyntax:  \n unitBackpack unit \nParameters: \nunit: Object \nReturn Value: \n Object
unitPos \nGame: Armed Assault (1.00) \nDescription: Return the unit position rules. \nThe return value is always "Auto" unless the unit has gotten a setUnitPos \n command. In that case the value is the last stance the unit was ordered \n to.  \nSyntax:  \n String = unitPos unitName \nParameters: \nunitName: Object \nReturn Value: \n String
unitReady \nGame: Operation Flashpoint (1.00) \nDescription: Check if the unit is ready. Unit is busy when it is given some command \n like move, until the command is finished.  \nSyntax:  \n Boolean = unitReady unitName \nParameters: \nunitName: Object \nReturn Value: \n Boolean
unitRecoilCoefficient \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns recoil coefficient of a soldier.  \nSyntax:  \n unitRecoilCoefficient soldier \nParameters: \nsoldier: Object \nReturn Value: \n Number
units \nGame: Operation Flashpoint (1.00) \nDescription: Returns an array with all the units in the group or unit. \nFor a destroyed object an empty array is returned.  \nSyntax:  \n Array = units groupOrunit \nParameters: \ngroupOrunit: Group or Object \nReturn Value: \n Array
unitsBelowHeight \nGame: ARMA 2  (1.04) \nDescription: Returns units in group below passed height.  \nSyntax:  \n group or array unitsBelowHeight height \nParameters: \ngroup or array Group or Array \nheight Number \nReturn Value: \n Array
unlockAchievement \nGame: ARMA 2  (1.00) \nDescription: Unlock the given achievement.  \nSyntax:  \n unlockAchievement name \nParameters: \nname: String \nReturn Value: \n Boolean
unregisterTask \nGame: ARMA 2  (1.00) \nDescription: Unregister a task type.  \nSyntax:  \n teamMember unregisterTask name \nParameters: \nteamMember: Team Member \nname: String \nReturn Value: \n Boolean
updateDrawIcon \nGame: ARMA 2  (1.00) \nDescription: Updates the icon to be shown in 2D editor for the specified editor \n,object. If maintain size is false,icon will not scale depending \n on the,scale of the map. If maintain size is a number,the icon will \n maintain,size if map scale is below that number.   \nSyntax:  \n map updateDrawIcon [object,string identifier,color,offset,width,height,maintain size?,angle,shadow] \nParameters: \nmap: Control - \n[object,string identifier,color,offset,width,height,maintain size?,angle,shadow]: Array - \nReturn Value: \n Nothing
updateMenuItem \nGame: ARMA 2  (1.00) \nDescription: Sets the text and command for the menu item. index is index as returned \n from addMenuItem command. command is optional.  \nSyntax:  \n map updateMenuItem [menu item index,text,command] \nParameters: \nmap: Control - \n[menu item index,text,command]: Array - \nReturn Value: \n Nothing
updateObjectTree \nGame: ARMA 2  (1.00) \nDescription: Update the editor object tree.  \nSyntax:  \n updateObjectTree map \nParameters: \nmap: Control - \nReturn Value: \n Nothing
useAudioTimeForMoves \nGame: ARMA 2  (1.00) \nDescription: Switch between elapsed game time and audio time being used as animation \n timer. Used for audio/animation synchronization.  \nSyntax:  \n soldier useAudioTimeForMoves toggle \nParameters: \nsoldier: Object \ntoggle: Boolean \nReturn Value: \n Nothing
vectorDir \nGame: Armed Assault (1.00) \nDescription: Return object's direction vector in world Position coordinates ([x, z, y]).  \nA unit facing North would return [0,1,0]A unit facing East would \n return [1,0,0]A unit facing South would return [0,-1,0]A unit facing \n West would return [-1,0,0] \n \n \nSyntax:  \n Array = vectorDir objectName \nParameters: \nobjectName: Object \nReturn Value: \n Array - format Position
vectorUp \nGame: Armed Assault (1.00) \nDescription: Return object's up vector in world Position coordinates ( [x, y, z] ).  \nSyntax:  \n Array = vectorUp objectName \nParameters: \nobjectName: Object \nReturn Value: \n Array - format Position
vehicle \nGame: Operation Flashpoint (1.00) \nDescription: Vehicle in which given unit is mounted. If none, unit is returned \n.  \nSyntax:  \n Object = vehicle unitName \nParameters: \nunitName: Object \nReturn Value: \n Object
vehicleChat \nGame: Operation Flashpoint (1.34) \nDescription: Type text to vehicle radio channel. \nThis function only types text to the list, it does not broadcast \n the message. If you want the message to show on all computers, you have \n to execute it on them. \nObject parameter must be a vehicle, not a player. \nIf you are in a crew seat (i.e. driver, gunner or commander), then \n it will include that role in the chat name output (Eg: Driver (you_name \n): "Message").  \nSyntax:  \n vehicleName vehicleChat text \nParameters: \nvehicleName: Object \ntext: String \nReturn Value: \n Nothing
vehicleRadio \nBehavior: global \nGame: Operation Flashpoint (1.00) \nDescription: Send message to vehicle radio channel. Message is defined in description \n.ext.  \nSyntax:  \n  vehicleName vehicleRadio name \nParameters: \nvehicleName: Object \nname: String \nReturn Value: \n Nothing
vehicles \nGame: Armed Assault (1.00) \nDescription: Returns a list of all vehicles.  \nSyntax:  \n vehicles \nReturn Value: \n Array
vehicleVarName \nGame: Armed Assault (1.00) \nDescription: Returns the name of the variable which contains a primary editor \n reference to this object. This is the variable given in the Insert \n Unit dialog / name field, in the editor. It can be changed using \n setVehicleVarName. If object refers to a vehicle that wasn't given \n a name in the editor, the return value is an empty string, "". \nSyntax:  \n String = vehicleVarName objectName \nParameters: \nobjectName: Object \nReturn Value: \n String
velocity \nGame: Operation Flashpoint: Resistance (1.8) \nDescription: Return velocity (speed vector) of Unit as an array with format [x, z, y].  Units \n are in metres per second.  \nSyntax:  \n Array = velocity vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n Array
verifySignature \nGame: Armed Assault (1.00) \nDescription: Check if file is signed by an accepted key.  \nSyntax:  \n Boolean = verifySignature filename \nParameters: \nfilename: String \nReturn Value: \n Boolean
viewDistance \nGame: ARMA 2  (1.00) \nDescription: Returns the rendering distance.  \nSyntax:  \n viewDistance \nReturn Value: \n Number
visibleMap \nGame: ARMA 2  (1.00) \nDescription: Return true if the main map is shown (active).  \nSyntax:  \n visibleMap \nReturn Value: \n Boolean
visiblePosition \nGame: ArmA 2: Operation Arrowhead (1.60) \nDescription: Returns an object's rendered 3D position (z value above ground level \n).  \nSyntax:  \nvisiblePosition object \nParameters: \nobject: Object: - name of the object \nReturn Value: \n Array - format Position3D
visiblePositionASL \nGame: ArmA 2: Operation Arrowhead (1.62) \nDescription: Returns an object's rendered 3D position ASL (z value above sea level \n).  \nSyntax:  \nvisiblePositionASL object \nParameters: \nobject: Object: - name of the object \nReturn Value: \n Array - format PositionASL
waitUntil \nGame: Armed Assault (1.00) \nDescription: Suspend execution of function or SQF based script until condition \n is satisfied.  \nSyntax:  \n waitUntil condition \nParameters: \ncondition: Code \nReturn Value: \n Nothing
waypointAttachedObject \nGame: ARMA 2  (1.00) \nDescription: Gets the object attached to the waypoint.  \nSyntax:  \n waypointAttachedObject waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n Object
waypointAttachedVehicle \nGame: ARMA 2  (1.00) \nDescription: Gets the vehicle attached to the waypoint.  \nSyntax:  \n waypointAttachedVehicle waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n Object
waypointAttachObject \nGame: Armed Assault (1.00) \nDescription: Attaches a static object via it's numeric ID to the given waypoint \n.  \nSyntax:  \n waypoint waypointAttachObject objectID \nParameters: \nwaypoint: Array - format Waypoint \nobjectID: Number \nReturn Value: \n Nothing
waypointAttachVehicle \nGame: Armed Assault (1.00) \nDescription: Attaches a Unit to the given Waypoint.  \nSyntax:  \n waypoint waypointAttachVehicle vehicleName \nParameters: \nwaypoint: Array - format Waypoint \nvehicleName: Object \nReturn Value: \n Nothing
waypointBehaviour \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint behavior.  \nSyntax:  \n waypointBehaviour waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n String
waypointCombatMode \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint combat mode.  \nSyntax:  \n waypointCombatMode waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n String
waypointCompletionRadius \nGame: ARMA 2  (1.00) \nDescription: Gets the radius around the waypoint where the waypoint is completed \n.  \nSyntax:  \n waypointCompletionRadius waypoint \nParameters: \nwaypoint:  Array - format Waypoint \nReturn Value: \n Number
waypointDescription \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint description.  \nSyntax:  \n waypointDescription waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n String
waypointFormation \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint formation. \nPossible values are:  "NO CHANGE" "COLUMN" "STAG COLUMN" "WEDGE" "ECH LEFT \n" "ECH RIGHT" "VEE" "LINE" "FILE" "DIAMOND" \nSyntax:  \n waypointFormation waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n String
waypointHousePosition \nGame: ARMA 2  (1.00) \nDescription: Gets the house position assigned to the waypoint.  \nSyntax:  \n waypointHousePosition waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n Number
waypointPosition \nGame: Operation Flashpoint (1.5) \nDescription: Get Waypoint's  Position.  \nNote: This function is identical to getWPPos.  \nSyntax:  \n Array = waypointPosition waypoint \nParameters: \nwaypoint: Array - format Waypoint \nReturn Value: \n Array - format Position
waypoints \nBehavior: global \nGame: Armed Assault (1.05) \nDescription: Returns an array of waypoints for the specified unit/group.  \nSyntax:  \n Array = waypoints groupName \nParameters: \ngroupName: Group \nReturn Value: \n Array of waypoints each in format Waypoint
waypointScript \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint script.  \nSyntax:  \n waypointScript waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n String
waypointShow \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint show/hide status.  \nSyntax:  \n waypointShow waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n String
waypointSpeed \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint speed. \nPossible values are: "UNCHANGED" "LIMITED" "NORMAL" "FULL" \nSyntax:  \n waypointSpeed waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n String
waypointStatements \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint statements.  \nSyntax:  \n waypointStatements waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n Array
waypointTimeout \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint timeout values.  \nSyntax:  \n waypointTimeout waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n Array
waypointType \nGame: ARMA 2  (1.00) \nDescription: Gets the waypoint type. \nType can be: "MOVE" "DESTROY" "GETIN" "SAD" "JOIN" "LEADER" "GETOUT \n" "CYCLE" "LOAD" "UNLOAD" "TR UNLOAD" "HOLD" "SENTRY" "GUARD" "TALK \n" "SCRIPTED" "SUPPORT" "GETIN NEAREST" "DISMISS" "AND" "OR" \nMore details at Waypoint types. \nSyntax:  \n waypointType waypoint \nParameters: \nwaypoint:  - \nReturn Value: \n String
waypointVisible \nGame: ArmA 2: Operation Arrowhead (1.55) \nDescription: Returns the visibility of the waypoint. \nReturns 0 (Number) for a non valid waypoint.  \nSyntax:  \n waypointVisible waypoint \nParameters: \nwaypoint: Array - format Waypoint \nReturn Value: \n Boolean
weaponDirection \nBehavior: global \nGame: Armed Assault (1.00) \nDescription: Returns the direction that the vehicle weapon is aiming in. \nFor addons the weapon name must be an entry in CfgWeapons. \nReturns an array in format [x, z, y]  \nSyntax:  \n vehicleName weaponDirection weaponName \nParameters: \nvehicleName: Object \nweaponName: String \nReturn Value: \n Array - format Vector3D
weapons \nGame: Operation Flashpoint: Resistance (1.75) \nDescription: Returns array of names of all Unit's weapons.  \nSyntax:  \n Array = weapons vehicleName \nParameters: \nvehicleName: Object \nReturn Value: \n  Array of weapon names.
weaponState \nGame: ArmA 2: Operation Arrowhead (1.60) \nDescription: Returns the current weapon state as an array of strings in the following \n format [WeaponName, MuzzleName, ModeName, MagazineName, AmmoCount \n] (AmmoCount is Number).  \nSyntax:  \n weaponState unitName \nParameters: \nunitName: Object \nReturn Value: \n Array: ["m16a4","m16a4","Single","30Rnd_556x45_Stanag",29] 
weaponsTurret \nBehavior: global \nGame: ArmA 2: Operation Arrowhead (1.52) \nDescription: Returns all weapons of given turret. Use turret path [-1] for driver \n's turret.  \nSyntax:  \n vehicle weaponsTurret turretPath \nParameters: \nvehicle: Object \nturretPath: Array \nReturn Value: \n Array of Strings
west \nGame: Operation Flashpoint (1.00) \nDescription: West side.  \nSyntax:  \n Side = west \nReturn Value: \n Side
WFSideText \nGame: ARMA 2  (1.04) \nDescription: Returns the unlocalized text value of an object's side / a group \n's side or a side as: \nEast, West, Resistance, Civilian or Unknown  \nSyntax:  \n WFSideText objectOrGroupOrSide \nParameters: \nobjectOrGroupOrSide: Object, Group or Side \nReturn Value: \n String - unlocalized text value of objectOrGroupOrSide's Side
while \nGame: Operation Flashpoint: Resistance (1.85) \nDescription: Repeat Code while condition is true.  \nSyntax:  \n while condition \nParameters: \ncondition: Code \nReturn Value: \n While Type
wind \nGame: Armed Assault (1.00) \nDescription: Returns the current wind vector as array [x, z, y].  \nSyntax:  \n wind \nReturn Value: \n Array
with \nGame: ARMA 2  (1.00) \nDescription: Execute the code inside the given namespace.  \nSyntax:  \n with NameSpace do {...}; \nParameters: \nNamespace: Namespace \nReturn Value: \n Anything
worldName \nGame: Armed Assault (1.00) \nDescription: Return the name of the currently loaded world.   \nSyntax:  \nString =  worldName \nReturn Value: \n String
worldToModel \nGame: Armed Assault (1.00) \nDescription: Converts position from world space to object model space.  \nSyntax:  \n Array =  objectName worldToModel worldPos \nParameters: \nobjectName: Object \nworldPos: Array - format PositionAGL \nReturn Value: \n Array
worldToScreen \nGame: ARMA 2  (1.00) \nDescription: Converts position in world space into screen (UI) space. \nIf a specified position is not within the current map view, an empty \n array is returned.  \nSyntax:  \n worldToScreen position \nParameters: \nposition: Array - 2D or 3D position \nReturn Value: \n Position2D - Screen position (upper left=[0,0], lower right=[1,1])
